RandomUtilsTest.testHashDouble(): ['RandomUtils.hashDouble(double)']
RandomUtilsTest.testHashFloat(): ['RandomUtils.hashFloat(float)']
RandomUtilsTest.testNextTwinPrime(): ['RandomUtils.nextTwinPrime(int)']
RandomUtilsTest.testSetSeed(): ['RandomWrapper.setSeed(long)', 'RandomUtils.getRandom(long)', 'RandomWrapper.resetToTestSeed()', 'RandomUtils.getRandom()']
VectorBinaryAssignTest.testAll(): ['VectorBinaryAssign.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'SequentialAccessSparseVector.invalidateCachedLength()', 'OrderedIntDoubleMapping.insertValueIfNotDefault(int,int,double)', 'SequentialAccessSparseVector.size()', 'OrderedIntDoubleMapping.get(int)', 'OrderedIntDoubleMapping.growTo(int)', 'SequentialAccessSparseVector.setQuick(int,double)', 'SequentialAccessSparseVector.getQuick(int)', 'OrderedIntDoubleMapping.set(int,double)', 'OrderedIntDoubleMapping.insertOrUpdateValueIfPresent(int,double)', 'DoubleDoubleFunction.apply(double,double)', 'OrderedIntDoubleMapping.find(int)']
TestOrderedIntDoubleMapping.testGetSet(): ['OrderedIntDoubleMapping.insertValueIfNotDefault(int,int,double)', 'OrderedIntDoubleMapping.get(int)', 'OrderedIntDoubleMapping.growTo(int)', 'OrderedIntDoubleMapping.getNumMappings()', 'OrderedIntDoubleMapping.insertOrUpdateValueIfPresent(int,double)', 'OrderedIntDoubleMapping.set(int,double)', 'OrderedIntDoubleMapping.find(int)']
TestOrderedIntDoubleMapping.testClone(): ['OrderedIntDoubleMapping.insertValueIfNotDefault(int,int,double)', 'OrderedIntDoubleMapping.get(int)', 'OrderedIntDoubleMapping.growTo(int)', 'OrderedIntDoubleMapping.getNumMappings()', 'OrderedIntDoubleMapping.insertOrUpdateValueIfPresent(int,double)', 'OrderedIntDoubleMapping.set(int,double)', 'OrderedIntDoubleMapping.find(int)', 'OrderedIntDoubleMapping.clone()']
TestOrderedIntDoubleMapping.testAddDefaultElements(): ['OrderedIntDoubleMapping.insertValueIfNotDefault(int,int,double)', 'OrderedIntDoubleMapping.growTo(int)', 'OrderedIntDoubleMapping.getNumMappings()', 'OrderedIntDoubleMapping.insertOrUpdateValueIfPresent(int,double)', 'OrderedIntDoubleMapping.set(int,double)', 'OrderedIntDoubleMapping.find(int)']
TestOrderedIntDoubleMapping.testMerge(): ['OrderedIntDoubleMapping.getValues()', 'OrderedIntDoubleMapping.getIndices()', 'OrderedIntDoubleMapping.insertValueIfNotDefault(int,int,double)', 'OrderedIntDoubleMapping.merge(org.apache.mahout.math.OrderedIntDoubleMapping)', 'OrderedIntDoubleMapping.get(int)', 'OrderedIntDoubleMapping.getNumMappings()', 'OrderedIntDoubleMapping.growTo(int)', 'OrderedIntDoubleMapping.set(int,double)', 'OrderedIntDoubleMapping.insertOrUpdateValueIfPresent(int,double)', 'OrderedIntDoubleMapping.find(int)']
TestVectorView.testCardinality(): ['Vector.size()']
TestVectorView.testCopy(): ['Vector.get(int)', 'Vector.size()', 'Vector.clone()']
TestVectorView.testGet(): ['Vector.get(int)', 'Vector.size()']
TestVectorView.testGetOver(): ['Vector.get(int)', 'Vector.size()']
TestVectorView.testIterator(): ['VectorView.iterateNonZero()', 'VectorView.iterator()']
TestVectorView.testGetUnder(): ['Vector.get(int)']
TestVectorView.testSet(): ['Vector.get(int)', 'Vector.set(int,double)', 'Vector.size()']
TestVectorView.testSize(): ['Vector.getNumNondefaultElements()']
TestVectorView.testViewPart(): ['Vector.get(int)', 'Vector.getNumNondefaultElements()', 'Vector.size()', 'Vector.viewPart(int,int)']
TestVectorView.testViewPartUnder(): ['Vector.viewPart(int,int)']
TestVectorView.testViewPartOver(): ['Vector.viewPart(int,int)']
TestVectorView.testViewPartCardinality(): ['Vector.viewPart(int,int)']
TestVectorView.testDot(): ['Vector.dot(org.apache.mahout.math.Vector)']
TestVectorView.testDotCardinality(): ['Vector.dot(org.apache.mahout.math.Vector)', 'Vector.size()']
TestVectorView.testNormalize(): ['Vector.get(int)', 'Vector.size()', 'Vector.normalize()']
TestVectorView.testMinus(): ['Vector.get(int)', 'Vector.size()', 'Vector.minus(org.apache.mahout.math.Vector)']
TestVectorView.testPlusDouble(): ['Vector.get(int)', 'Vector.plus(double)', 'Vector.size()']
TestVectorView.testPlusVector(): ['Vector.plus(org.apache.mahout.math.Vector)', 'Vector.get(int)', 'Vector.size()']
TestVectorView.testPlusVectorCardinality(): ['Vector.plus(org.apache.mahout.math.Vector)', 'Vector.size()']
TestVectorView.testTimesDouble(): ['Vector.get(int)', 'Vector.times(double)', 'Vector.size()']
TestVectorView.testDivideDouble(): ['Vector.get(int)', 'Vector.divide(double)', 'Vector.size()']
TestVectorView.testTimesVector(): ['Vector.get(int)', 'Vector.times(org.apache.mahout.math.Vector)', 'Vector.size()']
TestVectorView.testTimesVectorCardinality(): ['Vector.times(org.apache.mahout.math.Vector)', 'Vector.size()']
TestVectorView.testZSum(): ['Vector.zSum()']
TestVectorView.testAssignDouble(): ['Vector.assign(double)', 'Vector.getQuick(int)', 'Vector.size()']
TestVectorView.testAssignDoubleArray(): ['Vector.getQuick(int)', 'Vector.assign(double[])', 'Vector.size()']
TestVectorView.testAssignDoubleArrayCardinality(): ['Vector.assign(double[])', 'Vector.size()']
TestVectorView.testAssignVector(): ['Vector.getQuick(int)', 'Vector.assign(org.apache.mahout.math.Vector)', 'Vector.size()']
TestVectorView.testAssignVectorCardinality(): ['Vector.assign(org.apache.mahout.math.Vector)', 'Vector.size()']
TestVectorView.testAssignUnaryFunction(): ['Vector.getQuick(int)', 'Vector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector.size()']
TestVectorView.testAssignBinaryFunction(): ['Vector.getQuick(int)', 'Vector.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Vector.size()']
TestVectorView.testAssignBinaryFunction2(): ['Vector.getQuick(int)', 'Vector.assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', 'Vector.size()']
TestVectorView.testAssignBinaryFunction3(): ['Vector.getQuick(int)', 'Vector.assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', 'Vector.size()']
TestVectorView.testLike(): ['Vector.like()']
TestVectorView.testCrossProduct(): ['Matrix.getQuick(int,int)', 'Matrix.rowSize()', 'Vector.getQuick(int)', 'Vector.cross(org.apache.mahout.math.Vector)', 'Matrix.columnSize()', 'Vector.size()']
FileBasedMatrixTest.testBigMatrix(): ['MatrixSlice.vector()', 'FileBasedMatrix.get(int,int)', 'RandomWrapper.setSeed(long)', 'FileBasedMatrix.addData(java.nio.DoubleBuffer)', 'Matrix.columnSize()', 'Matrix.iterator()', 'FileBasedMatrix.writeMatrix(java.io.File,org.apache.mahout.math.Matrix)', 'RandomUtils.getRandom()', 'MatrixSlice.getVector()', 'Vector.all()', 'Vector$Element.get()', 'RandomWrapper.resetToTestSeed()', 'Matrix.set(int,int,double)', 'FileBasedMatrix.setData(java.io.File,boolean)']
FileBasedMatrixTest.testSetData(): ['MatrixSlice.vector()', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'FileBasedMatrix.addData(java.nio.DoubleBuffer)', 'Matrix.columnSize()', 'Vector.assign(org.apache.mahout.math.Vector)', 'Matrix.iterator()', 'Vector.plus(org.apache.mahout.math.Vector)', 'Vector.minus(org.apache.mahout.math.Vector)', 'FileBasedMatrix.writeMatrix(java.io.File,org.apache.mahout.math.Matrix)', 'MultiNormal.sample()', 'DenseVector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'MatrixSlice.getVector()', 'Vector.all()', 'Vector.norm(double)', 'FileBasedMatrix.iterator()', 'Vector$Element.get()', 'FileBasedMatrix.setData(java.io.File,boolean)', 'Matrix.times(org.apache.mahout.math.Vector)', 'Matrix.viewRow(int)']
FloatArrayListTest.testGetEmpty(): ['FloatArrayList.get(int)']
FloatArrayListTest.testAdd(): ['Arrays.ensureCapacity(float[],int)', 'FloatArrayList.add(float)', 'FloatArrayList.ensureCapacity(int)', 'FloatArrayList.size()', 'FloatArrayList.get(int)']
FloatArrayListTest.testBinarySearch(): ['BinarySearch.binarySearchFromTo(float[],float,int,int)', 'BinarySearch.lessThan(float,float)', 'FloatArrayList.binarySearchFromTo(float,int,int)']
FloatArrayListTest.testClone(): ['FloatArrayList.setSizeRaw(int)', 'FloatArrayList.copy()', 'FloatArrayList.clone()']
FloatArrayListTest.testElements(): ['FloatArrayList.size()', 'FloatArrayList.elements()', 'FloatArrayList.elements(float[])']
FloatArrayListTest.testEquals(): ['Arrays.ensureCapacity(float[],int)', 'FloatArrayList.ensureCapacity(int)', 'FloatArrayList.equals(java.lang.Object)', 'FloatArrayList.get(int)', 'FloatArrayList.add(float)', 'AbstractFloatList.size()', 'AbstractFloatList.getQuick(int)', 'FloatArrayList.size()', 'FloatArrayList.elements()', 'AbstractFloatList.equals(java.lang.Object)']
FloatArrayListTest.testForEach(): ['FloatProcedure.apply(float)', 'FloatArrayList.forEach(org.apache.mahout.math.function.FloatProcedure)']
FloatArrayListTest.testGetQuick(): ['FloatArrayList.getQuick(int)']
FloatArrayListTest.testIndexOfFromTo(): ['FloatArrayList.checkRangeFromTo(int,int,int)', 'FloatArrayList.indexOfFromTo(float,int,int)']
FloatArrayListTest.testLastIndexOfFromTo(): ['FloatArrayList.checkRangeFromTo(int,int,int)', 'Arrays.ensureCapacity(float[],int)', 'FloatArrayList.lastIndexOf(float)', 'FloatArrayList.add(float)', 'FloatArrayList.lastIndexOfFromTo(float,int,int)', 'FloatArrayList.ensureCapacity(int)']
FloatArrayListTest.testPartFromTo(): ['FloatArrayList.checkRangeFromTo(int,int,int)', 'AbstractFloatList.size()', 'AbstractFloatList.getQuick(int)', 'FloatArrayList.partFromTo(int,int)', 'AbstractFloatList.get(int)']
FloatArrayListTest.testPartFromToOOB(): ['FloatArrayList.partFromTo(int,int)', 'FloatArrayList.checkRangeFromTo(int,int,int)']
FloatArrayListTest.testRemoveAll(): ['AbstractFloatList.removeAll(org.apache.mahout.math.list.AbstractFloatList)', 'Arrays.ensureCapacity(float[],int)', 'FloatArrayList.ensureCapacity(int)', 'AbstractFloatList.partFromTo(int,int)', 'FloatArrayList.size()', 'AbstractFloatList.indexOfFromTo(float,int,int)', 'BinarySearch.binarySearchFromTo(float[],float,int,int)', 'AbstractFloatList.clone()', 'FloatArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractFloatList,int,int)', 'AbstractFloatList.setQuick(int,float)', 'Arithmetic.log2(double)', 'FloatArrayList.removeAll(org.apache.mahout.math.list.AbstractFloatList)', 'FloatArrayList.add(float)', 'FloatArrayList.quickSort()', 'FloatArrayList.setSize(int)', 'AbstractFloatList.checkRangeFromTo(int,int,int)', 'AbstractFloatList.isEmpty()', 'FloatArrayList.get(int)', 'FloatArrayList.binarySearchFromTo(float,int,int)', 'AbstractFloatList.size()', 'AbstractFloatList.getQuick(int)', 'BinarySearch.lessThan(float,float)', 'AbstractFloatList.setSize(int)']
FloatArrayListTest.testReplaceFromToWith(): ['Arrays.ensureCapacity(float[],int)', 'FloatArrayList.replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractFloatList,int,int)', 'FloatArrayList.add(float)', 'FloatArrayList.ensureCapacity(int)', 'FloatArrayList.get(int)']
FloatArrayListTest.testRetainAllSmall(): ['Arrays.ensureCapacity(float[],int)', 'AbstractFloatList.retainAll(org.apache.mahout.math.list.AbstractFloatList)', 'FloatArrayList.ensureCapacity(int)', 'AbstractFloatList.partFromTo(int,int)', 'FloatArrayList.size()', 'AbstractFloatList.indexOfFromTo(float,int,int)', 'BinarySearch.binarySearchFromTo(float[],float,int,int)', 'AbstractFloatList.clone()', 'FloatArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractFloatList,int,int)', 'AbstractFloatList.setQuick(int,float)', 'Arithmetic.log2(double)', 'FloatArrayList.add(float)', 'FloatArrayList.quickSort()', 'FloatArrayList.setSize(int)', 'AbstractFloatList.checkRangeFromTo(int,int,int)', 'FloatArrayList.addAllOf(org.apache.mahout.math.list.FloatArrayList)', 'AbstractFloatList.isEmpty()', 'FloatArrayList.retainAll(org.apache.mahout.math.list.AbstractFloatList)', 'FloatArrayList.get(int)', 'FloatArrayList.binarySearchFromTo(float,int,int)', 'AbstractFloatList.size()', 'AbstractFloatList.getQuick(int)', 'BinarySearch.lessThan(float,float)', 'AbstractFloatList.setSize(int)']
FloatArrayListTest.testRetainAllSmaller(): ['Arrays.ensureCapacity(float[],int)', 'AbstractFloatList.retainAll(org.apache.mahout.math.list.AbstractFloatList)', 'FloatArrayList.ensureCapacity(int)', 'AbstractFloatList.partFromTo(int,int)', 'FloatArrayList.size()', 'AbstractFloatList.indexOfFromTo(float,int,int)', 'BinarySearch.binarySearchFromTo(float[],float,int,int)', 'AbstractFloatList.clone()', 'FloatArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractFloatList,int,int)', 'AbstractFloatList.setQuick(int,float)', 'Arithmetic.log2(double)', 'FloatArrayList.add(float)', 'FloatArrayList.quickSort()', 'FloatArrayList.setSize(int)', 'AbstractFloatList.checkRangeFromTo(int,int,int)', 'FloatArrayList.addAllOf(org.apache.mahout.math.list.FloatArrayList)', 'AbstractFloatList.isEmpty()', 'FloatArrayList.retainAll(org.apache.mahout.math.list.AbstractFloatList)', 'FloatArrayList.get(int)', 'FloatArrayList.binarySearchFromTo(float,int,int)', 'AbstractFloatList.size()', 'AbstractFloatList.getQuick(int)', 'BinarySearch.lessThan(float,float)', 'AbstractFloatList.setSize(int)']
DoubleArrayListTest.testGetEmpty(): ['DoubleArrayList.get(int)']
DoubleArrayListTest.testAdd(): ['DoubleArrayList.ensureCapacity(int)', 'DoubleArrayList.add(double)', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)', 'Arrays.ensureCapacity(double[],int)']
DoubleArrayListTest.testBinarySearch(): ['BinarySearch.binarySearchFromTo(double[],double,int,int)', 'DoubleArrayList.binarySearchFromTo(double,int,int)', 'BinarySearch.lessThan(double,double)']
DoubleArrayListTest.testClone(): ['DoubleArrayList.clone()', 'DoubleArrayList.copy()', 'DoubleArrayList.setSizeRaw(int)']
DoubleArrayListTest.testElements(): ['DoubleArrayList.size()', 'DoubleArrayList.elements()', 'DoubleArrayList.elements(double[])']
DoubleArrayListTest.testEquals(): ['AbstractDoubleList.size()', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'DoubleArrayList.add(double)', 'AbstractDoubleList.equals(java.lang.Object)', 'DoubleArrayList.equals(java.lang.Object)', 'AbstractDoubleList.getQuick(int)']
DoubleArrayListTest.testForEach(): ['DoubleArrayList.forEach(org.apache.mahout.math.function.DoubleProcedure)', 'DoubleProcedure.apply(double)']
DoubleArrayListTest.testGetQuick(): ['DoubleArrayList.getQuick(int)']
DoubleArrayListTest.testIndexOfFromTo(): ['DoubleArrayList.checkRangeFromTo(int,int,int)', 'DoubleArrayList.indexOfFromTo(double,int,int)']
DoubleArrayListTest.testLastIndexOfFromTo(): ['DoubleArrayList.checkRangeFromTo(int,int,int)', 'DoubleArrayList.lastIndexOfFromTo(double,int,int)', 'DoubleArrayList.add(double)', 'DoubleArrayList.ensureCapacity(int)', 'DoubleArrayList.lastIndexOf(double)', 'Arrays.ensureCapacity(double[],int)']
DoubleArrayListTest.testPartFromTo(): ['AbstractDoubleList.size()', 'DoubleArrayList.checkRangeFromTo(int,int,int)', 'AbstractDoubleList.get(int)', 'AbstractDoubleList.getQuick(int)', 'DoubleArrayList.partFromTo(int,int)']
DoubleArrayListTest.testPartFromToOOB(): ['DoubleArrayList.checkRangeFromTo(int,int,int)', 'DoubleArrayList.partFromTo(int,int)']
DoubleArrayListTest.testRemoveAll(): ['AbstractDoubleList.removeAll(org.apache.mahout.math.list.AbstractDoubleList)', 'DoubleArrayList.add(double)', 'DoubleArrayList.setSize(int)', 'AbstractDoubleList.isEmpty()', 'BinarySearch.binarySearchFromTo(double[],double,int,int)', 'BinarySearch.lessThan(double,double)', 'DoubleArrayList.size()', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'AbstractDoubleList.setSize(int)', 'AbstractDoubleList.checkRangeFromTo(int,int,int)', 'Arithmetic.log2(double)', 'DoubleArrayList.quickSort()', 'DoubleArrayList.get(int)', 'AbstractDoubleList.partFromTo(int,int)', 'DoubleArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractDoubleList,int,int)', 'DoubleArrayList.removeAll(org.apache.mahout.math.list.AbstractDoubleList)', 'AbstractDoubleList.size()', 'DoubleArrayList.binarySearchFromTo(double,int,int)', 'AbstractDoubleList.setQuick(int,double)', 'AbstractDoubleList.clone()', 'AbstractDoubleList.indexOfFromTo(double,int,int)', 'AbstractDoubleList.getQuick(int)']
DoubleArrayListTest.testReplaceFromToWith(): ['DoubleArrayList.ensureCapacity(int)', 'DoubleArrayList.add(double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractDoubleList,int,int)', 'Arrays.ensureCapacity(double[],int)']
DoubleArrayListTest.testRetainAllSmall(): ['DoubleArrayList.add(double)', 'DoubleArrayList.retainAll(org.apache.mahout.math.list.AbstractDoubleList)', 'DoubleArrayList.setSize(int)', 'AbstractDoubleList.isEmpty()', 'BinarySearch.binarySearchFromTo(double[],double,int,int)', 'BinarySearch.lessThan(double,double)', 'DoubleArrayList.size()', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'AbstractDoubleList.setSize(int)', 'AbstractDoubleList.checkRangeFromTo(int,int,int)', 'Arithmetic.log2(double)', 'DoubleArrayList.quickSort()', 'DoubleArrayList.get(int)', 'AbstractDoubleList.partFromTo(int,int)', 'DoubleArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractDoubleList,int,int)', 'AbstractDoubleList.size()', 'DoubleArrayList.binarySearchFromTo(double,int,int)', 'DoubleArrayList.addAllOf(org.apache.mahout.math.list.DoubleArrayList)', 'AbstractDoubleList.setQuick(int,double)', 'AbstractDoubleList.retainAll(org.apache.mahout.math.list.AbstractDoubleList)', 'AbstractDoubleList.clone()', 'AbstractDoubleList.indexOfFromTo(double,int,int)', 'AbstractDoubleList.getQuick(int)']
DoubleArrayListTest.testRetainAllSmaller(): ['DoubleArrayList.add(double)', 'DoubleArrayList.retainAll(org.apache.mahout.math.list.AbstractDoubleList)', 'DoubleArrayList.setSize(int)', 'AbstractDoubleList.isEmpty()', 'BinarySearch.binarySearchFromTo(double[],double,int,int)', 'BinarySearch.lessThan(double,double)', 'DoubleArrayList.size()', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'AbstractDoubleList.setSize(int)', 'AbstractDoubleList.checkRangeFromTo(int,int,int)', 'Arithmetic.log2(double)', 'DoubleArrayList.quickSort()', 'DoubleArrayList.get(int)', 'AbstractDoubleList.partFromTo(int,int)', 'DoubleArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractDoubleList,int,int)', 'AbstractDoubleList.size()', 'DoubleArrayList.binarySearchFromTo(double,int,int)', 'DoubleArrayList.addAllOf(org.apache.mahout.math.list.DoubleArrayList)', 'AbstractDoubleList.setQuick(int,double)', 'AbstractDoubleList.retainAll(org.apache.mahout.math.list.AbstractDoubleList)', 'AbstractDoubleList.clone()', 'AbstractDoubleList.indexOfFromTo(double,int,int)', 'AbstractDoubleList.getQuick(int)']
ShortArrayListTest.testGetEmpty(): ['ShortArrayList.get(int)']
ShortArrayListTest.testAdd(): ['ShortArrayList.get(int)', 'Arrays.ensureCapacity(short[],int)', 'ShortArrayList.add(short)', 'ShortArrayList.size()', 'ShortArrayList.ensureCapacity(int)']
ShortArrayListTest.testBinarySearch(): ['ShortArrayList.binarySearchFromTo(short,int,int)', 'BinarySearch.binarySearchFromTo(short[],short,int,int)']
ShortArrayListTest.testClone(): ['ShortArrayList.copy()', 'ShortArrayList.setSizeRaw(int)', 'ShortArrayList.clone()']
ShortArrayListTest.testElements(): ['ShortArrayList.elements()', 'ShortArrayList.size()', 'ShortArrayList.elements(short[])']
ShortArrayListTest.testEquals(): ['ShortArrayList.size()', 'AbstractShortList.equals(java.lang.Object)', 'ShortArrayList.ensureCapacity(int)', 'ShortArrayList.get(int)', 'ShortArrayList.equals(java.lang.Object)', 'Arrays.ensureCapacity(short[],int)', 'ShortArrayList.elements()', 'ShortArrayList.add(short)', 'AbstractShortList.getQuick(int)', 'AbstractShortList.size()']
ShortArrayListTest.testForEach(): ['ShortProcedure.apply(short)', 'ShortArrayList.forEach(org.apache.mahout.math.function.ShortProcedure)']
ShortArrayListTest.testGetQuick(): ['ShortArrayList.getQuick(int)']
ShortArrayListTest.testIndexOfFromTo(): ['ShortArrayList.checkRangeFromTo(int,int,int)', 'ShortArrayList.indexOfFromTo(short,int,int)']
ShortArrayListTest.testLastIndexOfFromTo(): ['Arrays.ensureCapacity(short[],int)', 'ShortArrayList.checkRangeFromTo(int,int,int)', 'ShortArrayList.add(short)', 'ShortArrayList.lastIndexOf(short)', 'ShortArrayList.ensureCapacity(int)', 'ShortArrayList.lastIndexOfFromTo(short,int,int)']
ShortArrayListTest.testPartFromTo(): ['ShortArrayList.checkRangeFromTo(int,int,int)', 'AbstractShortList.getQuick(int)', 'ShortArrayList.partFromTo(int,int)', 'AbstractShortList.size()', 'AbstractShortList.get(int)']
ShortArrayListTest.testPartFromToOOB(): ['ShortArrayList.checkRangeFromTo(int,int,int)', 'ShortArrayList.partFromTo(int,int)']
ShortArrayListTest.testRemoveAll(): ['ShortArrayList.quickSort()', 'AbstractShortList.size()', 'AbstractShortList.setQuick(int,short)', 'ShortArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractShortList,int,int)', 'AbstractShortList.checkRangeFromTo(int,int,int)', 'AbstractShortList.isEmpty()', 'AbstractShortList.partFromTo(int,int)', 'ShortArrayList.removeAll(org.apache.mahout.math.list.AbstractShortList)', 'AbstractShortList.removeAll(org.apache.mahout.math.list.AbstractShortList)', 'AbstractShortList.indexOfFromTo(short,int,int)', 'AbstractShortList.getQuick(int)', 'Arithmetic.log2(double)', 'AbstractShortList.clone()', 'AbstractShortList.setSize(int)', 'ShortArrayList.size()', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'ShortArrayList.binarySearchFromTo(short,int,int)', 'ShortArrayList.setSize(int)', 'BinarySearch.binarySearchFromTo(short[],short,int,int)', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)']
ShortArrayListTest.testReplaceFromToWith(): ['ShortArrayList.get(int)', 'Arrays.ensureCapacity(short[],int)', 'ShortArrayList.add(short)', 'ShortArrayList.ensureCapacity(int)', 'ShortArrayList.replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractShortList,int,int)']
ShortArrayListTest.testRetainAllSmall(): ['ShortArrayList.quickSort()', 'AbstractShortList.size()', 'AbstractShortList.setQuick(int,short)', 'ShortArrayList.addAllOf(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractShortList,int,int)', 'AbstractShortList.checkRangeFromTo(int,int,int)', 'AbstractShortList.isEmpty()', 'AbstractShortList.partFromTo(int,int)', 'AbstractShortList.retainAll(org.apache.mahout.math.list.AbstractShortList)', 'AbstractShortList.indexOfFromTo(short,int,int)', 'AbstractShortList.getQuick(int)', 'Arithmetic.log2(double)', 'AbstractShortList.clone()', 'AbstractShortList.setSize(int)', 'ShortArrayList.size()', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'ShortArrayList.retainAll(org.apache.mahout.math.list.AbstractShortList)', 'ShortArrayList.binarySearchFromTo(short,int,int)', 'ShortArrayList.setSize(int)', 'BinarySearch.binarySearchFromTo(short[],short,int,int)', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)']
ShortArrayListTest.testRetainAllSmaller(): ['ShortArrayList.quickSort()', 'AbstractShortList.size()', 'AbstractShortList.setQuick(int,short)', 'ShortArrayList.addAllOf(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractShortList,int,int)', 'AbstractShortList.checkRangeFromTo(int,int,int)', 'AbstractShortList.isEmpty()', 'AbstractShortList.partFromTo(int,int)', 'AbstractShortList.retainAll(org.apache.mahout.math.list.AbstractShortList)', 'AbstractShortList.indexOfFromTo(short,int,int)', 'AbstractShortList.getQuick(int)', 'Arithmetic.log2(double)', 'AbstractShortList.clone()', 'AbstractShortList.setSize(int)', 'ShortArrayList.size()', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'ShortArrayList.retainAll(org.apache.mahout.math.list.AbstractShortList)', 'ShortArrayList.binarySearchFromTo(short,int,int)', 'ShortArrayList.setSize(int)', 'BinarySearch.binarySearchFromTo(short[],short,int,int)', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)']
CharArrayListTest.testGetEmpty(): ['CharArrayList.get(int)']
CharArrayListTest.testAdd(): ['Arrays.ensureCapacity(char[],int)', 'CharArrayList.ensureCapacity(int)', 'CharArrayList.size()', 'CharArrayList.get(int)', 'CharArrayList.add(char)']
CharArrayListTest.testBinarySearch(): ['BinarySearch.binarySearchFromTo(char[],char,int,int)', 'CharArrayList.binarySearchFromTo(char,int,int)']
CharArrayListTest.testClone(): ['CharArrayList.copy()', 'CharArrayList.setSizeRaw(int)', 'CharArrayList.clone()']
CharArrayListTest.testElements(): ['CharArrayList.size()', 'CharArrayList.elements(char[])', 'CharArrayList.elements()']
CharArrayListTest.testEquals(): ['CharArrayList.equals(java.lang.Object)', 'CharArrayList.ensureCapacity(int)', 'CharArrayList.elements()', 'CharArrayList.get(int)', 'AbstractCharList.equals(java.lang.Object)', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.size()', 'AbstractCharList.size()', 'AbstractCharList.getQuick(int)', 'CharArrayList.add(char)']
CharArrayListTest.testForEach(): ['CharProcedure.apply(char)', 'CharArrayList.forEach(org.apache.mahout.math.function.CharProcedure)']
CharArrayListTest.testGetQuick(): ['CharArrayList.getQuick(int)']
CharArrayListTest.testIndexOfFromTo(): ['CharArrayList.checkRangeFromTo(int,int,int)', 'CharArrayList.indexOfFromTo(char,int,int)']
CharArrayListTest.testLastIndexOfFromTo(): ['CharArrayList.ensureCapacity(int)', 'CharArrayList.lastIndexOf(char)', 'CharArrayList.lastIndexOfFromTo(char,int,int)', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.checkRangeFromTo(int,int,int)', 'CharArrayList.add(char)']
CharArrayListTest.testPartFromTo(): ['AbstractCharList.getQuick(int)', 'AbstractCharList.size()', 'AbstractCharList.get(int)', 'CharArrayList.checkRangeFromTo(int,int,int)', 'CharArrayList.partFromTo(int,int)']
CharArrayListTest.testPartFromToOOB(): ['CharArrayList.checkRangeFromTo(int,int,int)', 'CharArrayList.partFromTo(int,int)']
CharArrayListTest.testRemoveAll(): ['CharArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractCharList,int,int)', 'AbstractCharList.setSize(int)', 'AbstractCharList.size()', 'CharArrayList.setSize(int)', 'AbstractCharList.removeAll(org.apache.mahout.math.list.AbstractCharList)', 'AbstractCharList.partFromTo(int,int)', 'CharArrayList.get(int)', 'CharArrayList.removeAll(org.apache.mahout.math.list.AbstractCharList)', 'AbstractCharList.isEmpty()', 'Arithmetic.log2(double)', 'AbstractCharList.setQuick(int,char)', 'CharArrayList.ensureCapacity(int)', 'AbstractCharList.clone()', 'CharArrayList.size()', 'AbstractCharList.getQuick(int)', 'CharArrayList.quickSort()', 'AbstractCharList.checkRangeFromTo(int,int,int)', 'Arrays.ensureCapacity(char[],int)', 'AbstractCharList.indexOfFromTo(char,int,int)', 'BinarySearch.binarySearchFromTo(char[],char,int,int)', 'CharArrayList.binarySearchFromTo(char,int,int)', 'CharArrayList.add(char)']
CharArrayListTest.testReplaceFromToWith(): ['CharArrayList.replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractCharList,int,int)', 'CharArrayList.ensureCapacity(int)', 'CharArrayList.get(int)', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.add(char)']
CharArrayListTest.testRetainAllSmall(): ['CharArrayList.retainAll(org.apache.mahout.math.list.AbstractCharList)', 'CharArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractCharList,int,int)', 'AbstractCharList.setSize(int)', 'AbstractCharList.size()', 'CharArrayList.setSize(int)', 'AbstractCharList.partFromTo(int,int)', 'CharArrayList.get(int)', 'CharArrayList.addAllOf(org.apache.mahout.math.list.CharArrayList)', 'Arithmetic.log2(double)', 'AbstractCharList.isEmpty()', 'AbstractCharList.setQuick(int,char)', 'CharArrayList.ensureCapacity(int)', 'AbstractCharList.clone()', 'CharArrayList.size()', 'AbstractCharList.retainAll(org.apache.mahout.math.list.AbstractCharList)', 'AbstractCharList.getQuick(int)', 'CharArrayList.quickSort()', 'AbstractCharList.checkRangeFromTo(int,int,int)', 'Arrays.ensureCapacity(char[],int)', 'AbstractCharList.indexOfFromTo(char,int,int)', 'BinarySearch.binarySearchFromTo(char[],char,int,int)', 'CharArrayList.binarySearchFromTo(char,int,int)', 'CharArrayList.add(char)']
CharArrayListTest.testRetainAllSmaller(): ['CharArrayList.retainAll(org.apache.mahout.math.list.AbstractCharList)', 'CharArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractCharList,int,int)', 'AbstractCharList.setSize(int)', 'AbstractCharList.size()', 'CharArrayList.setSize(int)', 'AbstractCharList.partFromTo(int,int)', 'CharArrayList.get(int)', 'CharArrayList.addAllOf(org.apache.mahout.math.list.CharArrayList)', 'Arithmetic.log2(double)', 'AbstractCharList.isEmpty()', 'AbstractCharList.setQuick(int,char)', 'CharArrayList.ensureCapacity(int)', 'AbstractCharList.clone()', 'CharArrayList.size()', 'AbstractCharList.retainAll(org.apache.mahout.math.list.AbstractCharList)', 'AbstractCharList.getQuick(int)', 'CharArrayList.quickSort()', 'AbstractCharList.checkRangeFromTo(int,int,int)', 'Arrays.ensureCapacity(char[],int)', 'AbstractCharList.indexOfFromTo(char,int,int)', 'BinarySearch.binarySearchFromTo(char[],char,int,int)', 'CharArrayList.binarySearchFromTo(char,int,int)', 'CharArrayList.add(char)']
IntArrayListTest.testGetEmpty(): ['IntArrayList.get(int)']
IntArrayListTest.testAdd(): ['Arrays.ensureCapacity(int[],int)', 'IntArrayList.get(int)', 'IntArrayList.ensureCapacity(int)', 'IntArrayList.size()', 'IntArrayList.add(int)']
IntArrayListTest.testBinarySearch(): ['BinarySearch.binarySearchFromTo(int[],int,int,int)', 'IntArrayList.binarySearchFromTo(int,int,int)']
IntArrayListTest.testClone(): ['IntArrayList.clone()', 'IntArrayList.setSizeRaw(int)', 'IntArrayList.copy()']
IntArrayListTest.testElements(): ['IntArrayList.elements()', 'IntArrayList.size()', 'IntArrayList.elements(int[])']
IntArrayListTest.testEquals(): ['AbstractIntList.equals(java.lang.Object)', 'IntArrayList.get(int)', 'IntArrayList.ensureCapacity(int)', 'AbstractIntList.size()', 'IntArrayList.equals(java.lang.Object)', 'IntArrayList.elements()', 'Arrays.ensureCapacity(int[],int)', 'IntArrayList.size()', 'AbstractIntList.getQuick(int)', 'IntArrayList.add(int)']
IntArrayListTest.testForEach(): ['IntProcedure.apply(int)', 'IntArrayList.forEach(org.apache.mahout.math.function.IntProcedure)']
IntArrayListTest.testGetQuick(): ['IntArrayList.getQuick(int)']
IntArrayListTest.testIndexOfFromTo(): ['IntArrayList.checkRangeFromTo(int,int,int)', 'IntArrayList.indexOfFromTo(int,int,int)']
IntArrayListTest.testLastIndexOfFromTo(): ['IntArrayList.lastIndexOfFromTo(int,int,int)', 'IntArrayList.lastIndexOf(int)', 'Arrays.ensureCapacity(int[],int)', 'IntArrayList.checkRangeFromTo(int,int,int)', 'IntArrayList.ensureCapacity(int)', 'IntArrayList.add(int)']
IntArrayListTest.testPartFromTo(): ['IntArrayList.partFromTo(int,int)', 'IntArrayList.checkRangeFromTo(int,int,int)', 'AbstractIntList.size()', 'AbstractIntList.getQuick(int)', 'AbstractIntList.get(int)']
IntArrayListTest.testPartFromToOOB(): ['IntArrayList.partFromTo(int,int)', 'IntArrayList.checkRangeFromTo(int,int,int)']
IntArrayListTest.testRemoveAll(): ['IntArrayList.quickSort()', 'AbstractIntList.removeAll(org.apache.mahout.math.list.AbstractIntList)', 'AbstractIntList.isEmpty()', 'IntArrayList.setSize(int)', 'IntArrayList.size()', 'AbstractIntList.clone()', 'AbstractIntList.getQuick(int)', 'AbstractIntList.indexOfFromTo(int,int,int)', 'IntArrayList.ensureCapacity(int)', 'AbstractIntList.partFromTo(int,int)', 'AbstractIntList.size()', 'Arrays.ensureCapacity(int[],int)', 'Arithmetic.log2(double)', 'BinarySearch.binarySearchFromTo(int[],int,int,int)', 'AbstractIntList.setQuick(int,int)', 'AbstractIntList.setSize(int)', 'IntArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractIntList,int,int)', 'IntArrayList.binarySearchFromTo(int,int,int)', 'AbstractIntList.checkRangeFromTo(int,int,int)', 'IntArrayList.removeAll(org.apache.mahout.math.list.AbstractIntList)', 'IntArrayList.add(int)', 'IntArrayList.get(int)']
IntArrayListTest.testReplaceFromToWith(): ['Arrays.ensureCapacity(int[],int)', 'IntArrayList.get(int)', 'IntArrayList.replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractIntList,int,int)', 'IntArrayList.ensureCapacity(int)', 'IntArrayList.add(int)']
IntArrayListTest.testRetainAllSmall(): ['IntArrayList.quickSort()', 'AbstractIntList.isEmpty()', 'IntArrayList.setSize(int)', 'IntArrayList.size()', 'AbstractIntList.clone()', 'IntArrayList.addAllOf(org.apache.mahout.math.list.IntArrayList)', 'AbstractIntList.getQuick(int)', 'AbstractIntList.indexOfFromTo(int,int,int)', 'IntArrayList.ensureCapacity(int)', 'AbstractIntList.partFromTo(int,int)', 'AbstractIntList.size()', 'Arrays.ensureCapacity(int[],int)', 'Arithmetic.log2(double)', 'BinarySearch.binarySearchFromTo(int[],int,int,int)', 'AbstractIntList.setQuick(int,int)', 'AbstractIntList.setSize(int)', 'IntArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractIntList,int,int)', 'IntArrayList.binarySearchFromTo(int,int,int)', 'AbstractIntList.checkRangeFromTo(int,int,int)', 'IntArrayList.add(int)', 'IntArrayList.get(int)', 'AbstractIntList.retainAll(org.apache.mahout.math.list.AbstractIntList)', 'IntArrayList.retainAll(org.apache.mahout.math.list.AbstractIntList)']
IntArrayListTest.testRetainAllSmaller(): ['IntArrayList.quickSort()', 'AbstractIntList.isEmpty()', 'IntArrayList.setSize(int)', 'IntArrayList.size()', 'AbstractIntList.clone()', 'IntArrayList.addAllOf(org.apache.mahout.math.list.IntArrayList)', 'AbstractIntList.getQuick(int)', 'AbstractIntList.indexOfFromTo(int,int,int)', 'IntArrayList.ensureCapacity(int)', 'AbstractIntList.partFromTo(int,int)', 'AbstractIntList.size()', 'Arrays.ensureCapacity(int[],int)', 'Arithmetic.log2(double)', 'BinarySearch.binarySearchFromTo(int[],int,int,int)', 'AbstractIntList.setQuick(int,int)', 'AbstractIntList.setSize(int)', 'IntArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractIntList,int,int)', 'IntArrayList.binarySearchFromTo(int,int,int)', 'AbstractIntList.checkRangeFromTo(int,int,int)', 'IntArrayList.add(int)', 'IntArrayList.get(int)', 'AbstractIntList.retainAll(org.apache.mahout.math.list.AbstractIntList)', 'IntArrayList.retainAll(org.apache.mahout.math.list.AbstractIntList)']
ByteArrayListTest.testGetEmpty(): ['ByteArrayList.get(int)']
ByteArrayListTest.testAdd(): ['ByteArrayList.add(byte)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'ByteArrayList.get(int)']
ByteArrayListTest.testBinarySearch(): ['ByteArrayList.binarySearchFromTo(byte,int,int)', 'BinarySearch.binarySearchFromTo(byte[],byte,int,int)']
ByteArrayListTest.testClone(): ['ByteArrayList.copy()', 'ByteArrayList.setSizeRaw(int)', 'ByteArrayList.clone()']
ByteArrayListTest.testElements(): ['ByteArrayList.elements()', 'ByteArrayList.elements(byte[])', 'ByteArrayList.size()']
ByteArrayListTest.testEquals(): ['ByteArrayList.add(byte)', 'AbstractByteList.size()', 'ByteArrayList.get(int)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'ByteArrayList.equals(java.lang.Object)', 'AbstractByteList.equals(java.lang.Object)', 'AbstractByteList.getQuick(int)', 'ByteArrayList.elements()']
ByteArrayListTest.testForEach(): ['ByteArrayList.forEach(org.apache.mahout.math.function.ByteProcedure)', 'ByteProcedure.apply(byte)']
ByteArrayListTest.testGetQuick(): ['ByteArrayList.getQuick(int)']
ByteArrayListTest.testIndexOfFromTo(): ['ByteArrayList.checkRangeFromTo(int,int,int)', 'ByteArrayList.indexOfFromTo(byte,int,int)']
ByteArrayListTest.testLastIndexOfFromTo(): ['ByteArrayList.checkRangeFromTo(int,int,int)', 'ByteArrayList.add(byte)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.lastIndexOfFromTo(byte,int,int)', 'ByteArrayList.lastIndexOf(byte)']
ByteArrayListTest.testPartFromTo(): ['ByteArrayList.checkRangeFromTo(int,int,int)', 'ByteArrayList.partFromTo(int,int)', 'AbstractByteList.size()', 'AbstractByteList.getQuick(int)', 'AbstractByteList.get(int)']
ByteArrayListTest.testPartFromToOOB(): ['ByteArrayList.checkRangeFromTo(int,int,int)', 'ByteArrayList.partFromTo(int,int)']
ByteArrayListTest.testRemoveAll(): ['ByteArrayList.get(int)', 'AbstractByteList.clone()', 'AbstractByteList.indexOfFromTo(byte,int,int)', 'ByteArrayList.add(byte)', 'AbstractByteList.setQuick(int,byte)', 'Arithmetic.log2(double)', 'ByteArrayList.quickSort()', 'AbstractByteList.size()', 'AbstractByteList.partFromTo(int,int)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'ByteArrayList.removeAll(org.apache.mahout.math.list.AbstractByteList)', 'ByteArrayList.setSize(int)', 'AbstractByteList.isEmpty()', 'ByteArrayList.binarySearchFromTo(byte,int,int)', 'AbstractByteList.setSize(int)', 'AbstractByteList.removeAll(org.apache.mahout.math.list.AbstractByteList)', 'AbstractByteList.checkRangeFromTo(int,int,int)', 'ByteArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractByteList,int,int)', 'BinarySearch.binarySearchFromTo(byte[],byte,int,int)', 'AbstractByteList.getQuick(int)']
ByteArrayListTest.testReplaceFromToWith(): ['ByteArrayList.add(byte)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractByteList,int,int)', 'ByteArrayList.get(int)']
ByteArrayListTest.testRetainAllSmall(): ['ByteArrayList.get(int)', 'AbstractByteList.retainAll(org.apache.mahout.math.list.AbstractByteList)', 'AbstractByteList.clone()', 'AbstractByteList.indexOfFromTo(byte,int,int)', 'ByteArrayList.add(byte)', 'AbstractByteList.setQuick(int,byte)', 'Arithmetic.log2(double)', 'ByteArrayList.retainAll(org.apache.mahout.math.list.AbstractByteList)', 'ByteArrayList.quickSort()', 'AbstractByteList.size()', 'AbstractByteList.partFromTo(int,int)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'ByteArrayList.setSize(int)', 'ByteArrayList.addAllOf(org.apache.mahout.math.list.ByteArrayList)', 'AbstractByteList.isEmpty()', 'ByteArrayList.binarySearchFromTo(byte,int,int)', 'AbstractByteList.setSize(int)', 'AbstractByteList.checkRangeFromTo(int,int,int)', 'ByteArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractByteList,int,int)', 'BinarySearch.binarySearchFromTo(byte[],byte,int,int)', 'AbstractByteList.getQuick(int)']
ByteArrayListTest.testRetainAllSmaller(): ['ByteArrayList.get(int)', 'AbstractByteList.retainAll(org.apache.mahout.math.list.AbstractByteList)', 'AbstractByteList.clone()', 'AbstractByteList.indexOfFromTo(byte,int,int)', 'ByteArrayList.add(byte)', 'AbstractByteList.setQuick(int,byte)', 'Arithmetic.log2(double)', 'ByteArrayList.retainAll(org.apache.mahout.math.list.AbstractByteList)', 'ByteArrayList.quickSort()', 'AbstractByteList.size()', 'AbstractByteList.partFromTo(int,int)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'ByteArrayList.setSize(int)', 'ByteArrayList.addAllOf(org.apache.mahout.math.list.ByteArrayList)', 'AbstractByteList.isEmpty()', 'ByteArrayList.binarySearchFromTo(byte,int,int)', 'AbstractByteList.setSize(int)', 'AbstractByteList.checkRangeFromTo(int,int,int)', 'ByteArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractByteList,int,int)', 'BinarySearch.binarySearchFromTo(byte[],byte,int,int)', 'AbstractByteList.getQuick(int)']
LongArrayListTest.testGetEmpty(): ['LongArrayList.get(int)']
LongArrayListTest.testAdd(): ['LongArrayList.get(int)', 'Arrays.ensureCapacity(long[],int)', 'LongArrayList.size()', 'LongArrayList.add(long)', 'LongArrayList.ensureCapacity(int)']
LongArrayListTest.testBinarySearch(): ['LongArrayList.binarySearchFromTo(long,int,int)', 'BinarySearch.binarySearchFromTo(long[],long,int,int)']
LongArrayListTest.testClone(): ['LongArrayList.clone()', 'LongArrayList.setSizeRaw(int)', 'LongArrayList.copy()']
LongArrayListTest.testElements(): ['LongArrayList.elements(long[])', 'LongArrayList.size()', 'LongArrayList.elements()']
LongArrayListTest.testEquals(): ['LongArrayList.elements()', 'AbstractLongList.getQuick(int)', 'AbstractLongList.size()', 'AbstractLongList.equals(java.lang.Object)', 'LongArrayList.size()', 'LongArrayList.ensureCapacity(int)', 'LongArrayList.get(int)', 'Arrays.ensureCapacity(long[],int)', 'LongArrayList.add(long)', 'LongArrayList.equals(java.lang.Object)']
LongArrayListTest.testForEach(): ['LongProcedure.apply(long)', 'LongArrayList.forEach(org.apache.mahout.math.function.LongProcedure)']
LongArrayListTest.testGetQuick(): ['LongArrayList.getQuick(int)']
LongArrayListTest.testIndexOfFromTo(): ['LongArrayList.checkRangeFromTo(int,int,int)', 'LongArrayList.indexOfFromTo(long,int,int)']
LongArrayListTest.testLastIndexOfFromTo(): ['Arrays.ensureCapacity(long[],int)', 'LongArrayList.checkRangeFromTo(int,int,int)', 'LongArrayList.lastIndexOf(long)', 'LongArrayList.add(long)', 'LongArrayList.lastIndexOfFromTo(long,int,int)', 'LongArrayList.ensureCapacity(int)']
LongArrayListTest.testPartFromTo(): ['AbstractLongList.get(int)', 'AbstractLongList.getQuick(int)', 'AbstractLongList.size()', 'LongArrayList.partFromTo(int,int)', 'LongArrayList.checkRangeFromTo(int,int,int)']
LongArrayListTest.testPartFromToOOB(): ['LongArrayList.checkRangeFromTo(int,int,int)', 'LongArrayList.partFromTo(int,int)']
LongArrayListTest.testRemoveAll(): ['AbstractLongList.size()', 'AbstractLongList.checkRangeFromTo(int,int,int)', 'AbstractLongList.clone()', 'LongArrayList.get(int)', 'BinarySearch.binarySearchFromTo(long[],long,int,int)', 'LongArrayList.binarySearchFromTo(long,int,int)', 'LongArrayList.size()', 'LongArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractLongList,int,int)', 'AbstractLongList.partFromTo(int,int)', 'Arithmetic.log2(double)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'AbstractLongList.setQuick(int,long)', 'LongArrayList.quickSort()', 'AbstractLongList.getQuick(int)', 'LongArrayList.ensureCapacity(int)', 'AbstractLongList.isEmpty()', 'AbstractLongList.removeAll(org.apache.mahout.math.list.AbstractLongList)', 'AbstractLongList.indexOfFromTo(long,int,int)', 'LongArrayList.setSize(int)', 'LongArrayList.removeAll(org.apache.mahout.math.list.AbstractLongList)', 'AbstractLongList.setSize(int)']
LongArrayListTest.testReplaceFromToWith(): ['LongArrayList.get(int)', 'Arrays.ensureCapacity(long[],int)', 'LongArrayList.add(long)', 'LongArrayList.ensureCapacity(int)', 'LongArrayList.replaceFromToWithFromTo(int,int,org.apache.mahout.math.list.AbstractLongList,int,int)']
LongArrayListTest.testRetainAllSmall(): ['AbstractLongList.size()', 'AbstractLongList.checkRangeFromTo(int,int,int)', 'LongArrayList.retainAll(org.apache.mahout.math.list.AbstractLongList)', 'AbstractLongList.clone()', 'LongArrayList.get(int)', 'BinarySearch.binarySearchFromTo(long[],long,int,int)', 'LongArrayList.binarySearchFromTo(long,int,int)', 'LongArrayList.size()', 'LongArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractLongList,int,int)', 'AbstractLongList.partFromTo(int,int)', 'Arithmetic.log2(double)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'AbstractLongList.setQuick(int,long)', 'LongArrayList.quickSort()', 'AbstractLongList.getQuick(int)', 'LongArrayList.ensureCapacity(int)', 'AbstractLongList.isEmpty()', 'AbstractLongList.retainAll(org.apache.mahout.math.list.AbstractLongList)', 'LongArrayList.addAllOf(org.apache.mahout.math.list.LongArrayList)', 'AbstractLongList.indexOfFromTo(long,int,int)', 'LongArrayList.setSize(int)', 'AbstractLongList.setSize(int)']
LongArrayListTest.testRetainAllSmaller(): ['AbstractLongList.size()', 'AbstractLongList.checkRangeFromTo(int,int,int)', 'LongArrayList.retainAll(org.apache.mahout.math.list.AbstractLongList)', 'AbstractLongList.clone()', 'LongArrayList.get(int)', 'BinarySearch.binarySearchFromTo(long[],long,int,int)', 'LongArrayList.binarySearchFromTo(long,int,int)', 'LongArrayList.size()', 'LongArrayList.addAllOfFromTo(org.apache.mahout.math.list.AbstractLongList,int,int)', 'AbstractLongList.partFromTo(int,int)', 'Arithmetic.log2(double)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'AbstractLongList.setQuick(int,long)', 'LongArrayList.quickSort()', 'AbstractLongList.getQuick(int)', 'LongArrayList.ensureCapacity(int)', 'AbstractLongList.isEmpty()', 'AbstractLongList.retainAll(org.apache.mahout.math.list.AbstractLongList)', 'LongArrayList.addAllOf(org.apache.mahout.math.list.LongArrayList)', 'AbstractLongList.indexOfFromTo(long,int,int)', 'LongArrayList.setSize(int)', 'AbstractLongList.setSize(int)']
TestDenseVector.testSize(): ['Vector.getNumNonZeroElements()']
TestDenseVector.testToString(): []
MatrixVectorViewTest.testColumnView(): ['Vector.cross(org.apache.mahout.math.Vector)', 'Matrix.viewColumn(int)', 'Matrix.numCols()', 'Matrix.numRows()']
MatrixVectorViewTest.testIndexRange(): ['DenseMatrix.assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix.viewColumn(int)', 'Matrix.viewRow(int)', 'Functions.random()']
PermutedVectorViewTest.testViewBasics(): ['Vector.get(int)', 'Vector.set(int,double)']
PermutedVectorViewTest.testIterators(): ['PermutedVectorView.iterator()', 'PermutedVectorView.getNumNondefaultElements()', 'Vector$Element.index()', 'Vector.get(int)', 'Vector.zSum()', 'PermutedVectorView.get(int)', 'Vector$Element.get()', 'Vector.set(int,double)', 'PermutedVectorView.zSum()', 'Vector.getNumNondefaultElements()']
TestLanczosSolver.testEigenvalueCheck(): ['EigenDecomposition.getV()', 'LanczosState.getRightSingularVector(int)', 'LanczosState.setIterationNumber(int)', 'EigenDecomposition.getRealEigenvalues()', 'Vector.size()', 'LanczosState.setBasisVector(int,org.apache.mahout.math.Vector)', 'Vector.normalize()', 'Vector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix.viewColumn(int)', 'LanczosState.getIterationNumber()', 'LanczosState.setScaleFactor(double)', 'Vector.norm(double)', 'VectorIterable.timesSquared(org.apache.mahout.math.Vector)', 'LanczosState.getScaleFactor()', 'LanczosState.getBasisVector(int)', 'Matrix.set(int,int,double)', 'Vector.dot(org.apache.mahout.math.Vector)', 'VectorIterable.numRows()', 'LanczosSolver.outOfRange(double)', 'LanczosSolver.endTime(org.apache.mahout.math.decomposer.lanczos.LanczosSolver$TimingSection)', 'VectorIterable.times(org.apache.mahout.math.Vector)', 'Matrix.like()', 'LanczosSolver.orthoganalizeAgainstAllButLast(org.apache.mahout.math.Vector,org.apache.mahout.math.decomposer.lanczos.LanczosState)', 'Vector.assign(double)', 'LanczosState.getSingularValue(int)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'LanczosSolver.startTime(org.apache.mahout.math.decomposer.lanczos.LanczosSolver$TimingSection)', 'LanczosState.getBasisSize()', 'LanczosState.setSingularValue(int,double)', 'LanczosState.getCorpus()', 'Vector.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Vector.like()', 'Vector.get(int)', 'LanczosSolver.calculateScaleFactor(org.apache.mahout.math.Vector)', 'LanczosState.getDiagonalMatrix()', 'LanczosSolver.solve(org.apache.mahout.math.decomposer.lanczos.LanczosState,int,boolean)', 'LanczosState.setRightSingularVector(int,org.apache.mahout.math.Vector)']
TestLanczosSolver.testLanczosSolver(): ['EigenDecomposition.getV()', 'LanczosState.getRightSingularVector(int)', 'LanczosState.setIterationNumber(int)', 'EigenDecomposition.getRealEigenvalues()', 'Vector.size()', 'LanczosState.setBasisVector(int,org.apache.mahout.math.Vector)', 'Vector.normalize()', 'Vector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix.viewColumn(int)', 'LanczosState.getIterationNumber()', 'LanczosState.setScaleFactor(double)', 'Vector.norm(double)', 'VectorIterable.timesSquared(org.apache.mahout.math.Vector)', 'LanczosState.getScaleFactor()', 'LanczosState.getBasisVector(int)', 'Matrix.set(int,int,double)', 'Vector.dot(org.apache.mahout.math.Vector)', 'VectorIterable.numRows()', 'LanczosSolver.outOfRange(double)', 'LanczosSolver.endTime(org.apache.mahout.math.decomposer.lanczos.LanczosSolver$TimingSection)', 'VectorIterable.times(org.apache.mahout.math.Vector)', 'Matrix.like()', 'LanczosSolver.orthoganalizeAgainstAllButLast(org.apache.mahout.math.Vector,org.apache.mahout.math.decomposer.lanczos.LanczosState)', 'Vector.assign(double)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'LanczosSolver.startTime(org.apache.mahout.math.decomposer.lanczos.LanczosSolver$TimingSection)', 'LanczosState.getBasisSize()', 'LanczosState.setSingularValue(int,double)', 'LanczosState.getCorpus()', 'Vector.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Vector.like()', 'Vector.get(int)', 'LanczosSolver.calculateScaleFactor(org.apache.mahout.math.Vector)', 'LanczosState.getDiagonalMatrix()', 'LanczosSolver.solve(org.apache.mahout.math.decomposer.lanczos.LanczosState,int,boolean)', 'LanczosState.setRightSingularVector(int,org.apache.mahout.math.Vector)']
TestLanczosSolver.testLanczosSolverSymmetric(): ['EigenDecomposition.getV()', 'LanczosState.setIterationNumber(int)', 'EigenDecomposition.getRealEigenvalues()', 'Vector.size()', 'LanczosState.setBasisVector(int,org.apache.mahout.math.Vector)', 'Vector.normalize()', 'Vector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix.viewColumn(int)', 'LanczosState.getIterationNumber()', 'LanczosState.setScaleFactor(double)', 'Vector.norm(double)', 'VectorIterable.timesSquared(org.apache.mahout.math.Vector)', 'LanczosState.getScaleFactor()', 'LanczosState.getBasisVector(int)', 'Matrix.set(int,int,double)', 'Vector.dot(org.apache.mahout.math.Vector)', 'VectorIterable.numRows()', 'LanczosSolver.outOfRange(double)', 'LanczosSolver.endTime(org.apache.mahout.math.decomposer.lanczos.LanczosSolver$TimingSection)', 'VectorIterable.times(org.apache.mahout.math.Vector)', 'Matrix.like()', 'LanczosSolver.orthoganalizeAgainstAllButLast(org.apache.mahout.math.Vector,org.apache.mahout.math.decomposer.lanczos.LanczosState)', 'Vector.assign(double)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'LanczosSolver.startTime(org.apache.mahout.math.decomposer.lanczos.LanczosSolver$TimingSection)', 'LanczosState.getBasisSize()', 'LanczosState.setSingularValue(int,double)', 'LanczosState.getCorpus()', 'Vector.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Vector.like()', 'Vector.get(int)', 'LanczosSolver.calculateScaleFactor(org.apache.mahout.math.Vector)', 'LanczosState.getDiagonalMatrix()', 'LanczosSolver.solve(org.apache.mahout.math.decomposer.lanczos.LanczosState,int,boolean)', 'LanczosState.setRightSingularVector(int,org.apache.mahout.math.Vector)']
TestHebbianSolver.testHebbianSolver(): ['TrainingState.getCurrentEigens()']
MurmurHashTest.testForLotsOfChange64(): ['MurmurHash.hash64A(byte[],int)', 'MurmurHash.hash64A(java.nio.ByteBuffer,int)']
MurmurHashTest.testHash64(): ['MurmurHash.hash64A(byte[],int)', 'MurmurHash.hash64A(java.nio.ByteBuffer,int)']
MurmurHashTest.testForLotsOfChange32(): ['MurmurHash.hash(byte[],int)', 'MurmurHash.hash(java.nio.ByteBuffer,int)']
MurmurHashTest.testChangingSeed(): ['MurmurHash.hash(byte[],int)', 'MurmurHash.hash(java.nio.ByteBuffer,int)']
MurmurHashTest.testChangingKey(): ['MurmurHash.hash(byte[],int)', 'MurmurHash.hash(java.nio.ByteBuffer,int)']
MurmurHashTest.testChangingKeyLength(): ['MurmurHash.hash(byte[],int)', 'MurmurHash.hash(java.nio.ByteBuffer,int)']
DiagonalMatrixTest.testBasics(): ['Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Matrix.assignRow(int,org.apache.mahout.math.Vector)', 'DiagonalMatrix.viewPart(int,int,int,int)', 'Matrix.like()', 'Matrix.numRows()', 'DiagonalMatrix.viewDiagonal()', 'Vector.times(double)', 'DiagonalMatrix.times(org.apache.mahout.math.Matrix)', 'Vector.size()', 'DiagonalMatrix.timesLeft(org.apache.mahout.math.Matrix)', 'Matrix.assignColumn(int,org.apache.mahout.math.Vector)', 'Matrix.plus(org.apache.mahout.math.Matrix)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.viewColumn(int)', 'Vector.minus(org.apache.mahout.math.Vector)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'DiagonalMatrix.transpose()', 'DiagonalMatrix.timesRight(org.apache.mahout.math.Matrix)', 'Vector.getQuick(int)', 'Vector.norm(double)', 'DiagonalMatrix.get(int,int)', 'Matrix.numCols()', 'Matrix.transpose()', 'DiagonalMatrix.plus(org.apache.mahout.math.Matrix)', 'Matrix.viewRow(int)', 'Matrix.viewDiagonal()']
DiagonalMatrixTest.testSparsity(): ['Vector.set(int,double)', 'DiagonalMatrix.viewColumn(int)', 'Vector.get(int)', 'DiagonalMatrix.viewRow(int)', 'Vector.zSum()', 'Vector$Element.index()', 'Vector$Element.get()', 'DiagonalMatrix.get(int,int)', 'Vector.all()', 'Vector.isDense()', 'Vector.nonZeroes()']
AbstractVectorTest.testSimpleOps(): ['Functions.pow(double)', 'Vector.maxValue()', 'Vector.getLengthSquared()', 'Vector.aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Functions.minus(double)', 'Vector.times(double)', 'Vector.assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', 'Vector.size()', 'Vector.minValue()', 'Vector.getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector.divide(double)', 'Vector.normalize()', 'Vector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector.minus(org.apache.mahout.math.Vector)', 'RandomUtils.getRandom()', 'Vector.times(org.apache.mahout.math.Vector)', 'Vector.norm(double)', 'Vector$Element.get()', 'Vector.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Vector.viewPart(int,int)', 'Vector.logNormalize(double)', 'Vector.dot(org.apache.mahout.math.Vector)', 'RandomWrapper.setSeed(long)', 'Vector$Element.index()', 'Vector.logNormalize()', 'Vector.plus(double)', 'Vector.assign(org.apache.mahout.math.Vector)', 'Vector.clone()', 'Vector.assign(double)', 'Vector.normalize(double)', 'Vector.plus(org.apache.mahout.math.Vector)', 'Vector.minValueIndex()', 'Vector.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Vector.get(int)', 'Vector.all()', 'Vector.zSum()', 'Vector.maxValueIndex()', 'Vector.getQuick(int)', 'Functions.plus(double)', 'RandomWrapper.resetToTestSeed()', 'Vector.set(int,double)']
AbstractVectorTest.testCardinality(): ['Vector.size()']
AbstractVectorTest.testIterator(): ['RandomAccessSparseVector.iterator()', 'Vector.all()', 'RandomAccessSparseVector.setQuick(int,double)', 'RandomAccessSparseVector.iterateNonZero()', 'Vector.nonZeroes()', 'RandomAccessSparseVector.invalidateCachedLength()']
AbstractVectorTest.testIteratorSet(): ['Vector.clone()', 'Vector$Element.index()', 'Vector.get(int)', 'Vector.all()', 'Vector$Element.get()', 'Vector$Element.set(double)', 'Vector.nonZeroes()']
AbstractVectorTest.testCopy(): ['Vector.get(int)', 'Vector.size()', 'Vector.clone()']
AbstractVectorTest.testGet(): ['Vector.get(int)', 'Vector.size()']
AbstractVectorTest.testGetOver(): ['Vector.get(int)', 'Vector.size()']
AbstractVectorTest.testGetUnder(): ['Vector.get(int)']
AbstractVectorTest.testSet(): ['Vector.get(int)', 'Vector.set(int,double)', 'Vector.size()']
AbstractVectorTest.testSize(): ['Vector.getNumNondefaultElements()']
AbstractVectorTest.testViewPart(): ['Vector.get(int)', 'Vector.getNumNondefaultElements()', 'Vector.size()', 'Vector.viewPart(int,int)']
AbstractVectorTest.testViewPartUnder(): ['Vector.viewPart(int,int)']
AbstractVectorTest.testViewPartOver(): ['Vector.viewPart(int,int)']
AbstractVectorTest.testViewPartCardinality(): ['Vector.viewPart(int,int)']
AbstractVectorTest.testSparseDoubleVectorInt(): ['Vector.get(int)', 'Vector.size()']
AbstractVectorTest.testDot(): ['Vector.dot(org.apache.mahout.math.Vector)']
AbstractVectorTest.testDot2(): ['Vector.set(int,double)', 'Vector.dot(org.apache.mahout.math.Vector)', 'Vector.clone()']
AbstractVectorTest.testDotCardinality(): ['Vector.dot(org.apache.mahout.math.Vector)', 'Vector.size()']
AbstractVectorTest.testNormalize(): ['Vector.get(int)', 'Vector.size()', 'Vector.normalize()']
AbstractVectorTest.testMinus(): ['Vector.get(int)', 'Vector.plus(double)', 'Vector.size()', 'Vector.minus(org.apache.mahout.math.Vector)']
AbstractVectorTest.testPlusDouble(): ['Vector.get(int)', 'Vector.plus(double)', 'Vector.size()']
AbstractVectorTest.testPlusVector(): ['Vector.plus(org.apache.mahout.math.Vector)', 'Vector.get(int)', 'Vector.size()']
AbstractVectorTest.testPlusVectorCardinality(): ['Vector.plus(org.apache.mahout.math.Vector)', 'Vector.size()']
AbstractVectorTest.testTimesDouble(): ['Vector.get(int)', 'Vector.times(double)', 'Vector.size()']
AbstractVectorTest.testDivideDouble(): ['Vector.get(int)', 'Vector.divide(double)', 'Vector.size()']
AbstractVectorTest.testTimesVector(): ['Vector.get(int)', 'Vector.times(org.apache.mahout.math.Vector)', 'Vector.size()']
AbstractVectorTest.testTimesVectorCardinality(): ['Vector.times(org.apache.mahout.math.Vector)', 'Vector.size()']
AbstractVectorTest.testZSum(): ['Vector.zSum()']
AbstractVectorTest.testGetDistanceSquared(): ['Vector.minus(org.apache.mahout.math.Vector)', 'Vector.getLengthSquared()', 'Vector.size()', 'Vector.set(int,double)', 'Vector.getDistanceSquared(org.apache.mahout.math.Vector)']
AbstractVectorTest.testAssignDouble(): ['Vector.assign(double)', 'Vector.getQuick(int)']
AbstractVectorTest.testAssignDoubleArray(): ['Vector.getQuick(int)', 'Vector.assign(double[])', 'Vector.size()']
AbstractVectorTest.testAssignDoubleArrayCardinality(): ['Vector.assign(double[])', 'Vector.size()']
AbstractVectorTest.testAssignVector(): ['Vector.getQuick(int)', 'Vector.assign(org.apache.mahout.math.Vector)', 'Vector.size()']
AbstractVectorTest.testAssignVectorCardinality(): ['Vector.assign(org.apache.mahout.math.Vector)', 'Vector.size()']
AbstractVectorTest.testAssignUnaryFunction(): ['Vector.getQuick(int)', 'Vector.assign(org.apache.mahout.math.function.DoubleFunction)']
AbstractVectorTest.testAssignBinaryFunction(): ['Vector.get(int)', 'Vector.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Vector.getQuick(int)']
AbstractVectorTest.testAssignBinaryFunction2(): ['Vector.get(int)', 'Vector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector.getQuick(int)', 'Functions.plus(double)']
AbstractVectorTest.testAssignBinaryFunction3(): ['Vector.get(int)', 'Vector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector.getQuick(int)', 'Functions.mult(double)']
AbstractVectorTest.testLike(): ['Vector.size()', 'Vector.like()']
AbstractVectorTest.testCrossProduct(): ['Matrix.getQuick(int,int)', 'Matrix.rowSize()', 'Vector.getQuick(int)', 'Vector.cross(org.apache.mahout.math.Vector)', 'Matrix.columnSize()', 'Vector.size()']
AbstractVectorTest.testIterators(): ['Vector.all()', 'Vector.zSum()', 'Vector$Element.get()', 'Vector.size()', 'Vector.nonZeroes()']
AbstractVectorTest.testSmallDistances(): ['Vector.plus(org.apache.mahout.math.Vector)', 'MultiNormal.sample()', 'DenseVector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector.getDistanceSquared(org.apache.mahout.math.Vector)', 'Matrix.times(org.apache.mahout.math.Vector)']
AbstractVectorTest.testToString(): ['Vector.set(int,double)']
MultinomialTest.testSingleton(): ['Multinomial.sample(double)', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)']
MultinomialTest.testEvenSplit(): ['Multinomial.sample(double)', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)']
MultinomialTest.testPrime(): ['Multinomial.sample(double)', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)']
MultinomialTest.testInsert(): ['Multinomial.getWeight(java.lang.Object)', 'RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'Multinomial.add(java.lang.Object,double)', 'DoubleArrayList.add(double)', 'RandomWrapper.resetToTestSeed()', 'DoubleArrayList.set(int,double)']
MultinomialTest.testSetZeroWhileIterating(): ['Multinomial.iterator()', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)', 'Multinomial.set(java.lang.Object,double)', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'Multinomial.add(java.lang.Object,double)', 'DoubleArrayList.add(double)', 'DoubleArrayList.set(int,double)']
MultinomialTest.testNoNullValuesAllowed(): ['DoubleArrayList.size()', 'DoubleArrayList.get(int)', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'Multinomial.add(java.lang.Object,double)', 'DoubleArrayList.add(double)', 'DoubleArrayList.set(int,double)']
MultinomialTest.testDeleteAndUpdate(): ['Multinomial.getWeight(java.lang.Object)', 'RandomWrapper.setSeed(long)', 'DoubleArrayList.get(int)', 'Multinomial.getWeight()', 'Multinomial.add(java.lang.Object,double)', 'DoubleArrayList.add(double)', 'Multinomial.delete(java.lang.Object)', 'Multinomial.getProbability(java.lang.Object)', 'RandomUtils.getRandom()', 'DoubleArrayList.size()', 'Multinomial.set(java.lang.Object,double)', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'RandomWrapper.resetToTestSeed()', 'DoubleArrayList.set(int,double)']
EmpiricalTest.testSimpleDist(): ['Empirical.sample(double)', 'RandomWrapper.setSeed(long)', 'Empirical.sample()', 'RandomWrapper.resetToTestSeed()', 'RandomUtils.useTestSeed()']
EmpiricalTest.testZeros(): ['Empirical.sample(double)']
NormalTest.testOffset(): ['OnlineSummarizer.getMean()', 'OnlineSummarizer.add(double)', 'OnlineSummarizer.getSD()', 'Sampler.sample()']
NormalTest.testSample(): ['Sampler.sample()', 'RandomWrapper.setSeed(long)', 'RandomWrapper.getRandomGenerator()', 'RandomUtils.getRandom()', 'RandomWrapper.resetToTestSeed()']
IndianBuffetTest.testBasicText(): ['IndianBuffet.sample()', 'IndianBuffet$WordFunction.convert(int)', 'IndianBuffet.createTextDocumentSampler(double)', 'RandomWrapper.setSeed(long)', 'DoubleArrayList.get(int)', 'Multinomial.sample(double)', 'RandomWrapper.nextDouble()', 'PoissonSampler.sample()', 'DoubleArrayList.size()', 'RandomUtils.useTestSeed()', 'RandomWrapper.resetToTestSeed()', 'PoissonSampler.sample(double)']
PoissonSamplerTest.testBasics(): []
ChineseRestaurantTest.testDepth(): ['ChineseRestaurant.sample()', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'DoubleArrayList.add(double)', 'DoubleArrayList.set(int,double)']
ChineseRestaurantTest.testExtremeDiscount(): ['ChineseRestaurant.count(int)', 'ChineseRestaurant.sample()', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'DoubleArrayList.add(double)', 'ChineseRestaurant.size()', 'DoubleArrayList.set(int,double)']
ChineseRestaurantTest.testGrowth(): ['DoubleArrayList.set(int,double)', 'ChineseRestaurant.sample()', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'DoubleArrayList.add(double)', 'Matrix.viewPart(int,int,int,int)', 'Matrix.viewRow(int)', 'ChineseRestaurant.size()', 'Vector.assign(double[])']
MultiNormalTest.testDiagonal(): ['Vector.plus(org.apache.mahout.math.Vector)', 'DenseVector.get(int)', 'MultiNormal.sample()', 'OnlineSummarizer.getMean()', 'DenseVector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector.get(int)', 'OnlineSummarizer.add(double)', 'Matrix.times(org.apache.mahout.math.Vector)', 'OnlineSummarizer.getSD()']
MultiNormalTest.testRadius(): ['Vector.plus(org.apache.mahout.math.Vector)', 'MultiNormal.sample()', 'OnlineSummarizer.getMean()', 'DenseVector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector.norm(double)', 'OnlineSummarizer.add(double)', 'Matrix.times(org.apache.mahout.math.Vector)']
TestMatrixView.testCardinality(): ['Matrix.columnSize()', 'Matrix.rowSize()']
TestMatrixView.testCopy(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.clone()']
TestMatrixView.testGetQuick(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()']
TestMatrixView.testLike(): ['Matrix.like()', 'Matrix.columnSize()', 'Matrix.rowSize()']
TestMatrixView.testLikeIntInt(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.like(int,int)']
TestMatrixView.testSetQuick(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.setQuick(int,int,double)']
TestMatrixView.testSize(): ['Matrix.columnSize()', 'Matrix.rowSize()']
TestMatrixView.testViewPart(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.viewPart(int[],int[])']
TestMatrixView.testViewPartCardinality(): ['Matrix.viewPart(int[],int[])']
TestMatrixView.testViewPartIndexOver(): ['Matrix.viewPart(int[],int[])']
TestMatrixView.testViewPartIndexUnder(): ['Matrix.viewPart(int[],int[])']
TestMatrixView.testAssignDouble(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.assign(double)']
TestMatrixView.testAssignDoubleArrayArray(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.assign(double[][])']
TestMatrixView.testAssignDoubleArrayArrayCardinality(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.assign(double[][])']
TestMatrixView.testAssignMatrixBinaryFunction(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Matrix.rowSize()']
TestMatrixView.testAssignMatrixBinaryFunctionCardinality(): ['Matrix.assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Matrix.transpose()']
TestMatrixView.testAssignMatrix(): ['Matrix.getQuick(int,int)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.rowSize()', 'Matrix.like()', 'Matrix.columnSize()']
TestMatrixView.testAssignMatrixCardinality(): ['Matrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.transpose()']
TestMatrixView.testAssignUnaryFunction(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.assign(org.apache.mahout.math.function.DoubleFunction)']
TestMatrixView.testDivide(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.divide(double)']
TestMatrixView.testGet(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.get(int,int)']
TestMatrixView.testGetIndexUnder(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.get(int,int)']
TestMatrixView.testGetIndexOver(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.get(int,int)']
TestMatrixView.testMinus(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Matrix.rowSize()']
TestMatrixView.testMinusCardinality(): ['Matrix.minus(org.apache.mahout.math.Matrix)', 'Matrix.transpose()']
TestMatrixView.testPlusDouble(): ['Matrix.getQuick(int,int)', 'Matrix.plus(double)', 'Matrix.rowSize()', 'Matrix.columnSize()']
TestMatrixView.testPlusMatrix(): ['Matrix.plus(org.apache.mahout.math.Matrix)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.getQuick(int,int)']
TestMatrixView.testPlusMatrixCardinality(): ['Matrix.plus(org.apache.mahout.math.Matrix)', 'Matrix.transpose()']
TestMatrixView.testSetUnder(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.set(int,int,double)']
TestMatrixView.testSetOver(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.set(int,int,double)']
TestMatrixView.testTimesDouble(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.times(double)']
TestMatrixView.testTimesMatrix(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.transpose()', 'Matrix.times(org.apache.mahout.math.Matrix)']
TestMatrixView.testTimesMatrixCardinality(): ['Matrix.like(int,int)', 'Matrix.times(org.apache.mahout.math.Matrix)']
TestMatrixView.testTranspose(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.transpose()']
TestMatrixView.testZSum(): ['Matrix.zSum()']
TestMatrixView.testAssignRow(): ['Matrix.getQuick(int,int)', 'Matrix.assignRow(int,org.apache.mahout.math.Vector)']
TestMatrixView.testAssignRowCardinality(): ['Matrix.assignRow(int,org.apache.mahout.math.Vector)']
TestMatrixView.testAssignColumn(): ['Matrix.getQuick(int,int)', 'Matrix.assignColumn(int,org.apache.mahout.math.Vector)']
TestMatrixView.testAssignColumnCardinality(): ['Matrix.assignColumn(int,org.apache.mahout.math.Vector)']
TestMatrixView.testViewRow(): ['Vector.getNumNondefaultElements()', 'Matrix.viewRow(int)']
TestMatrixView.testViewRowIndexUnder(): ['Matrix.viewRow(int)']
TestMatrixView.testViewRowIndexOver(): ['Matrix.viewRow(int)']
TestMatrixView.testViewColumn(): ['Vector.get(int)', 'Matrix.viewColumn(int)', 'Vector.getNumNondefaultElements()']
TestMatrixView.testViewColumnIndexUnder(): ['Matrix.viewColumn(int)']
TestMatrixView.testViewColumnIndexOver(): ['Matrix.viewColumn(int)']
TestMatrixView.testLabelBindings(): ['Matrix.set(java.lang.String,double[])', 'Matrix.get(int,int)', 'Matrix.getRowLabelBindings()', 'Matrix.get(java.lang.String,java.lang.String)', 'Matrix.getColumnLabelBindings()', 'Matrix.setColumnLabelBindings(java.util.Map)', 'Matrix.setRowLabelBindings(java.util.Map)']
TestMatrixView.testSettingLabelBindings(): ['Matrix.set(java.lang.String,java.lang.String,int,int,double)', 'Matrix.get(int,int)', 'Matrix.getRowLabelBindings()', 'Matrix.getColumnLabelBindings()', 'Matrix.get(java.lang.String,java.lang.String)']
TestMatrixView.testLabelBindingSerialization(): ['Matrix.setRowLabelBindings(java.util.Map)', 'Matrix.getRowLabelBindings()', 'Matrix.setColumnLabelBindings(java.util.Map)', 'Matrix.getColumnLabelBindings()']
LogLikelihoodTest.testEntropy(): ['LogLikelihood.xLogX(long)', 'LogLikelihood.entropy(long[])']
LogLikelihoodTest.testLogLikelihood(): ['LogLikelihood.entropy(long,long)', 'LogLikelihood.entropy(long,long,long,long)', 'LogLikelihood.logLikelihoodRatio(long,long,long,long)', 'LogLikelihood.xLogX(long)']
LogLikelihoodTest.testRootLogLikelihood(): ['LogLikelihood.entropy(long,long)', 'LogLikelihood.rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihood.entropy(long,long,long,long)', 'LogLikelihood.logLikelihoodRatio(long,long,long,long)', 'LogLikelihood.xLogX(long)']
LogLikelihoodTest.testRootNegativeLLR(): ['LogLikelihood.entropy(long,long)', 'LogLikelihood.rootLogLikelihoodRatio(long,long,long,long)', 'LogLikelihood.entropy(long,long,long,long)', 'LogLikelihood.logLikelihoodRatio(long,long,long,long)', 'LogLikelihood.xLogX(long)']
LogLikelihoodTest.testFrequencyComparison(): ['LogLikelihood.entropy(long,long)', 'LogLikelihood.rootLogLikelihoodRatio(long,long,long,long)', 'RandomWrapper.setSeed(long)', 'LogLikelihood$ScoredItem.getItem()', 'Functions.mult(double)', 'LogLikelihood.logLikelihoodRatio(long,long,long,long)', 'Vector.assign(org.apache.mahout.math.Vector)', 'Vector.assign(double)', 'Functions.div(double)', 'LogLikelihood.xLogX(long)', 'Vector.assign(org.apache.mahout.math.function.DoubleFunction)', 'LogLikelihood$ScoredItem.getScore()', 'RandomUtils.getRandom()', 'DenseVector.assign(org.apache.mahout.math.function.DoubleFunction)', 'LogLikelihood.entropy(long,long,long,long)', 'Vector.like()', 'Vector.norm(double)', 'Vector.viewPart(int,int)', 'RandomWrapper.resetToTestSeed()', 'LogLikelihood.compareFrequencies(com.google.common.collect.Multiset,com.google.common.collect.Multiset,int,double)', 'LogLikelihood.compareAndAdd(com.google.common.collect.Multiset,com.google.common.collect.Multiset,int,double,int,int,java.util.Queue,java.lang.Object)']
OnlineExponentialAverageTest.testAverage(): ['OnlineExponentialAverage.add(double,double)', 'OnlineExponentialAverage.mean()']
OnlineExponentialAverageTest.testRate(): ['RandomWrapper.setSeed(long)', 'Poisson.f(int,double,double)', 'RandomUtils.getRandom()', 'OnlineExponentialAverage.add(double,double)', 'Arithmetic.logFactorial(int)', 'Poisson.nextInt(double)', 'OnlineExponentialAverage.meanRate()', 'Poisson.getRandomGenerator()', 'RandomWrapper.resetToTestSeed()']
OnlineSummarizerTest.testStats(): []
TestRandomAccessSparseVector.testToString(): ['Vector.get(int)', 'Vector.set(int,double)']
SequentialBigSvdTest.testSingularValues(): ['Matrix.get(int,int)', 'PivotedMatrix.get(int,int)', 'Matrix.columnSize()', 'SequentialBigSvd.getV()', 'CholeskyDecomposition.solveRight(org.apache.mahout.math.Matrix)', 'DenseVector.viewPart(int,int)', 'SequentialBigSvd.getU()', 'PivotedMatrix.rowUnpivot(int)', 'SequentialBigSvd.getSingularValues()', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.rowSize()', 'Matrix.times(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition.getV()', 'DenseVector.size()', 'Matrix.transpose()', 'Matrix.set(int,int,double)', 'SingularValueDecomposition.getSingularValues()', 'SingularValueDecomposition.getU()']
SequentialBigSvdTest.testLeftVectors(): ['Matrix.get(int,int)', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'PivotedMatrix.get(int,int)', 'Matrix.columnSize()', 'CholeskyDecomposition.solveRight(org.apache.mahout.math.Matrix)', 'PivotedMatrix.rowUnpivot(int)', 'SequentialBigSvd.getU()', 'Matrix.assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.rowSize()', 'Matrix.times(org.apache.mahout.math.Matrix)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Matrix.viewPart(int,int,int,int)', 'Matrix.set(int,int,double)', 'SingularValueDecomposition.getU()']
SequentialBigSvdTest.testRightVectors(): ['Matrix.get(int,int)', 'PivotedMatrix.get(int,int)', 'Matrix.columnSize()', 'SequentialBigSvd.getV()', 'CholeskyDecomposition.solveRight(org.apache.mahout.math.Matrix)', 'PivotedMatrix.rowUnpivot(int)', 'Matrix.assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.rowSize()', 'Matrix.times(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition.getV()', 'Matrix.viewPart(int,int,int,int)', 'Matrix.transpose()', 'Matrix.set(int,int,double)']
UpperTriangularTest.testBasics(): ['Matrix.get(int,int)', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Vector.minus(org.apache.mahout.math.Vector)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'DenseMatrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Vector.norm(double)', 'Matrix.viewPart(int,int,int,int)', 'Matrix.transpose()', 'Matrix.plus(org.apache.mahout.math.Matrix)', 'Matrix.viewDiagonal()']
DenseSymmetricTest.testBasics(): ['Matrix.get(int,int)', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Vector.minus(org.apache.mahout.math.Vector)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'DenseMatrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Vector.norm(double)', 'Matrix.viewPart(int,int,int,int)', 'Matrix.transpose()', 'Matrix.plus(org.apache.mahout.math.Matrix)', 'Matrix.viewDiagonal()']
DenseSymmetricTest.testEigen(): ['Matrix.assign(org.apache.mahout.math.Matrix)', 'EigenDecomposition.getV()', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Vector.minus(org.apache.mahout.math.Vector)', 'Matrix.like()', 'Matrix.numRows()', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'EigenDecomposition.getRealEigenvalues()', 'Matrix.numCols()', 'Vector.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)']
PivotedMatrixTest.testSwap(): ['PivotedMatrix.swap(int,int)', 'PivotedMatrix.swapRows(int,int)', 'PivotedMatrix.columnSize()', 'Matrix.viewColumn(int)', 'PivotedMatrix.viewColumn(int)', 'PivotedMatrix.swap(int[],int[],int,int)', 'Vector.minus(org.apache.mahout.math.Vector)', 'PivotedMatrix.viewDiagonal()', 'Vector.norm(double)', 'PivotedMatrix.swapColumns(int,int)', 'Matrix.set(int,int,double)']
VectorBinaryAggregateTest.testSelf(): ['Vector.like()', 'Vector.assign(org.apache.mahout.math.Vector)', 'Vector.size()', 'DoubleDoubleFunction.apply(double,double)', 'VectorBinaryAggregate.aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Vector.setQuick(int,double)']
VectorBinaryAggregateTest.testSeparate(): ['Vector.like()', 'Vector.size()', 'DoubleDoubleFunction.apply(double,double)', 'VectorBinaryAggregate.aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Vector.setQuick(int,double)']
TestSparseRowMatrix.testTimesSparseEfficiency(): ['Matrix.viewColumn(int)', 'Matrix.get(int,int)', 'RandomWrapper.setSeed(long)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'RandomUtils.getRandom()', 'Gamma.nextDouble()', 'Gamma.nextDouble(double,double)', 'Gamma.randomDouble()', 'RandomWrapper.resetToTestSeed()', 'Matrix.set(int,int,double)', 'Vector.dot(org.apache.mahout.math.Vector)', 'Matrix.viewRow(int)']
TestSparseRowMatrix.testTimesDenseEfficiency(): ['Matrix.viewColumn(int)', 'Matrix.get(int,int)', 'RandomWrapper.setSeed(long)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'RandomUtils.getRandom()', 'Gamma.nextDouble()', 'Gamma.nextDouble(double,double)', 'Gamma.randomDouble()', 'RandomWrapper.resetToTestSeed()', 'Matrix.set(int,int,double)', 'Vector.dot(org.apache.mahout.math.Vector)', 'Matrix.viewRow(int)']
TestSparseRowMatrix.testTimesOtherSparseEfficiency(): ['Matrix.get(int,int)', 'RandomWrapper.setSeed(long)', 'Gamma.nextDouble()', 'MatrixSlice.index()', 'Vector$Element.index()', 'Gamma.nextDouble(double,double)', 'Gamma.randomDouble()', 'Functions.random()', 'Matrix.iterator()', 'RandomUtils.getRandom()', 'Matrix.times(org.apache.mahout.math.Matrix)', 'DenseVector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector.get(int)', 'Vector$Element.get()', 'MatrixSlice.nonZeroes()', 'RandomWrapper.resetToTestSeed()', 'Matrix.set(int,int,double)']
TestSparseRowMatrix.testTimesCorrect(): ['SparseRowMatrix.assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'RandomWrapper.setSeed(long)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'RandomUtils.getRandom()', 'DenseMatrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Functions.random()', 'RandomWrapper.resetToTestSeed()']
TestSingularValueDecomposition.testMoreRows(): ['RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'RandomWrapper.resetToTestSeed()', 'SingularValueDecomposition.getSingularValues()']
TestSingularValueDecomposition.testMoreColumns(): ['RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'RandomWrapper.resetToTestSeed()', 'SingularValueDecomposition.getSingularValues()']
TestSingularValueDecomposition.testDimensions(): ['Matrix.numRows()', 'SingularValueDecomposition.getV()', 'SingularValueDecomposition.getS()', 'Matrix.numCols()', 'Matrix.set(int,int,double)', 'SingularValueDecomposition.getU()']
TestSingularValueDecomposition.testHadamard(): ['Algebra.getNorm(org.apache.mahout.math.Matrix)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Matrix.numRows()', 'Vector.getQuick(int)', 'Matrix.transpose()', 'Vector.size()', 'Matrix.set(int,int,double)', 'SingularValueDecomposition.getCovariance(double)', 'SingularValueDecomposition.getSingularValues()', 'Matrix.viewRow(int)']
TestSingularValueDecomposition.testAEqualUSVt(): ['DenseMatrix.transpose()']
TestSingularValueDecomposition.testUOrthogonal(): ['Matrix.set(int,int,double)', 'DenseMatrix.transpose()', 'SingularValueDecomposition.getU()']
TestSingularValueDecomposition.testVOrthogonal(): ['Matrix.set(int,int,double)', 'DenseMatrix.transpose()', 'SingularValueDecomposition.getV()']
TestSingularValueDecomposition.testMatricesValues1(): ['Algebra.getNorm(org.apache.mahout.math.Matrix)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Matrix.numRows()', 'SingularValueDecomposition.getV()', 'SingularValueDecomposition.getS()', 'Vector.getQuick(int)', 'Vector.size()', 'Matrix.set(int,int,double)', 'SingularValueDecomposition.getU()', 'Matrix.viewRow(int)']
TestSingularValueDecomposition.testConditionNumber(): ['SingularValueDecomposition.cond()']
TestSingularValueDecomposition.testSvdHang(): ['Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'SingularValueDecomposition.getV()', 'SingularValueDecomposition.getS()', 'Matrix.transpose()', 'Matrix.set(int,int,double)', 'SingularValueDecomposition.getU()']
VectorTest.testSparseVector(): []
VectorTest.testSparseVectorFullIteration(): ['Vector.get(int)', 'Vector.set(int,double)', 'Vector.all()', 'SequentialAccessSparseVector.iterator()']
VectorTest.testSparseVectorSparseIteration(): ['Vector.get(int)', 'Vector.set(int,double)', 'Vector.nonZeroes()']
VectorTest.testEquivalent(): ['RandomAccessSparseVector.equals(java.lang.Object)', 'RandomAccessSparseVector.setQuick(int,double)', 'Vector.setQuick(int,double)', 'RandomAccessSparseVector.invalidateCachedLength()']
VectorTest.testGetDistanceSquared(): []
VectorTest.testAddTo(): ['Vector.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Vector.setQuick(int,double)']
VectorTest.testGetLengthSquared(): []
VectorTest.testIterator(): ['Vector.set(int,double)']
VectorTest.testNormalize(): ['Vector.divide(double)', 'Vector.setQuick(int,double)', 'Vector.normalize(double)', 'Vector.normalize()']
VectorTest.testLogNormalize(): ['Vector.logNormalize()', 'Vector.setQuick(int,double)', 'Vector.logNormalize(double)']
VectorTest.testMax(): ['Vector.maxValueIndex()', 'Vector.setQuick(int,double)', 'Vector.maxValue()']
VectorTest.testMin(): ['Vector.minValue()', 'Vector.maxValueIndex()', 'Vector.setQuick(int,double)', 'Vector.maxValue()']
VectorTest.testDenseVector(): []
VectorTest.testVectorView(): []
VectorTest.testEnumeration(): ['Vector.set(int,double)']
VectorTest.testAggregation(): []
VectorTest.testEmptyAggregate1(): ['DenseVector.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)']
VectorTest.testEmptyAggregate2(): ['DenseVector.aggregate(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleDoubleFunction)']
VectorTest.testHashCodeEquivalence(): ['Vector.setQuick(int,double)', 'DenseVector.hashCode()']
VectorTest.testHashCode(): ['Vector.setQuick(int,double)']
VectorTest.testIteratorRasv(): []
VectorTest.testIteratorSasv(): []
VectorTest.testIteratorDense(): []
VectorTest.testIterator(org.apache.mahout.math.Vector): ['Vector.like()']
VectorTest.testSkips(org.apache.mahout.math.Vector): ['Vector$Element.index()', 'Vector.get(int)', 'Vector.all()', 'Vector$Element.get()', 'Vector.set(int,double)', 'Vector.nonZeroes()']
VectorTest.testSkipsLast(org.apache.mahout.math.Vector): ['Vector.all()', 'Vector.set(int,double)', 'Vector$Element.index()', 'Vector.nonZeroes()']
VectorTest.testEmptyNonZeroIterator(org.apache.mahout.math.Vector): ['Vector.nonZeroes()']
VectorTest.testEmptyAllIterator(org.apache.mahout.math.Vector): ['Vector.all()', 'Vector.nonZeroes()']
VectorTest.testNumNonZerosDense(): ['DenseVector.invalidateCachedLength()', 'DenseVector.assign(double)', 'DenseVector.getNumNonZeroElements()', 'DenseVector.setQuick(int,double)', 'DenseVector.set(int,double)']
VectorTest.testNumNonZerosRandomAccessSparse(): ['RandomAccessSparseVector.set(int,double)', 'RandomAccessSparseVector.setQuick(int,double)', 'RandomAccessSparseVector.getNumNonZeroElements()', 'RandomAccessSparseVector.invalidateCachedLength()']
VectorTest.testNumNonZerosSequentialAccessSparse(): ['OrderedIntDoubleMapping.getValues()', 'SequentialAccessSparseVector.invalidateCachedLength()', 'OrderedIntDoubleMapping.insertValueIfNotDefault(int,int,double)', 'SequentialAccessSparseVector.set(int,double)', 'OrderedIntDoubleMapping.growTo(int)', 'SequentialAccessSparseVector.setQuick(int,double)', 'OrderedIntDoubleMapping.getNumMappings()', 'OrderedIntDoubleMapping.set(int,double)', 'OrderedIntDoubleMapping.insertOrUpdateValueIfPresent(int,double)', 'OrderedIntDoubleMapping.find(int)', 'SequentialAccessSparseVector.getNumNonZeroElements()']
VectorTest.testSingleNonZeroIterator(org.apache.mahout.math.Vector): ['Vector.set(int,double)', 'Vector.nonZeroes()']
VectorTest.testExample1NonZeroIterator(org.apache.mahout.math.Vector): ['Vector$Element.index()', 'Vector$Element.get()', 'Vector.getNumNonZeroElements()', 'Vector$Element.set(double)', 'Vector.set(int,double)', 'Vector.nonZeroes()']
MatrixTest.testCardinality(): ['Matrix.columnSize()', 'Matrix.rowSize()']
MatrixTest.testCopy(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.clone()']
MatrixTest.testClone(): ['Matrix.set(int,int,double)', 'Matrix.get(int,int)', 'Matrix.clone()']
MatrixTest.testIterate(): ['MatrixSlice.vector()', 'Matrix.viewColumn(int)', 'MatrixSlice.index()', 'MatrixSlice.getVector()', 'Matrix.iterator()', 'Matrix.viewRow(int)']
MatrixTest.testGetQuick(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()']
MatrixTest.testLike(): ['Matrix.like()', 'Matrix.columnSize()', 'Matrix.rowSize()']
MatrixTest.testLikeIntInt(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.like(int,int)']
MatrixTest.testSetQuick(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.setQuick(int,int,double)']
MatrixTest.testSize(): ['Matrix.getNumNondefaultElements()']
MatrixTest.testViewPart(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.viewPart(int[],int[])', 'Matrix.get(int,int)']
MatrixTest.testViewPartCardinality(): ['Matrix.viewPart(int[],int[])']
MatrixTest.testViewPartIndexOver(): ['Matrix.viewPart(int[],int[])']
MatrixTest.testViewPartIndexUnder(): ['Matrix.viewPart(int[],int[])']
MatrixTest.testAssignDouble(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.assign(double)']
MatrixTest.testAssignDoubleArrayArray(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.assign(double[][])']
MatrixTest.testAssignDoubleArrayArrayCardinality(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.assign(double[][])']
MatrixTest.testMatrixViewBug(): ['Matrix.viewPart(int,int,int,int)', 'Matrix.zSum()']
MatrixTest.testAssignMatrixBinaryFunction(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Matrix.rowSize()']
MatrixTest.testAssignMatrixBinaryFunctionCardinality(): ['Matrix.assign(org.apache.mahout.math.Matrix,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Matrix.transpose()']
MatrixTest.testAssignMatrix(): ['Matrix.getQuick(int,int)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.rowSize()', 'Matrix.like()', 'Matrix.columnSize()']
MatrixTest.testAssignMatrixCardinality(): ['Matrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.transpose()']
MatrixTest.testAssignUnaryFunction(): ['Matrix.getQuick(int,int)', 'Matrix.rowSize()', 'Functions.mult(double)', 'Matrix.columnSize()', 'Matrix.assign(org.apache.mahout.math.function.DoubleFunction)']
MatrixTest.testRowView(): ['Matrix.rowSize()', 'Matrix.get(int,int)', 'RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'Vector.get(int)', 'Matrix.columnSize()', 'Vector.size()', 'Matrix.set(int,int,double)', 'RandomWrapper.resetToTestSeed()', 'Vector.set(int,double)', 'Matrix.viewRow(int)']
MatrixTest.testColumnView(): ['Matrix.rowSize()', 'Matrix.viewColumn(int)', 'Matrix.get(int,int)', 'RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'Vector.get(int)', 'Matrix.columnSize()', 'Vector.size()', 'Matrix.set(int,int,double)', 'RandomWrapper.resetToTestSeed()', 'Vector.set(int,double)']
MatrixTest.testAggregateRows(): ['Matrix.numRows()', 'Vector.get(int)', 'Vector.zSum()', 'Matrix.aggregateRows(org.apache.mahout.math.function.VectorFunction)', 'Matrix.viewRow(int)']
MatrixTest.testAggregateCols(): ['Matrix.viewColumn(int)', 'Matrix.aggregateColumns(org.apache.mahout.math.function.VectorFunction)', 'Vector.get(int)', 'Vector.zSum()', 'Matrix.numCols()']
MatrixTest.testAggregate(): ['Vector.zSum()', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Matrix.aggregateRows(org.apache.mahout.math.function.VectorFunction)']
MatrixTest.testDivide(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.divide(double)']
MatrixTest.testGet(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.get(int,int)']
MatrixTest.testGetIndexUnder(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.get(int,int)']
MatrixTest.testGetIndexOver(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.get(int,int)']
MatrixTest.testMinus(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Matrix.rowSize()']
MatrixTest.testMinusCardinality(): ['Matrix.minus(org.apache.mahout.math.Matrix)', 'Matrix.transpose()']
MatrixTest.testPlusDouble(): ['Matrix.getQuick(int,int)', 'Matrix.plus(double)', 'Matrix.rowSize()', 'Matrix.columnSize()']
MatrixTest.testPlusMatrix(): ['Matrix.plus(org.apache.mahout.math.Matrix)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.getQuick(int,int)']
MatrixTest.testPlusMatrixCardinality(): ['Matrix.plus(org.apache.mahout.math.Matrix)', 'Matrix.transpose()']
MatrixTest.testSetUnder(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.set(int,int,double)']
MatrixTest.testSetOver(): ['Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.set(int,int,double)']
MatrixTest.testTimesDouble(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.times(double)']
MatrixTest.testTimesMatrix(): ['Matrix.rowSize()', 'Matrix.get(int,int)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'Matrix.numRows()', 'DenseMatrix.times(double)', 'Matrix.columnSize()', 'Matrix.numCols()', 'Matrix.transpose()']
MatrixTest.testTimesVector(): ['Vector.norm(double)', 'Matrix.times(org.apache.mahout.math.Vector)', 'Vector.minus(org.apache.mahout.math.Vector)']
MatrixTest.testTimesSquaredTimesVector(): ['Vector.minus(org.apache.mahout.math.Vector)', 'Matrix.timesSquared(org.apache.mahout.math.Vector)', 'Vector.norm(double)', 'Matrix.transpose()', 'Matrix.times(org.apache.mahout.math.Vector)']
MatrixTest.testTimesMatrixCardinality(): ['Matrix.like(int,int)', 'Matrix.times(org.apache.mahout.math.Matrix)']
MatrixTest.testTranspose(): ['Matrix.getQuick(int,int)', 'Matrix.columnSize()', 'Matrix.rowSize()', 'Matrix.transpose()']
MatrixTest.testZSum(): ['Matrix.zSum()']
MatrixTest.testAssignRow(): ['Matrix.getQuick(int,int)', 'Matrix.assignRow(int,org.apache.mahout.math.Vector)']
MatrixTest.testAssignRowCardinality(): ['Matrix.assignRow(int,org.apache.mahout.math.Vector)']
MatrixTest.testAssignColumn(): ['Matrix.getQuick(int,int)', 'Matrix.assignColumn(int,org.apache.mahout.math.Vector)']
MatrixTest.testAssignColumnCardinality(): ['Matrix.assignColumn(int,org.apache.mahout.math.Vector)']
MatrixTest.testViewRow(): ['Matrix.getQuick(int,int)', 'Vector.getQuick(int)', 'Vector.assign(double)', 'Vector.getNumNondefaultElements()', 'Matrix.viewRow(int)']
MatrixTest.testViewRowIndexUnder(): ['Matrix.viewRow(int)']
MatrixTest.testViewRowIndexOver(): ['Matrix.viewRow(int)']
MatrixTest.testViewColumn(): ['Matrix.viewColumn(int)', 'Vector.getNumNondefaultElements()']
MatrixTest.testViewColumnIndexUnder(): ['Matrix.viewColumn(int)']
MatrixTest.testViewColumnIndexOver(): ['Matrix.viewColumn(int)']
MatrixTest.testDeterminant(): ['Matrix.determinant()']
MatrixTest.testLabelBindings(): ['Matrix.set(java.lang.String,double[])', 'Matrix.get(int,int)', 'Matrix.getRowLabelBindings()', 'Matrix.get(java.lang.String,java.lang.String)', 'Matrix.getColumnLabelBindings()', 'Matrix.setColumnLabelBindings(java.util.Map)', 'Matrix.setRowLabelBindings(java.util.Map)']
MatrixTest.testSettingLabelBindings(): ['Matrix.set(java.lang.String,java.lang.String,int,int,double)', 'Matrix.get(int,int)', 'Matrix.getRowLabelBindings()', 'Matrix.getColumnLabelBindings()', 'Matrix.get(java.lang.String,java.lang.String)']
MatrixTest.testLabelBindingSerialization(): ['Matrix.setRowLabelBindings(java.util.Map)', 'Matrix.getRowLabelBindings()', 'Matrix.setColumnLabelBindings(java.util.Map)', 'Matrix.getColumnLabelBindings()']
OpenByteHashSetTest.testConstructors(): ['OpenByteHashSet.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenByteHashSetTest.testEnsureCapacity(): ['OpenByteHashSet.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenByteHashSet.getInternalFactors(int[],double[],double[])', 'OpenByteHashSet.chooseLowWaterMark(int,double)', 'OpenByteHashSet.nextPrime(int)', 'OpenByteHashSet.chooseHighWaterMark(int,double)', 'OpenByteHashSet.indexOfInsertion(byte)', 'OpenByteHashSet.rehash(int)', 'HashFunctions.hash(short)']
OpenByteHashSetTest.testClear(): ['OpenByteHashSet.add(byte)', 'OpenByteHashSet.trimToSize()', 'OpenByteHashSet.nextPrime(int)', 'OpenByteHashSet.chooseHighWaterMark(int,double)', 'OpenByteHashSet.chooseGrowCapacity(int,double,double)', 'OpenByteHashSet.rehash(int)', 'OpenByteHashSet.size()', 'OpenByteHashSet.clear()', 'OpenByteHashSet.chooseLowWaterMark(int,double)', 'OpenByteHashSet.indexOfInsertion(byte)', 'HashFunctions.hash(short)']
OpenByteHashSetTest.testClone(): ['OpenByteHashSet.add(byte)', 'OpenByteHashSet.trimToSize()', 'OpenByteHashSet.nextPrime(int)', 'OpenByteHashSet.chooseHighWaterMark(int,double)', 'OpenByteHashSet.chooseGrowCapacity(int,double,double)', 'OpenByteHashSet.clone()', 'OpenByteHashSet.rehash(int)', 'OpenByteHashSet.size()', 'OpenByteHashSet.clear()', 'OpenByteHashSet.chooseLowWaterMark(int,double)', 'OpenByteHashSet.indexOfInsertion(byte)', 'AbstractByteSet.clone()', 'HashFunctions.hash(short)']
OpenByteHashSetTest.testContains(): ['OpenByteHashSet.indexOfKey(byte)', 'OpenByteHashSet.add(byte)', 'OpenByteHashSet.contains(byte)', 'OpenByteHashSet.chooseLowWaterMark(int,double)', 'OpenByteHashSet.chooseHighWaterMark(int,double)', 'OpenByteHashSet.chooseGrowCapacity(int,double,double)', 'OpenByteHashSet.indexOfInsertion(byte)', 'OpenByteHashSet.rehash(int)', 'HashFunctions.hash(short)']
OpenByteHashSetTest.testForEachKey(): ['OpenByteHashSet.indexOfKey(byte)', 'OpenByteHashSet.add(byte)', 'OpenByteHashSet.chooseHighWaterMark(int,double)', 'OpenByteHashSet.chooseGrowCapacity(int,double,double)', 'ByteArrayList.size()', 'OpenByteHashSet.rehash(int)', 'OpenByteHashSet.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.toArray(byte[])', 'OpenByteHashSet.remove(byte)', 'OpenByteHashSet.chooseLowWaterMark(int,double)', 'OpenByteHashSet.forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'OpenByteHashSet.indexOfInsertion(byte)', 'ByteProcedure.apply(byte)', 'HashFunctions.hash(short)']
OpenByteHashSetTest.testKeys(): ['OpenByteHashSet.add(byte)', 'ByteArrayList.get(int)', 'OpenByteHashSet.chooseHighWaterMark(int,double)', 'OpenByteHashSet.chooseGrowCapacity(int,double,double)', 'OpenByteHashSet.keys(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.elements()', 'OpenByteHashSet.rehash(int)', 'ByteArrayList.setSize(int)', 'OpenByteHashSet.chooseLowWaterMark(int,double)', 'ByteArrayList.sort()', 'OpenByteHashSet.indexOfInsertion(byte)', 'OpenByteHashSet.keys()', 'HashFunctions.hash(short)']
OpenByteHashSetTest.testCopy(): ['OpenByteHashSet.add(byte)', 'OpenByteHashSet.trimToSize()', 'OpenByteHashSet.nextPrime(int)', 'OpenByteHashSet.chooseHighWaterMark(int,double)', 'OpenByteHashSet.chooseGrowCapacity(int,double,double)', 'OpenByteHashSet.rehash(int)', 'OpenByteHashSet.size()', 'OpenByteHashSet.clear()', 'OpenByteHashSet.chooseLowWaterMark(int,double)', 'OpenByteHashSet.copy()', 'OpenByteHashSet.indexOfInsertion(byte)', 'HashFunctions.hash(short)']
OpenByteHashSetTest.testEquals(): ['OpenByteHashSet.indexOfKey(byte)', 'OpenByteHashSet.add(byte)', 'OpenByteHashSet.chooseHighWaterMark(int,double)', 'OpenByteHashSet.chooseGrowCapacity(int,double,double)', 'OpenByteHashSet.hashCode()', 'OpenByteHashSet.rehash(int)', 'OpenByteHashSet.chooseShrinkCapacity(int,double,double)', 'OpenByteHashSet.remove(byte)', 'OpenByteHashSet.chooseLowWaterMark(int,double)', 'OpenByteHashSet.copy()', 'OpenByteHashSet.indexOfInsertion(byte)', 'OpenByteHashSet.equals(java.lang.Object)', 'HashFunctions.hash(short)']
OpenIntHashSetTest.testConstructors(): ['OpenIntHashSet.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenIntHashSetTest.testEnsureCapacity(): ['OpenIntHashSet.rehash(int)', 'OpenIntHashSet.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)', 'OpenIntHashSet.ensureCapacity(int)', 'OpenIntHashSet.nextPrime(int)', 'OpenIntHashSet.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntHashSet.chooseHighWaterMark(int,double)', 'OpenIntHashSet.chooseLowWaterMark(int,double)']
OpenIntHashSetTest.testClear(): ['OpenIntHashSet.rehash(int)', 'OpenIntHashSet.nextPrime(int)', 'OpenIntHashSet.size()', 'OpenIntHashSet.chooseLowWaterMark(int,double)', 'OpenIntHashSet.clear()', 'OpenIntHashSet.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntHashSet.trimToSize()', 'OpenIntHashSet.chooseGrowCapacity(int,double,double)', 'OpenIntHashSet.chooseHighWaterMark(int,double)', 'OpenIntHashSet.add(int)']
OpenIntHashSetTest.testClone(): ['OpenIntHashSet.rehash(int)', 'OpenIntHashSet.nextPrime(int)', 'OpenIntHashSet.size()', 'OpenIntHashSet.chooseLowWaterMark(int,double)', 'OpenIntHashSet.clone()', 'OpenIntHashSet.clear()', 'OpenIntHashSet.indexOfInsertion(int)', 'AbstractIntSet.clone()', 'HashFunctions.hash(int)', 'OpenIntHashSet.trimToSize()', 'OpenIntHashSet.chooseGrowCapacity(int,double,double)', 'OpenIntHashSet.chooseHighWaterMark(int,double)', 'OpenIntHashSet.add(int)']
OpenIntHashSetTest.testContains(): ['OpenIntHashSet.rehash(int)', 'OpenIntHashSet.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntHashSet.chooseGrowCapacity(int,double,double)', 'OpenIntHashSet.contains(int)', 'OpenIntHashSet.chooseHighWaterMark(int,double)', 'OpenIntHashSet.add(int)', 'OpenIntHashSet.indexOfKey(int)', 'OpenIntHashSet.chooseLowWaterMark(int,double)']
OpenIntHashSetTest.testForEachKey(): ['OpenIntHashSet.rehash(int)', 'IntArrayList.toArray(int[])', 'OpenIntHashSet.indexOfKey(int)', 'IntArrayList.size()', 'IntProcedure.apply(int)', 'OpenIntHashSet.chooseLowWaterMark(int,double)', 'OpenIntHashSet.remove(int)', 'OpenIntHashSet.chooseShrinkCapacity(int,double,double)', 'OpenIntHashSet.indexOfInsertion(int)', 'OpenIntHashSet.forEachKey(org.apache.mahout.math.function.IntProcedure)', 'HashFunctions.hash(int)', 'OpenIntHashSet.chooseGrowCapacity(int,double,double)', 'OpenIntHashSet.chooseHighWaterMark(int,double)', 'OpenIntHashSet.add(int)']
OpenIntHashSetTest.testKeys(): ['OpenIntHashSet.rehash(int)', 'IntArrayList.sort()', 'IntArrayList.elements()', 'OpenIntHashSet.keys()', 'IntArrayList.setSize(int)', 'OpenIntHashSet.chooseLowWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenIntHashSet.indexOfInsertion(int)', 'OpenIntHashSet.keys(org.apache.mahout.math.list.IntArrayList)', 'HashFunctions.hash(int)', 'OpenIntHashSet.chooseGrowCapacity(int,double,double)', 'OpenIntHashSet.chooseHighWaterMark(int,double)', 'OpenIntHashSet.add(int)']
OpenIntHashSetTest.testCopy(): ['OpenIntHashSet.rehash(int)', 'OpenIntHashSet.nextPrime(int)', 'OpenIntHashSet.size()', 'OpenIntHashSet.chooseLowWaterMark(int,double)', 'OpenIntHashSet.clear()', 'OpenIntHashSet.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntHashSet.copy()', 'OpenIntHashSet.trimToSize()', 'OpenIntHashSet.chooseGrowCapacity(int,double,double)', 'OpenIntHashSet.chooseHighWaterMark(int,double)', 'OpenIntHashSet.add(int)']
OpenIntHashSetTest.testEquals(): ['OpenIntHashSet.rehash(int)', 'OpenIntHashSet.hashCode()', 'OpenIntHashSet.equals(java.lang.Object)', 'OpenIntHashSet.indexOfKey(int)', 'OpenIntHashSet.chooseLowWaterMark(int,double)', 'OpenIntHashSet.remove(int)', 'OpenIntHashSet.chooseShrinkCapacity(int,double,double)', 'OpenIntHashSet.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntHashSet.copy()', 'OpenIntHashSet.chooseGrowCapacity(int,double,double)', 'OpenIntHashSet.chooseHighWaterMark(int,double)', 'OpenIntHashSet.add(int)']
OpenShortHashSetTest.testConstructors(): ['OpenShortHashSet.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenShortHashSetTest.testEnsureCapacity(): ['PrimeFinder.nextPrime(int)', 'OpenShortHashSet.ensureCapacity(int)', 'OpenShortHashSet.getInternalFactors(int[],double[],double[])', 'OpenShortHashSet.rehash(int)', 'OpenShortHashSet.indexOfInsertion(short)', 'OpenShortHashSet.chooseHighWaterMark(int,double)', 'OpenShortHashSet.nextPrime(int)', 'OpenShortHashSet.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortHashSetTest.testClear(): ['OpenShortHashSet.size()', 'OpenShortHashSet.chooseGrowCapacity(int,double,double)', 'OpenShortHashSet.rehash(int)', 'OpenShortHashSet.add(short)', 'OpenShortHashSet.chooseLowWaterMark(int,double)', 'OpenShortHashSet.trimToSize()', 'OpenShortHashSet.indexOfInsertion(short)', 'OpenShortHashSet.chooseHighWaterMark(int,double)', 'OpenShortHashSet.nextPrime(int)', 'OpenShortHashSet.clear()', 'HashFunctions.hash(short)']
OpenShortHashSetTest.testClone(): ['OpenShortHashSet.size()', 'OpenShortHashSet.chooseGrowCapacity(int,double,double)', 'OpenShortHashSet.rehash(int)', 'OpenShortHashSet.add(short)', 'OpenShortHashSet.chooseLowWaterMark(int,double)', 'AbstractShortSet.clone()', 'OpenShortHashSet.clone()', 'OpenShortHashSet.trimToSize()', 'OpenShortHashSet.indexOfInsertion(short)', 'OpenShortHashSet.chooseHighWaterMark(int,double)', 'OpenShortHashSet.nextPrime(int)', 'OpenShortHashSet.clear()', 'HashFunctions.hash(short)']
OpenShortHashSetTest.testContains(): ['OpenShortHashSet.chooseGrowCapacity(int,double,double)', 'OpenShortHashSet.contains(short)', 'OpenShortHashSet.rehash(int)', 'OpenShortHashSet.add(short)', 'OpenShortHashSet.indexOfInsertion(short)', 'OpenShortHashSet.indexOfKey(short)', 'OpenShortHashSet.chooseHighWaterMark(int,double)', 'OpenShortHashSet.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortHashSetTest.testForEachKey(): ['ShortArrayList.size()', 'ShortArrayList.toArray(short[])', 'OpenShortHashSet.chooseGrowCapacity(int,double,double)', 'OpenShortHashSet.rehash(int)', 'OpenShortHashSet.add(short)', 'OpenShortHashSet.remove(short)', 'OpenShortHashSet.indexOfKey(short)', 'OpenShortHashSet.chooseLowWaterMark(int,double)', 'ShortProcedure.apply(short)', 'OpenShortHashSet.chooseShrinkCapacity(int,double,double)', 'OpenShortHashSet.forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'OpenShortHashSet.indexOfInsertion(short)', 'OpenShortHashSet.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortHashSetTest.testKeys(): ['OpenShortHashSet.chooseGrowCapacity(int,double,double)', 'OpenShortHashSet.rehash(int)', 'ShortArrayList.elements()', 'OpenShortHashSet.add(short)', 'OpenShortHashSet.chooseLowWaterMark(int,double)', 'ShortArrayList.sort()', 'ShortArrayList.setSize(int)', 'ShortArrayList.get(int)', 'OpenShortHashSet.indexOfInsertion(short)', 'OpenShortHashSet.chooseHighWaterMark(int,double)', 'OpenShortHashSet.keys()', 'OpenShortHashSet.keys(org.apache.mahout.math.list.ShortArrayList)', 'HashFunctions.hash(short)']
OpenShortHashSetTest.testCopy(): ['OpenShortHashSet.size()', 'OpenShortHashSet.copy()', 'OpenShortHashSet.chooseGrowCapacity(int,double,double)', 'OpenShortHashSet.rehash(int)', 'OpenShortHashSet.add(short)', 'OpenShortHashSet.chooseLowWaterMark(int,double)', 'OpenShortHashSet.trimToSize()', 'OpenShortHashSet.indexOfInsertion(short)', 'OpenShortHashSet.chooseHighWaterMark(int,double)', 'OpenShortHashSet.nextPrime(int)', 'OpenShortHashSet.clear()', 'HashFunctions.hash(short)']
OpenShortHashSetTest.testEquals(): ['OpenShortHashSet.copy()', 'OpenShortHashSet.chooseGrowCapacity(int,double,double)', 'OpenShortHashSet.rehash(int)', 'OpenShortHashSet.equals(java.lang.Object)', 'OpenShortHashSet.add(short)', 'OpenShortHashSet.remove(short)', 'OpenShortHashSet.indexOfKey(short)', 'OpenShortHashSet.chooseLowWaterMark(int,double)', 'OpenShortHashSet.chooseShrinkCapacity(int,double,double)', 'OpenShortHashSet.hashCode()', 'OpenShortHashSet.indexOfInsertion(short)', 'OpenShortHashSet.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenCharHashSetTest.testConstructors(): ['OpenCharHashSet.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenCharHashSetTest.testEnsureCapacity(): ['OpenCharHashSet.ensureCapacity(int)', 'OpenCharHashSet.nextPrime(int)', 'PrimeFinder.nextPrime(int)', 'OpenCharHashSet.chooseLowWaterMark(int,double)', 'OpenCharHashSet.indexOfInsertion(char)', 'OpenCharHashSet.chooseHighWaterMark(int,double)', 'OpenCharHashSet.rehash(int)', 'OpenCharHashSet.getInternalFactors(int[],double[],double[])', 'HashFunctions.hash(char)']
OpenCharHashSetTest.testClear(): ['OpenCharHashSet.clear()', 'OpenCharHashSet.trimToSize()', 'OpenCharHashSet.indexOfInsertion(char)', 'OpenCharHashSet.size()', 'OpenCharHashSet.chooseGrowCapacity(int,double,double)', 'OpenCharHashSet.nextPrime(int)', 'OpenCharHashSet.add(char)', 'OpenCharHashSet.chooseLowWaterMark(int,double)', 'OpenCharHashSet.chooseHighWaterMark(int,double)', 'OpenCharHashSet.rehash(int)', 'HashFunctions.hash(char)']
OpenCharHashSetTest.testClone(): ['OpenCharHashSet.clone()', 'OpenCharHashSet.clear()', 'OpenCharHashSet.trimToSize()', 'OpenCharHashSet.indexOfInsertion(char)', 'OpenCharHashSet.size()', 'OpenCharHashSet.chooseGrowCapacity(int,double,double)', 'AbstractCharSet.clone()', 'OpenCharHashSet.nextPrime(int)', 'OpenCharHashSet.add(char)', 'OpenCharHashSet.chooseLowWaterMark(int,double)', 'OpenCharHashSet.chooseHighWaterMark(int,double)', 'OpenCharHashSet.rehash(int)', 'HashFunctions.hash(char)']
OpenCharHashSetTest.testContains(): ['OpenCharHashSet.add(char)', 'OpenCharHashSet.chooseHighWaterMark(int,double)', 'OpenCharHashSet.indexOfInsertion(char)', 'OpenCharHashSet.chooseLowWaterMark(int,double)', 'OpenCharHashSet.contains(char)', 'OpenCharHashSet.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharHashSet.chooseGrowCapacity(int,double,double)', 'OpenCharHashSet.indexOfKey(char)']
OpenCharHashSetTest.testForEachKey(): ['CharArrayList.toArray(char[])', 'OpenCharHashSet.chooseShrinkCapacity(int,double,double)', 'OpenCharHashSet.remove(char)', 'OpenCharHashSet.indexOfInsertion(char)', 'CharProcedure.apply(char)', 'CharArrayList.size()', 'OpenCharHashSet.chooseGrowCapacity(int,double,double)', 'OpenCharHashSet.indexOfKey(char)', 'OpenCharHashSet.add(char)', 'OpenCharHashSet.chooseLowWaterMark(int,double)', 'OpenCharHashSet.chooseHighWaterMark(int,double)', 'OpenCharHashSet.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharHashSet.forEachKey(org.apache.mahout.math.function.CharProcedure)']
OpenCharHashSetTest.testKeys(): ['OpenCharHashSet.keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList.elements()', 'OpenCharHashSet.indexOfInsertion(char)', 'OpenCharHashSet.chooseGrowCapacity(int,double,double)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenCharHashSet.keys()', 'CharArrayList.get(int)', 'OpenCharHashSet.add(char)', 'OpenCharHashSet.chooseLowWaterMark(int,double)', 'OpenCharHashSet.chooseHighWaterMark(int,double)', 'OpenCharHashSet.rehash(int)', 'HashFunctions.hash(char)']
OpenCharHashSetTest.testCopy(): ['OpenCharHashSet.clear()', 'OpenCharHashSet.trimToSize()', 'OpenCharHashSet.indexOfInsertion(char)', 'OpenCharHashSet.size()', 'OpenCharHashSet.chooseGrowCapacity(int,double,double)', 'OpenCharHashSet.nextPrime(int)', 'OpenCharHashSet.copy()', 'OpenCharHashSet.add(char)', 'OpenCharHashSet.chooseLowWaterMark(int,double)', 'OpenCharHashSet.chooseHighWaterMark(int,double)', 'OpenCharHashSet.rehash(int)', 'HashFunctions.hash(char)']
OpenCharHashSetTest.testEquals(): ['OpenCharHashSet.chooseShrinkCapacity(int,double,double)', 'OpenCharHashSet.hashCode()', 'OpenCharHashSet.remove(char)', 'OpenCharHashSet.indexOfInsertion(char)', 'OpenCharHashSet.chooseGrowCapacity(int,double,double)', 'OpenCharHashSet.indexOfKey(char)', 'OpenCharHashSet.copy()', 'OpenCharHashSet.add(char)', 'OpenCharHashSet.chooseLowWaterMark(int,double)', 'OpenCharHashSet.chooseHighWaterMark(int,double)', 'OpenCharHashSet.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharHashSet.equals(java.lang.Object)']
HashUtilsTest.testHashFloat(): ['RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'RandomWrapper.resetToTestSeed()']
HashUtilsTest.testHashDouble(): ['RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'RandomWrapper.resetToTestSeed()']
HashUtilsTest.testHashLong(): ['RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'RandomWrapper.resetToTestSeed()']
OpenLongHashSetTest.testConstructors(): ['OpenLongHashSet.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenLongHashSetTest.testEnsureCapacity(): ['OpenLongHashSet.chooseHighWaterMark(int,double)', 'OpenLongHashSet.nextPrime(int)', 'OpenLongHashSet.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)', 'HashFunctions.hash(long)', 'OpenLongHashSet.ensureCapacity(int)', 'OpenLongHashSet.chooseLowWaterMark(int,double)', 'OpenLongHashSet.indexOfInsertion(long)', 'OpenLongHashSet.rehash(int)']
OpenLongHashSetTest.testClear(): ['OpenLongHashSet.chooseHighWaterMark(int,double)', 'OpenLongHashSet.clear()', 'OpenLongHashSet.chooseGrowCapacity(int,double,double)', 'OpenLongHashSet.indexOfInsertion(long)', 'OpenLongHashSet.nextPrime(int)', 'OpenLongHashSet.add(long)', 'OpenLongHashSet.trimToSize()', 'HashFunctions.hash(long)', 'OpenLongHashSet.size()', 'OpenLongHashSet.chooseLowWaterMark(int,double)', 'OpenLongHashSet.rehash(int)']
OpenLongHashSetTest.testClone(): ['OpenLongHashSet.chooseHighWaterMark(int,double)', 'OpenLongHashSet.clone()', 'OpenLongHashSet.clear()', 'OpenLongHashSet.chooseGrowCapacity(int,double,double)', 'OpenLongHashSet.indexOfInsertion(long)', 'OpenLongHashSet.nextPrime(int)', 'AbstractLongSet.clone()', 'OpenLongHashSet.add(long)', 'OpenLongHashSet.trimToSize()', 'HashFunctions.hash(long)', 'OpenLongHashSet.size()', 'OpenLongHashSet.chooseLowWaterMark(int,double)', 'OpenLongHashSet.rehash(int)']
OpenLongHashSetTest.testContains(): ['OpenLongHashSet.indexOfInsertion(long)', 'OpenLongHashSet.chooseHighWaterMark(int,double)', 'OpenLongHashSet.add(long)', 'HashFunctions.hash(long)', 'OpenLongHashSet.chooseLowWaterMark(int,double)', 'OpenLongHashSet.contains(long)', 'OpenLongHashSet.indexOfKey(long)', 'OpenLongHashSet.chooseGrowCapacity(int,double,double)', 'OpenLongHashSet.rehash(int)']
OpenLongHashSetTest.testForEachKey(): ['OpenLongHashSet.chooseHighWaterMark(int,double)', 'LongArrayList.toArray(long[])', 'OpenLongHashSet.forEachKey(org.apache.mahout.math.function.LongProcedure)', 'OpenLongHashSet.remove(long)', 'OpenLongHashSet.chooseGrowCapacity(int,double,double)', 'OpenLongHashSet.indexOfInsertion(long)', 'OpenLongHashSet.chooseShrinkCapacity(int,double,double)', 'LongProcedure.apply(long)', 'LongArrayList.size()', 'OpenLongHashSet.add(long)', 'HashFunctions.hash(long)', 'OpenLongHashSet.chooseLowWaterMark(int,double)', 'OpenLongHashSet.indexOfKey(long)', 'OpenLongHashSet.rehash(int)']
OpenLongHashSetTest.testKeys(): ['LongArrayList.elements()', 'OpenLongHashSet.chooseHighWaterMark(int,double)', 'LongArrayList.get(int)', 'OpenLongHashSet.keys(org.apache.mahout.math.list.LongArrayList)', 'OpenLongHashSet.chooseGrowCapacity(int,double,double)', 'OpenLongHashSet.indexOfInsertion(long)', 'LongArrayList.sort()', 'OpenLongHashSet.add(long)', 'OpenLongHashSet.keys()', 'HashFunctions.hash(long)', 'OpenLongHashSet.chooseLowWaterMark(int,double)', 'LongArrayList.setSize(int)', 'OpenLongHashSet.rehash(int)']
OpenLongHashSetTest.testCopy(): ['OpenLongHashSet.chooseHighWaterMark(int,double)', 'OpenLongHashSet.clear()', 'OpenLongHashSet.chooseGrowCapacity(int,double,double)', 'OpenLongHashSet.indexOfInsertion(long)', 'OpenLongHashSet.copy()', 'OpenLongHashSet.nextPrime(int)', 'OpenLongHashSet.add(long)', 'OpenLongHashSet.trimToSize()', 'HashFunctions.hash(long)', 'OpenLongHashSet.size()', 'OpenLongHashSet.chooseLowWaterMark(int,double)', 'OpenLongHashSet.rehash(int)']
OpenLongHashSetTest.testEquals(): ['OpenLongHashSet.equals(java.lang.Object)', 'OpenLongHashSet.chooseHighWaterMark(int,double)', 'OpenLongHashSet.hashCode()', 'OpenLongHashSet.remove(long)', 'OpenLongHashSet.chooseGrowCapacity(int,double,double)', 'OpenLongHashSet.indexOfInsertion(long)', 'OpenLongHashSet.chooseShrinkCapacity(int,double,double)', 'OpenLongHashSet.copy()', 'OpenLongHashSet.add(long)', 'HashFunctions.hash(long)', 'OpenLongHashSet.chooseLowWaterMark(int,double)', 'OpenLongHashSet.indexOfKey(long)', 'OpenLongHashSet.rehash(int)']
OpenDoubleHashSetTest.testConstructors(): ['OpenDoubleHashSet.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenDoubleHashSetTest.testEnsureCapacity(): ['OpenDoubleHashSet.indexOfInsertion(double)', 'HashFunctions.hash(double)', 'OpenDoubleHashSet.nextPrime(int)', 'PrimeFinder.nextPrime(int)', 'OpenDoubleHashSet.ensureCapacity(int)', 'OpenDoubleHashSet.chooseHighWaterMark(int,double)', 'OpenDoubleHashSet.chooseLowWaterMark(int,double)', 'OpenDoubleHashSet.getInternalFactors(int[],double[],double[])', 'OpenDoubleHashSet.rehash(int)']
OpenDoubleHashSetTest.testClear(): ['OpenDoubleHashSet.indexOfInsertion(double)', 'HashFunctions.hash(double)', 'OpenDoubleHashSet.nextPrime(int)', 'OpenDoubleHashSet.size()', 'OpenDoubleHashSet.chooseHighWaterMark(int,double)', 'OpenDoubleHashSet.trimToSize()', 'OpenDoubleHashSet.chooseGrowCapacity(int,double,double)', 'OpenDoubleHashSet.add(double)', 'OpenDoubleHashSet.chooseLowWaterMark(int,double)', 'OpenDoubleHashSet.clear()', 'OpenDoubleHashSet.rehash(int)']
OpenDoubleHashSetTest.testClone(): ['OpenDoubleHashSet.indexOfInsertion(double)', 'HashFunctions.hash(double)', 'OpenDoubleHashSet.nextPrime(int)', 'OpenDoubleHashSet.clone()', 'OpenDoubleHashSet.size()', 'OpenDoubleHashSet.chooseHighWaterMark(int,double)', 'OpenDoubleHashSet.trimToSize()', 'AbstractDoubleSet.clone()', 'OpenDoubleHashSet.chooseGrowCapacity(int,double,double)', 'OpenDoubleHashSet.add(double)', 'OpenDoubleHashSet.chooseLowWaterMark(int,double)', 'OpenDoubleHashSet.clear()', 'OpenDoubleHashSet.rehash(int)']
OpenDoubleHashSetTest.testContains(): ['OpenDoubleHashSet.indexOfInsertion(double)', 'HashFunctions.hash(double)', 'OpenDoubleHashSet.chooseHighWaterMark(int,double)', 'OpenDoubleHashSet.rehash(int)', 'OpenDoubleHashSet.contains(double)', 'OpenDoubleHashSet.add(double)', 'OpenDoubleHashSet.chooseLowWaterMark(int,double)', 'OpenDoubleHashSet.chooseGrowCapacity(int,double,double)', 'OpenDoubleHashSet.indexOfKey(double)']
OpenDoubleHashSetTest.testForEachKey(): ['OpenDoubleHashSet.indexOfInsertion(double)', 'DoubleArrayList.toArray(double[])', 'OpenDoubleHashSet.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleHashSet.rehash(int)', 'OpenDoubleHashSet.chooseHighWaterMark(int,double)', 'OpenDoubleHashSet.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.size()', 'DoubleProcedure.apply(double)', 'OpenDoubleHashSet.add(double)', 'OpenDoubleHashSet.forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'OpenDoubleHashSet.chooseLowWaterMark(int,double)', 'OpenDoubleHashSet.indexOfKey(double)', 'OpenDoubleHashSet.remove(double)']
OpenDoubleHashSetTest.testKeys(): ['OpenDoubleHashSet.indexOfInsertion(double)', 'HashFunctions.hash(double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenDoubleHashSet.chooseHighWaterMark(int,double)', 'OpenDoubleHashSet.keys(org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleHashSet.chooseGrowCapacity(int,double,double)', 'OpenDoubleHashSet.keys()', 'DoubleArrayList.setSize(int)', 'OpenDoubleHashSet.add(double)', 'OpenDoubleHashSet.chooseLowWaterMark(int,double)', 'OpenDoubleHashSet.rehash(int)']
OpenDoubleHashSetTest.testCopy(): ['OpenDoubleHashSet.indexOfInsertion(double)', 'HashFunctions.hash(double)', 'OpenDoubleHashSet.nextPrime(int)', 'OpenDoubleHashSet.size()', 'OpenDoubleHashSet.chooseHighWaterMark(int,double)', 'OpenDoubleHashSet.trimToSize()', 'OpenDoubleHashSet.chooseGrowCapacity(int,double,double)', 'OpenDoubleHashSet.copy()', 'OpenDoubleHashSet.add(double)', 'OpenDoubleHashSet.chooseLowWaterMark(int,double)', 'OpenDoubleHashSet.clear()', 'OpenDoubleHashSet.rehash(int)']
OpenDoubleHashSetTest.testEquals(): ['OpenDoubleHashSet.indexOfInsertion(double)', 'OpenDoubleHashSet.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleHashSet.hashCode()', 'OpenDoubleHashSet.rehash(int)', 'OpenDoubleHashSet.chooseHighWaterMark(int,double)', 'OpenDoubleHashSet.chooseGrowCapacity(int,double,double)', 'OpenDoubleHashSet.equals(java.lang.Object)', 'OpenDoubleHashSet.copy()', 'OpenDoubleHashSet.add(double)', 'OpenDoubleHashSet.chooseLowWaterMark(int,double)', 'OpenDoubleHashSet.indexOfKey(double)', 'OpenDoubleHashSet.remove(double)']
OpenFloatHashSetTest.testConstructors(): ['OpenFloatHashSet.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenFloatHashSetTest.testEnsureCapacity(): ['OpenFloatHashSet.chooseHighWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenFloatHashSet.nextPrime(int)', 'OpenFloatHashSet.indexOfInsertion(float)', 'OpenFloatHashSet.rehash(int)', 'OpenFloatHashSet.ensureCapacity(int)', 'HashFunctions.hash(float)', 'OpenFloatHashSet.getInternalFactors(int[],double[],double[])', 'OpenFloatHashSet.chooseLowWaterMark(int,double)']
OpenFloatHashSetTest.testClear(): ['OpenFloatHashSet.chooseGrowCapacity(int,double,double)', 'OpenFloatHashSet.add(float)', 'OpenFloatHashSet.chooseHighWaterMark(int,double)', 'OpenFloatHashSet.nextPrime(int)', 'OpenFloatHashSet.indexOfInsertion(float)', 'OpenFloatHashSet.rehash(int)', 'OpenFloatHashSet.size()', 'OpenFloatHashSet.clear()', 'OpenFloatHashSet.trimToSize()', 'HashFunctions.hash(float)', 'OpenFloatHashSet.chooseLowWaterMark(int,double)']
OpenFloatHashSetTest.testClone(): ['OpenFloatHashSet.chooseGrowCapacity(int,double,double)', 'OpenFloatHashSet.add(float)', 'AbstractFloatSet.clone()', 'OpenFloatHashSet.chooseHighWaterMark(int,double)', 'OpenFloatHashSet.nextPrime(int)', 'OpenFloatHashSet.clone()', 'OpenFloatHashSet.indexOfInsertion(float)', 'OpenFloatHashSet.rehash(int)', 'OpenFloatHashSet.size()', 'OpenFloatHashSet.clear()', 'OpenFloatHashSet.trimToSize()', 'HashFunctions.hash(float)', 'OpenFloatHashSet.chooseLowWaterMark(int,double)']
OpenFloatHashSetTest.testContains(): ['OpenFloatHashSet.chooseGrowCapacity(int,double,double)', 'OpenFloatHashSet.chooseHighWaterMark(int,double)', 'OpenFloatHashSet.indexOfKey(float)', 'OpenFloatHashSet.add(float)', 'OpenFloatHashSet.indexOfInsertion(float)', 'OpenFloatHashSet.contains(float)', 'OpenFloatHashSet.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatHashSet.chooseLowWaterMark(int,double)']
OpenFloatHashSetTest.testForEachKey(): ['OpenFloatHashSet.chooseGrowCapacity(int,double,double)', 'OpenFloatHashSet.forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'OpenFloatHashSet.indexOfKey(float)', 'OpenFloatHashSet.add(float)', 'FloatArrayList.size()', 'OpenFloatHashSet.chooseShrinkCapacity(int,double,double)', 'FloatProcedure.apply(float)', 'OpenFloatHashSet.remove(float)', 'OpenFloatHashSet.chooseHighWaterMark(int,double)', 'OpenFloatHashSet.indexOfInsertion(float)', 'OpenFloatHashSet.rehash(int)', 'FloatArrayList.toArray(float[])', 'HashFunctions.hash(float)', 'OpenFloatHashSet.chooseLowWaterMark(int,double)']
OpenFloatHashSetTest.testKeys(): ['OpenFloatHashSet.chooseGrowCapacity(int,double,double)', 'OpenFloatHashSet.keys()', 'OpenFloatHashSet.add(float)', 'FloatArrayList.setSize(int)', 'FloatArrayList.elements()', 'OpenFloatHashSet.chooseHighWaterMark(int,double)', 'OpenFloatHashSet.indexOfInsertion(float)', 'FloatArrayList.get(int)', 'FloatArrayList.sort()', 'OpenFloatHashSet.rehash(int)', 'OpenFloatHashSet.keys(org.apache.mahout.math.list.FloatArrayList)', 'HashFunctions.hash(float)', 'OpenFloatHashSet.chooseLowWaterMark(int,double)']
OpenFloatHashSetTest.testCopy(): ['OpenFloatHashSet.chooseGrowCapacity(int,double,double)', 'OpenFloatHashSet.add(float)', 'OpenFloatHashSet.copy()', 'OpenFloatHashSet.chooseHighWaterMark(int,double)', 'OpenFloatHashSet.nextPrime(int)', 'OpenFloatHashSet.indexOfInsertion(float)', 'OpenFloatHashSet.rehash(int)', 'OpenFloatHashSet.size()', 'OpenFloatHashSet.clear()', 'OpenFloatHashSet.trimToSize()', 'HashFunctions.hash(float)', 'OpenFloatHashSet.chooseLowWaterMark(int,double)']
OpenFloatHashSetTest.testEquals(): ['OpenFloatHashSet.chooseGrowCapacity(int,double,double)', 'OpenFloatHashSet.indexOfKey(float)', 'OpenFloatHashSet.hashCode()', 'OpenFloatHashSet.add(float)', 'OpenFloatHashSet.copy()', 'OpenFloatHashSet.chooseShrinkCapacity(int,double,double)', 'OpenFloatHashSet.equals(java.lang.Object)', 'OpenFloatHashSet.remove(float)', 'OpenFloatHashSet.chooseHighWaterMark(int,double)', 'OpenFloatHashSet.indexOfInsertion(float)', 'OpenFloatHashSet.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatHashSet.chooseLowWaterMark(int,double)']
TestSequentialAccessSparseVector.testDotSuperBig(): ['Vector.set(int,double)', 'Vector.dot(org.apache.mahout.math.Vector)']
TestSequentialAccessSparseVector.testToString(): []
MatricesTest.testFunctionalView(): ['Matrices.functionalMatrixView(int,int,org.apache.mahout.math.function.IntIntFunction)', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)']
MatricesTest.testTransposeView(): ['Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'DenseMatrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'TransposedMatrixView.getDelegate()', 'Matrices.functionalMatrixView(int,int,org.apache.mahout.math.function.IntIntFunction,boolean)', 'Matrix.transpose()', 'RandomUtils.getRandom(long)', 'Matrices.gaussianView(int,int,long)', 'Matrices.transposedView(org.apache.mahout.math.Matrix)', 'Matrices.gaussianGenerator(long)']
MatricesTest.testViewDenseSparseReporting(): ['Matrix.viewColumn(int)', 'Matrices.transposedView(org.apache.mahout.math.Matrix)', 'TransposedMatrixView.getDelegate()', 'Matrix.set(int,int,double)', 'Vector.isDense()', 'Matrix.viewRow(int)']
MatricesTest.testUniformView(): ['Matrix.getQuick(int,int)', 'Matrices.uniformSymmetricGenerator(int)', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Matrices.uniformView(int,int,int)', 'Matrix.numRows()', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Functions.chain(org.apache.mahout.math.function.DoubleFunction,org.apache.mahout.math.function.IntIntFunction)', 'Matrices.functionalMatrixView(int,int,org.apache.mahout.math.function.IntIntFunction,boolean)', 'Matrix.numCols()', 'Matrices.uniformGenerator(int)']
MatricesTest.testSymmetricUniformView(): ['Matrix.getQuick(int,int)', 'Matrices.uniformSymmetricGenerator(int)', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Matrices.symmetricUniformView(int,int,int)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Matrix.numRows()', 'Matrices.functionalMatrixView(int,int,org.apache.mahout.math.function.IntIntFunction,boolean)', 'Matrix.numCols()']
MatricesTest.testGaussianView(): ['Matrices.functionalMatrixView(int,int,org.apache.mahout.math.function.IntIntFunction,boolean)', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'RandomUtils.getRandom(long)', 'Matrices.gaussianView(int,int,long)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Matrices.gaussianGenerator(long)']
CentroidTest.testUpdate(): ['Functions.mult(double)', 'Centroid.getVector()', 'DenseVector.minus(org.apache.mahout.math.Vector)', 'Centroid.minus(org.apache.mahout.math.Vector)', 'Functions.div(double)', 'Vector.divide(double)', 'Centroid.setWeight(double)', 'Vector.plus(org.apache.mahout.math.Vector)', 'Vector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Centroid.getIndex()', 'Centroid.getWeight()', 'Vector.minus(org.apache.mahout.math.Vector)', 'MultiNormal.sample()', 'DenseVector.assign(org.apache.mahout.math.function.DoubleFunction)', 'Vector.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Centroid.update(org.apache.mahout.math.Vector,double)', 'Vector.norm(double)', 'Functions.reweigh(double,double)', 'Centroid.update(org.apache.mahout.math.Vector)', 'Matrix.times(org.apache.mahout.math.Vector)']
CentroidTest.testSize(): ['Vector.getNumNonZeroElements()']
FileBasedSparseBinaryMatrixTest.testSetData(): ['MatrixSlice.vector()', 'RandomWrapper.setSeed(long)', 'FileBasedSparseBinaryMatrix.setData(java.io.File)', 'MatrixSlice.index()', 'Matrix.columnSize()', 'FileBasedSparseBinaryMatrix.columnSize()', 'FileBasedSparseBinaryMatrix.iterator()', 'Vector.getNumNondefaultElements()', 'Matrix.iterator()', 'Vector.nonZeroes()', 'Matrix.rowSize()', 'Vector.minus(org.apache.mahout.math.Vector)', 'RandomUtils.getRandom()', 'MatrixSlice.getVector()', 'Vector.norm(double)', 'FileBasedSparseBinaryMatrix.rowSize()', 'FileBasedSparseBinaryMatrix.writeMatrix(java.io.File,org.apache.mahout.math.Matrix)', 'RandomWrapper.resetToTestSeed()', 'Vector.set(int,double)', 'Matrix.viewRow(int)']
CholeskyDecompositionTest.test1(): ['Matrix.get(int,int)', 'PivotedMatrix.getBase()', 'RandomWrapper.setSeed(long)', 'Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'PivotedMatrix.get(int,int)', 'CholeskyDecomposition.getL()', 'Matrix.columnSize()', 'CholeskyDecomposition.solveRight(org.apache.mahout.math.Matrix)', 'Matrix.assign(org.apache.mahout.math.function.DoubleFunction)', 'PivotedMatrix.rowUnpivot(int)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'PivotedMatrix.columnSize()', 'Matrix.rowSize()', 'CholeskyDecomposition.solveLeft(org.apache.mahout.math.Matrix)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'RandomUtils.getRandom()', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'Vector.norm(double)', 'Matrix.transpose()', 'RandomWrapper.resetToTestSeed()', 'Matrix.set(int,int,double)', 'Matrix.viewRow(int)']
CholeskyDecompositionTest.test2(): ['Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'CholeskyDecomposition.getL()', 'Matrix.transpose()', 'PivotedMatrix.getBase()']
CholeskyDecompositionTest.testRankDeficient(): ['Matrix.aggregate(org.apache.mahout.math.function.DoubleDoubleFunction,org.apache.mahout.math.function.DoubleFunction)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'Matrix.minus(org.apache.mahout.math.Matrix)', 'CholeskyDecomposition.getL()', 'CholeskyDecomposition.getPivot()', 'Matrix.transpose()', 'PivotedMatrix.getRowPivot()', 'PivotedMatrix.getBase()']
NormalTest.testCdf(): ['DistributionChecks.checkCdf(double,double,org.apache.mahout.math.jet.random.AbstractContinousDistribution,double[],double[])', 'RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'RandomWrapper.resetToTestSeed()', 'AbstractContinousDistribution.cdf(double)']
NormalTest.testSetState(): ['RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'Normal.setState(double,double)', 'AbstractContinousDistribution.nextDouble()', 'RandomWrapper.resetToTestSeed()', 'AbstractContinousDistribution.cdf(double)', 'DistributionChecks.checkDistribution(org.apache.mahout.math.jet.random.AbstractContinousDistribution,double[],double,double,int)']
NormalTest.testToString(): ['Normal.toString()']
MersenneTwisterTest.test10001(): ['MersenneTwister.nextBlock()', 'MersenneTwister.nextInt()', 'MersenneTwister.setReferenceSeed(int)']
MersenneTwisterTest.testRegression(): ['RandomEngine.nextLong()', 'RandomEngine.nextInt()', 'RandomEngine.nextDouble()']
MersenneTwisterTest.testDateConstructor(): ['RandomEngine.nextInt()']
GammaTest.testNextDouble(): ['RandomWrapper.setSeed(long)', 'Polynomial.p1evl(double,double[],int)', 'Gamma.nextDouble()', 'Gamma.cdf(double)', 'Gamma.nextDouble(double,double)', 'Gamma.randomDouble()', 'Gamma.incompleteGamma(double,double)', 'Gamma.incompleteGammaComplement(double,double)', 'RandomUtils.getRandom()', 'Gamma.logGamma(double)', 'Probability.gamma(double,double,double)', 'RandomWrapper.resetToTestSeed()', 'Polynomial.polevl(double,double[],int)']
GammaTest.testCdf(): ['Polynomial.polevl(double,double[],int)', 'RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'Gamma.logGamma(double)', 'Polynomial.p1evl(double,double[],int)', 'Gamma.cdf(double)', 'Probability.gamma(double,double,double)', 'RandomWrapper.resetToTestSeed()', 'Gamma.incompleteGamma(double,double)', 'Gamma.incompleteGammaComplement(double,double)']
GammaTest.testPdf(): ['RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'Polynomial.p1evl(double,double[],int)', 'Gamma.logGamma(double)', 'Gamma.pdf(double)', 'RandomWrapper.resetToTestSeed()', 'Polynomial.polevl(double,double[],int)']
ExponentialTest.testCdf(): ['RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'RandomWrapper.resetToTestSeed()', 'Exponential.cdf(double)']
ExponentialTest.testPdf(): []
ExponentialTest.testSetState(): ['Exponential.setState(double)']
ExponentialTest.testNextDouble(): ['RandomWrapper.setSeed(long)', 'RandomUtils.getRandom()', 'Exponential.setState(double)', 'AbstractContinousDistribution.nextDouble()', 'RandomWrapper.resetToTestSeed()', 'AbstractContinousDistribution.cdf(double)', 'DistributionChecks.checkDistribution(org.apache.mahout.math.jet.random.AbstractContinousDistribution,double[],double,double,int)']
ExponentialTest.testToString(): ['Exponential.toString()']
NegativeBinomialTest.testDistributionFunctions(): ['Gamma.gamma(double)', 'RandomWrapper.setSeed(long)', 'Polynomial.p1evl(double,double[],int)', 'NegativeBinomial.pdf(int)', 'Arithmetic.factorial(int)', 'Probability.negativeBinomial(int,int,double)', 'Gamma.incompleteBetaFraction2(double,double,double)', 'Gamma.powerSeries(double,double,double)', 'Arithmetic.binomial(long,long)', 'NegativeBinomial.cdf(int)', 'Gamma.incompleteBeta(double,double,double)', 'Gamma.incompleteBetaFraction1(double,double,double)', 'RandomUtils.getRandom()', 'Gamma.logGamma(double)', 'Gamma.stirlingFormula(double)', 'RandomWrapper.resetToTestSeed()', 'Polynomial.polevl(double,double[],int)']
ProbabilityTest.testNormalCdf(): ['Probability.normal(double,double,double)', 'Normal.pdf(double)', 'Probability.normal(double)']
ProbabilityTest.testBetaCdf(): ['Gamma.gamma(double)', 'Gamma.incompleteBeta(double,double,double)', 'Gamma.incompleteBetaFraction1(double,double,double)', 'Gamma.logGamma(double)', 'Polynomial.p1evl(double,double[],int)', 'Gamma.stirlingFormula(double)', 'Gamma.incompleteBetaFraction2(double,double,double)', 'Probability.beta(double,double,double)', 'Polynomial.polevl(double,double[],int)', 'Gamma.powerSeries(double,double,double)']
ProbabilityTest.testLogGamma(): ['Polynomial.p1evl(double,double[],int)', 'Gamma.logGamma(double)', 'Polynomial.polevl(double,double[],int)']
GammaTest.testGamma(): ['Gamma.gamma(double)', 'Polynomial.polevl(double,double[],int)', 'Gamma.stirlingFormula(double)', 'Gamma.logGamma(double)', 'Polynomial.p1evl(double,double[],int)']
GammaTest.testNegativeArgForGamma(): ['Gamma.gamma(double)', 'Polynomial.polevl(double,double[],int)', 'Gamma.stirlingFormula(double)', 'Gamma.logGamma(double)', 'Polynomial.p1evl(double,double[],int)']
GammaTest.testBigX(): ['Gamma.gamma(double)', 'Polynomial.polevl(double,double[],int)', 'Gamma.stirlingFormula(double)', 'Gamma.logGamma(double)', 'Polynomial.p1evl(double,double[],int)']
AlternatingLeastSquaresSolverTest.testYtY(): []
OpenIntByteHashMapTest.testConstructors(): ['OpenIntByteHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenIntByteHashMapTest.testEnsureCapacity(): ['OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'OpenIntByteHashMap.nextPrime(int)', 'PrimeFinder.nextPrime(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.ensureCapacity(int)', 'OpenIntByteHashMap.getInternalFactors(int[],double[],double[])', 'OpenIntByteHashMap.rehash(int)']
OpenIntByteHashMapTest.testClear(): ['OpenIntByteHashMap.trimToSize()', 'OpenIntByteHashMap.indexOfKey(int)', 'OpenIntByteHashMap.rehash(int)', 'OpenIntByteHashMap.get(int)', 'OpenIntByteHashMap.clear()', 'OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'OpenIntByteHashMap.nextPrime(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntByteHashMap.size()']
OpenIntByteHashMapTest.testClone(): ['OpenIntByteHashMap.trimToSize()', 'OpenIntByteHashMap.rehash(int)', 'OpenIntByteHashMap.clear()', 'OpenIntByteHashMap.put(int,byte)', 'AbstractIntByteMap.clone()', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.clone()', 'OpenIntByteHashMap.indexOfInsertion(int)', 'OpenIntByteHashMap.nextPrime(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntByteHashMap.size()']
OpenIntByteHashMapTest.testContainsKey(): ['OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.indexOfKey(int)', 'OpenIntByteHashMap.containsKey(int)', 'OpenIntByteHashMap.rehash(int)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)']
OpenIntByteHashMapTest.testContainValue(): ['OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.containsValue(byte)', 'OpenIntByteHashMap.indexOfValue(byte)', 'OpenIntByteHashMap.rehash(int)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)']
OpenIntByteHashMapTest.testForEachKey(): ['IntArrayList.toArray(int[])', 'OpenIntByteHashMap.indexOfKey(int)', 'OpenIntByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntByteHashMap.rehash(int)', 'IntArrayList.size()', 'IntProcedure.apply(int)', 'OpenIntByteHashMap.forEachKey(org.apache.mahout.math.function.IntProcedure)', 'OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntByteHashMap.removeKey(int)']
OpenIntByteHashMapTest.testForEachPair(): ['OpenIntByteHashMap.forEachPair(org.apache.mahout.math.function.IntByteProcedure)', 'OpenIntByteHashMap.indexOfKey(int)', 'OpenIntByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntByteHashMap.rehash(int)', 'OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntByteHashMap.removeKey(int)', 'IntByteProcedure.apply(int,byte)']
OpenIntByteHashMapTest.testGet(): ['OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.rehash(int)', 'OpenIntByteHashMap.indexOfKey(int)', 'OpenIntByteHashMap.get(int)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)']
OpenIntByteHashMapTest.testAdjustOrPutValue(): ['OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.rehash(int)', 'OpenIntByteHashMap.indexOfKey(int)', 'OpenIntByteHashMap.get(int)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntByteHashMap.adjustOrPutValue(int,byte,byte)']
OpenIntByteHashMapTest.testKeys(): ['OpenIntByteHashMap.keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.sort()', 'IntArrayList.elements()', 'OpenIntByteHashMap.rehash(int)', 'IntArrayList.setSize(int)', 'OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntByteHashMap.keys()']
OpenIntByteHashMapTest.testPairsMatching(): ['ByteArrayList.get(int)', 'IntArrayList.sort()', 'IntArrayList.size()', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'OpenIntByteHashMap.pairsMatching(org.apache.mahout.math.function.IntByteProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ByteArrayList)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.sort()', 'IntArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(int[],int)', 'IntArrayList.clear()', 'IntByteProcedure.apply(int,byte)', 'OpenIntByteHashMap.indexOfKey(int)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'OpenIntByteHashMap.rehash(int)', 'OpenIntByteHashMap.chooseShrinkCapacity(int,double,double)', 'IntArrayList.add(int)', 'OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.get(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntByteHashMap.removeKey(int)']
OpenIntByteHashMapTest.testValues(): ['ByteArrayList.get(int)', 'OpenIntByteHashMap.indexOfKey(int)', 'ByteArrayList.size()', 'OpenIntByteHashMap.rehash(int)', 'OpenIntByteHashMap.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.setSize(int)', 'OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.values(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.sort()', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntByteHashMap.removeKey(int)', 'ByteArrayList.elements()']
OpenIntByteHashMapTest.testCopy(): ['OpenIntByteHashMap.trimToSize()', 'OpenIntByteHashMap.copy()', 'OpenIntByteHashMap.rehash(int)', 'OpenIntByteHashMap.clear()', 'OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'OpenIntByteHashMap.nextPrime(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntByteHashMap.size()']
OpenIntByteHashMapTest.testEquals(): ['OpenIntByteHashMap.indexOfKey(int)', 'OpenIntByteHashMap.copy()', 'OpenIntByteHashMap.rehash(int)', 'OpenIntByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntByteHashMap.removeKey(int)', 'OpenIntByteHashMap.equals(java.lang.Object)']
OpenIntByteHashMapTest.testKeysSortedByValue(): ['IntArrayList.toArray(int[])', 'OpenIntByteHashMap.indexOfKey(int)', 'OpenIntByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntByteHashMap.rehash(int)', 'IntArrayList.size()', 'OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'OpenIntByteHashMap.keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntByteHashMap.removeKey(int)']
OpenIntByteHashMapTest.testPairsSortedByKey(): ['OpenIntByteHashMap.pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.get(int)', 'OpenIntByteHashMap.pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.size()', 'OpenIntByteHashMap.rehash(int)', 'IntArrayList.size()', 'ByteArrayList.clear()', 'OpenIntByteHashMap.put(int,byte)', 'OpenIntByteHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenIntByteHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntByteHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.clear()', 'OpenIntByteHashMap.chooseGrowCapacity(int,double,double)']
OpenLongByteHashMapTest.testConstructors(): ['OpenLongByteHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenLongByteHashMapTest.testEnsureCapacity(): ['OpenLongByteHashMap.nextPrime(int)', 'PrimeFinder.nextPrime(int)', 'OpenLongByteHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.ensureCapacity(int)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.getInternalFactors(int[],double[],double[])', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testClear(): ['OpenLongByteHashMap.rehash(int)', 'OpenLongByteHashMap.indexOfKey(long)', 'OpenLongByteHashMap.trimToSize()', 'OpenLongByteHashMap.get(long)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.clear()', 'OpenLongByteHashMap.put(long,byte)', 'OpenLongByteHashMap.nextPrime(int)', 'OpenLongByteHashMap.size()', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testClone(): ['OpenLongByteHashMap.rehash(int)', 'OpenLongByteHashMap.clone()', 'OpenLongByteHashMap.trimToSize()', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.clear()', 'AbstractLongByteMap.clone()', 'OpenLongByteHashMap.put(long,byte)', 'OpenLongByteHashMap.nextPrime(int)', 'OpenLongByteHashMap.size()', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testContainsKey(): ['OpenLongByteHashMap.put(long,byte)', 'OpenLongByteHashMap.rehash(int)', 'OpenLongByteHashMap.indexOfKey(long)', 'OpenLongByteHashMap.containsKey(long)', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testContainValue(): ['OpenLongByteHashMap.put(long,byte)', 'OpenLongByteHashMap.rehash(int)', 'OpenLongByteHashMap.containsValue(byte)', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.indexOfValue(byte)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testForEachKey(): ['OpenLongByteHashMap.chooseShrinkCapacity(int,double,double)', 'LongArrayList.toArray(long[])', 'OpenLongByteHashMap.rehash(int)', 'OpenLongByteHashMap.indexOfKey(long)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'LongProcedure.apply(long)', 'OpenLongByteHashMap.put(long,byte)', 'LongArrayList.size()', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.removeKey(long)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)', 'OpenLongByteHashMap.forEachKey(org.apache.mahout.math.function.LongProcedure)']
OpenLongByteHashMapTest.testForEachPair(): ['LongByteProcedure.apply(long,byte)', 'OpenLongByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongByteHashMap.rehash(int)', 'OpenLongByteHashMap.indexOfKey(long)', 'OpenLongByteHashMap.forEachPair(org.apache.mahout.math.function.LongByteProcedure)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.put(long,byte)', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.removeKey(long)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testGet(): ['OpenLongByteHashMap.put(long,byte)', 'OpenLongByteHashMap.rehash(int)', 'OpenLongByteHashMap.indexOfKey(long)', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.get(long)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testAdjustOrPutValue(): ['OpenLongByteHashMap.put(long,byte)', 'OpenLongByteHashMap.rehash(int)', 'OpenLongByteHashMap.indexOfKey(long)', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.get(long)', 'OpenLongByteHashMap.adjustOrPutValue(long,byte,byte)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testKeys(): ['OpenLongByteHashMap.keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.elements()', 'OpenLongByteHashMap.rehash(int)', 'LongArrayList.get(int)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.keys()', 'OpenLongByteHashMap.put(long,byte)', 'LongArrayList.sort()', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'LongArrayList.setSize(int)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testPairsMatching(): ['LongByteProcedure.apply(long,byte)', 'OpenLongByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongByteHashMap.rehash(int)', 'ByteArrayList.get(int)', 'LongArrayList.get(int)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'OpenLongByteHashMap.put(long,byte)', 'LongArrayList.clear()', 'LongArrayList.size()', 'ByteArrayList.sort()', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'OpenLongByteHashMap.indexOfKey(long)', 'OpenLongByteHashMap.pairsMatching(org.apache.mahout.math.function.LongByteProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.sort()', 'LongArrayList.ensureCapacity(int)', 'OpenLongByteHashMap.removeKey(long)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testValues(): ['OpenLongByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongByteHashMap.rehash(int)', 'ByteArrayList.get(int)', 'OpenLongByteHashMap.indexOfKey(long)', 'ByteArrayList.size()', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.setSize(int)', 'OpenLongByteHashMap.put(long,byte)', 'ByteArrayList.sort()', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.values(org.apache.mahout.math.list.ByteArrayList)', 'OpenLongByteHashMap.removeKey(long)', 'ByteArrayList.elements()']
OpenLongByteHashMapTest.testCopy(): ['OpenLongByteHashMap.rehash(int)', 'OpenLongByteHashMap.trimToSize()', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.clear()', 'OpenLongByteHashMap.put(long,byte)', 'OpenLongByteHashMap.nextPrime(int)', 'OpenLongByteHashMap.copy()', 'OpenLongByteHashMap.size()', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testEquals(): ['OpenLongByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongByteHashMap.rehash(int)', 'OpenLongByteHashMap.equals(java.lang.Object)', 'OpenLongByteHashMap.indexOfKey(long)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.put(long,byte)', 'OpenLongByteHashMap.copy()', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.removeKey(long)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testKeysSortedByValue(): ['OpenLongByteHashMap.chooseShrinkCapacity(int,double,double)', 'LongArrayList.toArray(long[])', 'OpenLongByteHashMap.rehash(int)', 'OpenLongByteHashMap.indexOfKey(long)', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'OpenLongByteHashMap.put(long,byte)', 'OpenLongByteHashMap.keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.size()', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.removeKey(long)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenLongByteHashMapTest.testPairsSortedByKey(): ['OpenLongByteHashMap.pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ByteArrayList)', 'OpenLongByteHashMap.rehash(int)', 'ByteArrayList.get(int)', 'OpenLongByteHashMap.pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ByteArrayList)', 'LongArrayList.get(int)', 'ByteArrayList.size()', 'OpenLongByteHashMap.indexOfInsertion(long)', 'OpenLongByteHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.clear()', 'OpenLongByteHashMap.put(long,byte)', 'LongArrayList.clear()', 'LongArrayList.size()', 'OpenLongByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongByteHashMap.chooseLowWaterMark(int,double)']
OpenObjectCharHashMapTest.testConstructors(): ['OpenObjectCharHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenObjectCharHashMapTest.testEnsureCapacity(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenObjectCharHashMap.nextPrime(int)', 'OpenObjectCharHashMap.getInternalFactors(int[],double[],double[])', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.ensureCapacity(int)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)']
OpenObjectCharHashMapTest.testClear(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.clear()', 'OpenObjectCharHashMap.trimToSize()', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)', 'OpenObjectCharHashMap.size()', 'OpenObjectCharHashMap.nextPrime(int)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)']
OpenObjectCharHashMapTest.testClone(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.clear()', 'AbstractObjectCharMap.clone()', 'OpenObjectCharHashMap.trimToSize()', 'OpenObjectCharHashMap.clone()', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)', 'OpenObjectCharHashMap.size()', 'OpenObjectCharHashMap.nextPrime(int)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)']
OpenObjectCharHashMapTest.testContainsKey(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.containsKey(java.lang.Object)', 'OpenObjectCharHashMap.indexOfKey(java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)']
OpenObjectCharHashMapTest.testContainValue(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.indexOfValue(char)', 'OpenObjectCharHashMap.containsValue(char)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)']
OpenObjectCharHashMapTest.testForEachKey(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.removeKey(java.lang.Object)', 'ObjectProcedure.apply(java.lang.Object)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)', 'OpenObjectCharHashMap.forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.indexOfKey(java.lang.Object)']
OpenObjectCharHashMapTest.testForEachPair(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.forEachPair(org.apache.mahout.math.function.ObjectCharProcedure)', 'OpenObjectCharHashMap.removeKey(java.lang.Object)', 'ObjectCharProcedure.apply(java.lang.Object,char)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.indexOfKey(java.lang.Object)']
OpenObjectCharHashMapTest.testGet(): ['OpenObjectCharHashMap.get(java.lang.Object)', 'OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.indexOfKey(java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)']
OpenObjectCharHashMapTest.testKeys(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.keys()', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.keys(java.util.List)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)']
OpenObjectCharHashMapTest.testAdjustOrPutValue(): ['OpenObjectCharHashMap.get(java.lang.Object)', 'OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.adjustOrPutValue(java.lang.Object,char,char)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.indexOfKey(java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)']
OpenObjectCharHashMapTest.testPairsMatching(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.ensureCapacity(int)', 'OpenObjectCharHashMap.removeKey(java.lang.Object)', 'OpenObjectCharHashMap.pairsMatching(org.apache.mahout.math.function.ObjectCharProcedure,java.util.List,org.apache.mahout.math.list.CharArrayList)', 'ObjectCharProcedure.apply(java.lang.Object,char)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'CharArrayList.size()', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.sort()', 'CharArrayList.get(int)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.clear()', 'Arrays.ensureCapacity(char[],int)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.indexOfKey(java.lang.Object)', 'CharArrayList.add(char)']
OpenObjectCharHashMapTest.testValues(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.elements()', 'OpenObjectCharHashMap.removeKey(java.lang.Object)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'CharArrayList.size()', 'OpenObjectCharHashMap.values(org.apache.mahout.math.list.CharArrayList)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'CharArrayList.get(int)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.indexOfKey(java.lang.Object)']
OpenObjectCharHashMapTest.testCopy(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.clear()', 'OpenObjectCharHashMap.trimToSize()', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)', 'OpenObjectCharHashMap.copy()', 'OpenObjectCharHashMap.size()', 'OpenObjectCharHashMap.nextPrime(int)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)']
OpenObjectCharHashMapTest.testEquals(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.removeKey(java.lang.Object)', 'OpenObjectCharHashMap.equals(java.lang.Object)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)', 'OpenObjectCharHashMap.copy()', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.indexOfKey(java.lang.Object)']
OpenObjectCharHashMapTest.testKeysSortedByValue(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.removeKey(java.lang.Object)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectCharHashMap.keysSortedByValue(java.util.List)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.indexOfKey(java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)']
OpenObjectCharHashMapTest.testPairsSortedByKey(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.get(int)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.CharArrayList)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'CharArrayList.size()', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)']
OpenObjectCharHashMapTest.testPairsSortedByKeyNotComparable(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.CharArrayList)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)']
OpenObjectCharHashMapTest.testPairsSortedByValue(): ['OpenObjectCharHashMap.chooseHighWaterMark(int,double)', 'OpenObjectCharHashMap.pairsSortedByValue(java.util.List,org.apache.mahout.math.list.CharArrayList)', 'CharArrayList.get(int)', 'OpenObjectCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectCharHashMap.rehash(int)', 'OpenObjectCharHashMap.put(java.lang.Object,char)', 'OpenObjectCharHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectCharHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectCharHashMap.chooseLowWaterMark(int,double)']
OpenCharShortHashMapTest.testConstructors(): ['OpenCharShortHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenCharShortHashMapTest.testEnsureCapacity(): ['OpenCharShortHashMap.getInternalFactors(int[],double[],double[])', 'OpenCharShortHashMap.nextPrime(int)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.ensureCapacity(int)']
OpenCharShortHashMapTest.testClear(): ['OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.clear()', 'OpenCharShortHashMap.size()', 'OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.nextPrime(int)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.get(char)', 'OpenCharShortHashMap.trimToSize()', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharShortHashMap.indexOfKey(char)']
OpenCharShortHashMapTest.testClone(): ['OpenCharShortHashMap.clone()', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.clear()', 'OpenCharShortHashMap.size()', 'OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.nextPrime(int)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'AbstractCharShortMap.clone()', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.trimToSize()', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)']
OpenCharShortHashMapTest.testContainsKey(): ['OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.containsKey(char)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharShortHashMap.indexOfKey(char)']
OpenCharShortHashMapTest.testContainValue(): ['OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfValue(short)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharShortHashMap.containsValue(short)']
OpenCharShortHashMapTest.testForEachKey(): ['OpenCharShortHashMap.forEachKey(org.apache.mahout.math.function.CharProcedure)', 'CharArrayList.toArray(char[])', 'OpenCharShortHashMap.removeKey(char)', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.chooseShrinkCapacity(int,double,double)', 'CharProcedure.apply(char)', 'CharArrayList.size()', 'OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharShortHashMap.indexOfKey(char)']
OpenCharShortHashMapTest.testForEachPair(): ['OpenCharShortHashMap.removeKey(char)', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.forEachPair(org.apache.mahout.math.function.CharShortProcedure)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'CharShortProcedure.apply(char,short)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharShortHashMap.indexOfKey(char)']
OpenCharShortHashMapTest.testGet(): ['OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.get(char)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharShortHashMap.indexOfKey(char)']
OpenCharShortHashMapTest.testAdjustOrPutValue(): ['OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.get(char)', 'OpenCharShortHashMap.adjustOrPutValue(char,short,short)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharShortHashMap.indexOfKey(char)']
OpenCharShortHashMapTest.testKeys(): ['CharArrayList.elements()', 'OpenCharShortHashMap.keys()', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.get(int)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)']
OpenCharShortHashMapTest.testPairsMatching(): ['OpenCharShortHashMap.removeKey(char)', 'OpenCharShortHashMap.chooseShrinkCapacity(int,double,double)', 'ShortArrayList.clear()', 'OpenCharShortHashMap.put(char,short)', 'CharArrayList.sort()', 'CharArrayList.get(int)', 'OpenCharShortHashMap.rehash(int)', 'CharShortProcedure.apply(char,short)', 'OpenCharShortHashMap.pairsMatching(org.apache.mahout.math.function.CharShortProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ShortArrayList)', 'OpenCharShortHashMap.indexOfKey(char)', 'ShortArrayList.size()', 'CharArrayList.ensureCapacity(int)', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'CharArrayList.size()', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.sort()', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.clear()', 'OpenCharShortHashMap.indexOfInsertion(char)', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.add(char)']
OpenCharShortHashMapTest.testValues(): ['ShortArrayList.size()', 'OpenCharShortHashMap.removeKey(char)', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.chooseShrinkCapacity(int,double,double)', 'ShortArrayList.elements()', 'OpenCharShortHashMap.values(org.apache.mahout.math.list.ShortArrayList)', 'OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.sort()', 'OpenCharShortHashMap.rehash(int)', 'ShortArrayList.setSize(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'ShortArrayList.get(int)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharShortHashMap.indexOfKey(char)']
OpenCharShortHashMapTest.testCopy(): ['OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.copy()', 'OpenCharShortHashMap.clear()', 'OpenCharShortHashMap.size()', 'OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.nextPrime(int)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.trimToSize()', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)']
OpenCharShortHashMapTest.testEquals(): ['OpenCharShortHashMap.removeKey(char)', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharShortHashMap.copy()', 'OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharShortHashMap.equals(java.lang.Object)', 'OpenCharShortHashMap.indexOfKey(char)']
OpenCharShortHashMapTest.testKeysSortedByValue(): ['CharArrayList.toArray(char[])', 'OpenCharShortHashMap.removeKey(char)', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.size()', 'OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'OpenCharShortHashMap.rehash(int)', 'OpenCharShortHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharShortHashMap.indexOfKey(char)']
OpenCharShortHashMapTest.testPairsSortedByKey(): ['ShortArrayList.size()', 'OpenCharShortHashMap.chooseHighWaterMark(int,double)', 'OpenCharShortHashMap.pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.clear()', 'CharArrayList.size()', 'OpenCharShortHashMap.put(char,short)', 'OpenCharShortHashMap.pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ShortArrayList)', 'OpenCharShortHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.get(int)', 'OpenCharShortHashMap.rehash(int)', 'CharArrayList.clear()', 'OpenCharShortHashMap.indexOfInsertion(char)', 'ShortArrayList.get(int)', 'HashFunctions.hash(char)', 'OpenCharShortHashMap.chooseGrowCapacity(int,double,double)']
OpenLongIntHashMapTest.testConstructors(): ['OpenLongIntHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenLongIntHashMapTest.testEnsureCapacity(): ['OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.ensureCapacity(int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'PrimeFinder.nextPrime(int)', 'OpenLongIntHashMap.getInternalFactors(int[],double[],double[])', 'OpenLongIntHashMap.nextPrime(int)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)']
OpenLongIntHashMapTest.testClear(): ['OpenLongIntHashMap.size()', 'OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.indexOfKey(long)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'OpenLongIntHashMap.get(long)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.clear()', 'OpenLongIntHashMap.trimToSize()', 'OpenLongIntHashMap.nextPrime(int)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)']
OpenLongIntHashMapTest.testClone(): ['OpenLongIntHashMap.size()', 'OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.clear()', 'OpenLongIntHashMap.trimToSize()', 'OpenLongIntHashMap.nextPrime(int)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)', 'AbstractLongIntMap.clone()', 'OpenLongIntHashMap.clone()']
OpenLongIntHashMapTest.testContainsKey(): ['OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.containsKey(long)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'OpenLongIntHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)']
OpenLongIntHashMapTest.testContainValue(): ['OpenLongIntHashMap.containsValue(int)', 'OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.indexOfValue(int)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)']
OpenLongIntHashMapTest.testForEachKey(): ['OpenLongIntHashMap.rehash(int)', 'LongArrayList.toArray(long[])', 'OpenLongIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongIntHashMap.indexOfKey(long)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'LongProcedure.apply(long)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.forEachKey(org.apache.mahout.math.function.LongProcedure)', 'LongArrayList.size()', 'OpenLongIntHashMap.removeKey(long)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)']
OpenLongIntHashMapTest.testForEachPair(): ['OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.chooseShrinkCapacity(int,double,double)', 'LongIntProcedure.apply(long,int)', 'OpenLongIntHashMap.indexOfKey(long)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'OpenLongIntHashMap.forEachPair(org.apache.mahout.math.function.LongIntProcedure)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.removeKey(long)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)']
OpenLongIntHashMapTest.testGet(): ['OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'OpenLongIntHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'OpenLongIntHashMap.get(long)']
OpenLongIntHashMapTest.testAdjustOrPutValue(): ['OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'OpenLongIntHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'OpenLongIntHashMap.adjustOrPutValue(long,int,int)', 'OpenLongIntHashMap.get(long)']
OpenLongIntHashMapTest.testKeys(): ['LongArrayList.elements()', 'OpenLongIntHashMap.rehash(int)', 'LongArrayList.get(int)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'OpenLongIntHashMap.keys()', 'OpenLongIntHashMap.put(long,int)', 'LongArrayList.sort()', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.keys(org.apache.mahout.math.list.LongArrayList)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.setSize(int)']
OpenLongIntHashMapTest.testPairsMatching(): ['OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.chooseShrinkCapacity(int,double,double)', 'LongArrayList.get(int)', 'IntArrayList.sort()', 'OpenLongIntHashMap.indexOfKey(long)', 'IntArrayList.size()', 'LongArrayList.clear()', 'OpenLongIntHashMap.put(long,int)', 'LongArrayList.size()', 'IntArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(int[],int)', 'HashFunctions.hash(long)', 'IntArrayList.clear()', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'OpenLongIntHashMap.pairsMatching(org.apache.mahout.math.function.LongIntProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.IntArrayList)', 'LongIntProcedure.apply(long,int)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.add(int)', 'IntArrayList.get(int)', 'LongArrayList.sort()', 'OpenLongIntHashMap.indexOfInsertion(long)', 'LongArrayList.ensureCapacity(int)', 'OpenLongIntHashMap.removeKey(long)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)']
OpenLongIntHashMapTest.testValues(): ['OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.chooseShrinkCapacity(int,double,double)', 'IntArrayList.sort()', 'IntArrayList.elements()', 'OpenLongIntHashMap.indexOfKey(long)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.setSize(int)', 'IntArrayList.size()', 'IntArrayList.get(int)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.removeKey(long)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.values(org.apache.mahout.math.list.IntArrayList)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)']
OpenLongIntHashMapTest.testCopy(): ['OpenLongIntHashMap.size()', 'OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.clear()', 'OpenLongIntHashMap.trimToSize()', 'OpenLongIntHashMap.nextPrime(int)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongIntHashMap.copy()']
OpenLongIntHashMapTest.testEquals(): ['OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongIntHashMap.indexOfKey(long)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'OpenLongIntHashMap.equals(java.lang.Object)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'OpenLongIntHashMap.removeKey(long)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongIntHashMap.copy()']
OpenLongIntHashMapTest.testKeysSortedByValue(): ['OpenLongIntHashMap.rehash(int)', 'LongArrayList.toArray(long[])', 'OpenLongIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongIntHashMap.keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'OpenLongIntHashMap.indexOfKey(long)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'OpenLongIntHashMap.put(long,int)', 'OpenLongIntHashMap.indexOfInsertion(long)', 'LongArrayList.size()', 'OpenLongIntHashMap.removeKey(long)', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)']
OpenLongIntHashMapTest.testPairsSortedByKey(): ['OpenLongIntHashMap.rehash(int)', 'OpenLongIntHashMap.pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.IntArrayList)', 'LongArrayList.get(int)', 'OpenLongIntHashMap.chooseLowWaterMark(int,double)', 'OpenLongIntHashMap.pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.size()', 'IntArrayList.get(int)', 'OpenLongIntHashMap.put(long,int)', 'LongArrayList.clear()', 'OpenLongIntHashMap.indexOfInsertion(long)', 'LongArrayList.size()', 'OpenLongIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongIntHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.clear()']
OpenLongLongHashMapTest.testConstructors(): ['OpenLongLongHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenLongLongHashMapTest.testEnsureCapacity(): ['OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenLongLongHashMap.getInternalFactors(int[],double[],double[])', 'OpenLongLongHashMap.ensureCapacity(int)', 'OpenLongLongHashMap.nextPrime(int)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)']
OpenLongLongHashMapTest.testClear(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.get(long)', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.trimToSize()', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.indexOfKey(long)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'OpenLongLongHashMap.clear()', 'OpenLongLongHashMap.nextPrime(int)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)', 'OpenLongLongHashMap.size()']
OpenLongLongHashMapTest.testClone(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.trimToSize()', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'AbstractLongLongMap.clone()', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.clone()', 'OpenLongLongHashMap.indexOfInsertion(long)', 'OpenLongLongHashMap.clear()', 'OpenLongLongHashMap.nextPrime(int)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)', 'OpenLongLongHashMap.size()']
OpenLongLongHashMapTest.testContainsKey(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.indexOfKey(long)', 'OpenLongLongHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.containsKey(long)']
OpenLongLongHashMapTest.testContainValue(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.indexOfValue(long)', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.containsValue(long)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)']
OpenLongLongHashMapTest.testForEachKey(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.toArray(long[])', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongLongHashMap.removeKey(long)', 'OpenLongLongHashMap.indexOfKey(long)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'LongProcedure.apply(long)', 'OpenLongLongHashMap.forEachKey(org.apache.mahout.math.function.LongProcedure)', 'LongArrayList.size()', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)']
OpenLongLongHashMapTest.testForEachPair(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongLongHashMap.removeKey(long)', 'OpenLongLongHashMap.indexOfKey(long)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)', 'LongLongProcedure.apply(long,long)', 'OpenLongLongHashMap.forEachPair(org.apache.mahout.math.function.LongLongProcedure)']
OpenLongLongHashMapTest.testGet(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.get(long)', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.indexOfKey(long)', 'OpenLongLongHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)']
OpenLongLongHashMapTest.testAdjustOrPutValue(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.get(long)', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.indexOfKey(long)', 'OpenLongLongHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.adjustOrPutValue(long,long,long)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)']
OpenLongLongHashMapTest.testKeys(): ['OpenLongLongHashMap.put(long,long)', 'LongArrayList.elements()', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.get(int)', 'OpenLongLongHashMap.keys(org.apache.mahout.math.list.LongArrayList)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'LongArrayList.sort()', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)', 'LongArrayList.setSize(int)', 'OpenLongLongHashMap.keys()']
OpenLongLongHashMapTest.testPairsMatching(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.chooseShrinkCapacity(int,double,double)', 'LongArrayList.get(int)', 'OpenLongLongHashMap.removeKey(long)', 'OpenLongLongHashMap.indexOfKey(long)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'Arrays.ensureCapacity(long[],int)', 'LongArrayList.clear()', 'LongArrayList.sort()', 'LongArrayList.size()', 'LongArrayList.ensureCapacity(int)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)', 'LongLongProcedure.apply(long,long)', 'LongArrayList.add(long)', 'OpenLongLongHashMap.pairsMatching(org.apache.mahout.math.function.LongLongProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.LongArrayList)']
OpenLongLongHashMapTest.testValues(): ['OpenLongLongHashMap.put(long,long)', 'LongArrayList.elements()', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.chooseShrinkCapacity(int,double,double)', 'LongArrayList.get(int)', 'OpenLongLongHashMap.removeKey(long)', 'OpenLongLongHashMap.indexOfKey(long)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'LongArrayList.sort()', 'LongArrayList.size()', 'OpenLongLongHashMap.values(org.apache.mahout.math.list.LongArrayList)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)', 'LongArrayList.setSize(int)']
OpenLongLongHashMapTest.testCopy(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.copy()', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.trimToSize()', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'OpenLongLongHashMap.clear()', 'OpenLongLongHashMap.nextPrime(int)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)', 'OpenLongLongHashMap.size()']
OpenLongLongHashMapTest.testEquals(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.copy()', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.equals(java.lang.Object)', 'OpenLongLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongLongHashMap.removeKey(long)', 'OpenLongLongHashMap.indexOfKey(long)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)']
OpenLongLongHashMapTest.testKeysSortedByValue(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.toArray(long[])', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongLongHashMap.removeKey(long)', 'OpenLongLongHashMap.indexOfKey(long)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)', 'OpenLongLongHashMap.keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.size()', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)']
OpenLongLongHashMapTest.testPairsSortedByKey(): ['OpenLongLongHashMap.put(long,long)', 'OpenLongLongHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.clear()', 'LongArrayList.size()', 'OpenLongLongHashMap.pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.LongArrayList)', 'OpenLongLongHashMap.pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.LongArrayList)', 'OpenLongLongHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.get(int)', 'HashFunctions.hash(long)', 'OpenLongLongHashMap.rehash(int)', 'OpenLongLongHashMap.chooseHighWaterMark(int,double)', 'OpenLongLongHashMap.indexOfInsertion(long)']
OpenDoubleShortHashMapTest.testConstructors(): ['PrimeFinder.nextPrime(int)', 'OpenDoubleShortHashMap.getInternalFactors(int[],double[],double[])']
OpenDoubleShortHashMapTest.testEnsureCapacity(): ['HashFunctions.hash(double)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)', 'OpenDoubleShortHashMap.nextPrime(int)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.ensureCapacity(int)', 'OpenDoubleShortHashMap.rehash(int)']
OpenDoubleShortHashMapTest.testClear(): ['HashFunctions.hash(double)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.get(double)', 'OpenDoubleShortHashMap.size()', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.clear()', 'OpenDoubleShortHashMap.nextPrime(int)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.trimToSize()', 'OpenDoubleShortHashMap.rehash(int)', 'OpenDoubleShortHashMap.indexOfKey(double)']
OpenDoubleShortHashMapTest.testClone(): ['HashFunctions.hash(double)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.size()', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.clone()', 'OpenDoubleShortHashMap.clear()', 'AbstractDoubleShortMap.clone()', 'OpenDoubleShortHashMap.nextPrime(int)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.trimToSize()', 'OpenDoubleShortHashMap.rehash(int)']
OpenDoubleShortHashMapTest.testContainsKey(): ['HashFunctions.hash(double)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.rehash(int)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.indexOfKey(double)', 'OpenDoubleShortHashMap.containsKey(double)']
OpenDoubleShortHashMapTest.testContainValue(): ['HashFunctions.hash(double)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.indexOfValue(short)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.rehash(int)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.containsValue(short)']
OpenDoubleShortHashMapTest.testForEachKey(): ['DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.removeKey(double)', 'DoubleArrayList.size()', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.rehash(int)', 'DoubleProcedure.apply(double)', 'OpenDoubleShortHashMap.indexOfKey(double)']
OpenDoubleShortHashMapTest.testForEachPair(): ['HashFunctions.hash(double)', 'OpenDoubleShortHashMap.forEachPair(org.apache.mahout.math.function.DoubleShortProcedure)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'DoubleShortProcedure.apply(double,short)', 'OpenDoubleShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.removeKey(double)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.rehash(int)', 'OpenDoubleShortHashMap.indexOfKey(double)']
OpenDoubleShortHashMapTest.testGet(): ['HashFunctions.hash(double)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.get(double)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.rehash(int)', 'OpenDoubleShortHashMap.indexOfKey(double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleShortHashMapTest.testAdjustOrPutValue(): ['HashFunctions.hash(double)', 'OpenDoubleShortHashMap.adjustOrPutValue(double,short,short)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.get(double)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.rehash(int)', 'OpenDoubleShortHashMap.indexOfKey(double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleShortHashMapTest.testKeys(): ['OpenDoubleShortHashMap.keys()', 'HashFunctions.hash(double)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'DoubleArrayList.setSize(int)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.keys(org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleShortHashMap.rehash(int)']
OpenDoubleShortHashMapTest.testPairsMatching(): ['OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'DoubleShortProcedure.apply(double,short)', 'DoubleArrayList.sort()', 'OpenDoubleShortHashMap.pairsMatching(org.apache.mahout.math.function.DoubleShortProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ShortArrayList)', 'DoubleArrayList.add(double)', 'ShortArrayList.clear()', 'OpenDoubleShortHashMap.removeKey(double)', 'DoubleArrayList.size()', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'OpenDoubleShortHashMap.indexOfKey(double)', 'HashFunctions.hash(double)', 'ShortArrayList.size()', 'DoubleArrayList.get(int)', 'ShortArrayList.ensureCapacity(int)', 'OpenDoubleShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'Arrays.ensureCapacity(short[],int)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'ShortArrayList.sort()', 'DoubleArrayList.clear()', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'ShortArrayList.get(int)', 'OpenDoubleShortHashMap.rehash(int)', 'ShortArrayList.add(short)']
OpenDoubleShortHashMapTest.testValues(): ['HashFunctions.hash(double)', 'ShortArrayList.size()', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.elements()', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.removeKey(double)', 'OpenDoubleShortHashMap.values(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.sort()', 'ShortArrayList.setSize(int)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'ShortArrayList.get(int)', 'OpenDoubleShortHashMap.rehash(int)', 'OpenDoubleShortHashMap.indexOfKey(double)']
OpenDoubleShortHashMapTest.testCopy(): ['HashFunctions.hash(double)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.size()', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.clear()', 'OpenDoubleShortHashMap.nextPrime(int)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.trimToSize()', 'OpenDoubleShortHashMap.rehash(int)', 'OpenDoubleShortHashMap.copy()']
OpenDoubleShortHashMapTest.testEquals(): ['HashFunctions.hash(double)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.removeKey(double)', 'OpenDoubleShortHashMap.equals(java.lang.Object)', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.rehash(int)', 'OpenDoubleShortHashMap.indexOfKey(double)', 'OpenDoubleShortHashMap.copy()']
OpenDoubleShortHashMapTest.testKeysSortedByValue(): ['OpenDoubleShortHashMap.keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'OpenDoubleShortHashMap.removeKey(double)', 'DoubleArrayList.size()', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'OpenDoubleShortHashMap.rehash(int)', 'OpenDoubleShortHashMap.indexOfKey(double)']
OpenDoubleShortHashMapTest.testPairsSortedByKey(): ['OpenDoubleShortHashMap.pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ShortArrayList)', 'HashFunctions.hash(double)', 'ShortArrayList.size()', 'OpenDoubleShortHashMap.chooseHighWaterMark(int,double)', 'DoubleArrayList.get(int)', 'OpenDoubleShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.clear()', 'OpenDoubleShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleShortHashMap.put(double,short)', 'DoubleArrayList.clear()', 'OpenDoubleShortHashMap.pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ShortArrayList)', 'DoubleArrayList.size()', 'OpenDoubleShortHashMap.indexOfInsertion(double)', 'ShortArrayList.get(int)', 'OpenDoubleShortHashMap.rehash(int)']
OpenIntObjectHashMapTest.testConstructors(): ['OpenIntObjectHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenIntObjectHashMapTest.testEnsureCapacity(): ['OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.getInternalFactors(int[],double[],double[])', 'OpenIntObjectHashMap.nextPrime(int)', 'OpenIntObjectHashMap.rehash(int)', 'PrimeFinder.nextPrime(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.ensureCapacity(int)']
OpenIntObjectHashMapTest.testClear(): ['OpenIntObjectHashMap.size()', 'OpenIntObjectHashMap.indexOfKey(int)', 'OpenIntObjectHashMap.clear()', 'OpenIntObjectHashMap.trimToSize()', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntObjectHashMap.containsKey(int)', 'OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.nextPrime(int)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.get(int)']
OpenIntObjectHashMapTest.testClone(): ['OpenIntObjectHashMap.size()', 'AbstractIntObjectMap.clone()', 'OpenIntObjectHashMap.clone()', 'OpenIntObjectHashMap.clear()', 'OpenIntObjectHashMap.trimToSize()', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.nextPrime(int)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.indexOfInsertion(int)']
OpenIntObjectHashMapTest.testContainsKey(): ['OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'OpenIntObjectHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntObjectHashMap.containsKey(int)']
OpenIntObjectHashMapTest.testContainValue(): ['OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'OpenIntObjectHashMap.indexOfValue(java.lang.Object)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntObjectHashMap.containsValue(java.lang.Object)']
OpenIntObjectHashMapTest.testForEachKey(): ['OpenIntObjectHashMap.indexOfKey(int)', 'OpenIntObjectHashMap.forEachKey(org.apache.mahout.math.function.IntProcedure)', 'IntArrayList.toArray(int[])', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.size()', 'IntProcedure.apply(int)', 'OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.removeKey(int)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.chooseShrinkCapacity(int,double,double)']
OpenIntObjectHashMapTest.testForEachPair(): ['OpenIntObjectHashMap.indexOfKey(int)', 'IntObjectProcedure.apply(int,java.lang.Object)', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntObjectHashMap.forEachPair(org.apache.mahout.math.function.IntObjectProcedure)', 'OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.removeKey(int)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.chooseShrinkCapacity(int,double,double)']
OpenIntObjectHashMapTest.testGet(): ['OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'OpenIntObjectHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntObjectHashMap.get(int)']
OpenIntObjectHashMapTest.testKeys(): ['OpenIntObjectHashMap.keys()', 'IntArrayList.sort()', 'IntArrayList.elements()', 'OpenIntObjectHashMap.keys(org.apache.mahout.math.list.IntArrayList)', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.setSize(int)', 'OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.indexOfInsertion(int)']
OpenIntObjectHashMapTest.testPairsMatching(): ['OpenIntObjectHashMap.indexOfKey(int)', 'IntObjectProcedure.apply(int,java.lang.Object)', 'IntArrayList.sort()', 'OpenIntObjectHashMap.pairsMatching(org.apache.mahout.math.function.IntObjectProcedure,org.apache.mahout.math.list.IntArrayList,java.util.List)', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.size()', 'IntArrayList.add(int)', 'OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'HashFunctions.hash(int)', 'IntArrayList.ensureCapacity(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.removeKey(int)', 'Arrays.ensureCapacity(int[],int)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'IntArrayList.clear()', 'OpenIntObjectHashMap.chooseShrinkCapacity(int,double,double)']
OpenIntObjectHashMapTest.testValues(): ['OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'OpenIntObjectHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.removeKey(int)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntObjectHashMap.values(java.util.List)']
OpenIntObjectHashMapTest.testCopy(): ['OpenIntObjectHashMap.size()', 'OpenIntObjectHashMap.clear()', 'OpenIntObjectHashMap.trimToSize()', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.nextPrime(int)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.copy()']
OpenIntObjectHashMapTest.testEquals(): ['OpenIntObjectHashMap.indexOfKey(int)', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.removeKey(int)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.copy()', 'OpenIntObjectHashMap.equals(java.lang.Object)', 'OpenIntObjectHashMap.chooseShrinkCapacity(int,double,double)']
OpenIntObjectHashMapTest.testKeysSortedByValue(): ['OpenIntObjectHashMap.indexOfKey(int)', 'IntArrayList.toArray(int[])', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntObjectHashMap.keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.size()', 'OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.removeKey(int)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.chooseShrinkCapacity(int,double,double)']
OpenIntObjectHashMapTest.testPairsSortedByKey(): ['OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.size()', 'OpenIntObjectHashMap.pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,java.util.List)']
OpenIntObjectHashMapTest.testPairsSortedByValue(): ['OpenIntObjectHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenIntObjectHashMap.put(int,java.lang.Object)', 'OpenIntObjectHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntObjectHashMap.chooseHighWaterMark(int,double)', 'OpenIntObjectHashMap.pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,java.util.List)', 'OpenIntObjectHashMap.indexOfInsertion(int)', 'OpenIntObjectHashMap.chooseGrowCapacity(int,double,double)']
OpenCharLongHashMapTest.testConstructors(): ['OpenCharLongHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenCharLongHashMapTest.testEnsureCapacity(): ['PrimeFinder.nextPrime(int)', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.ensureCapacity(int)', 'OpenCharLongHashMap.nextPrime(int)', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.getInternalFactors(int[],double[],double[])', 'HashFunctions.hash(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)']
OpenCharLongHashMapTest.testClear(): ['OpenCharLongHashMap.put(char,long)', 'OpenCharLongHashMap.trimToSize()', 'OpenCharLongHashMap.clear()', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.indexOfKey(char)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.nextPrime(int)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharLongHashMap.get(char)', 'OpenCharLongHashMap.size()']
OpenCharLongHashMapTest.testClone(): ['OpenCharLongHashMap.put(char,long)', 'OpenCharLongHashMap.trimToSize()', 'OpenCharLongHashMap.clear()', 'AbstractCharLongMap.clone()', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.clone()', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.nextPrime(int)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharLongHashMap.size()']
OpenCharLongHashMapTest.testContainsKey(): ['OpenCharLongHashMap.containsKey(char)', 'OpenCharLongHashMap.put(char,long)', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.indexOfKey(char)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)']
OpenCharLongHashMapTest.testContainValue(): ['OpenCharLongHashMap.containsValue(long)', 'OpenCharLongHashMap.put(char,long)', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.indexOfValue(long)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)']
OpenCharLongHashMapTest.testForEachKey(): ['OpenCharLongHashMap.put(char,long)', 'CharArrayList.toArray(char[])', 'OpenCharLongHashMap.forEachKey(org.apache.mahout.math.function.CharProcedure)', 'OpenCharLongHashMap.indexOfInsertion(char)', 'CharProcedure.apply(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.size()', 'OpenCharLongHashMap.indexOfKey(char)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)', 'OpenCharLongHashMap.removeKey(char)', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)']
OpenCharLongHashMapTest.testForEachPair(): ['OpenCharLongHashMap.put(char,long)', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.indexOfKey(char)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)', 'OpenCharLongHashMap.removeKey(char)', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'CharLongProcedure.apply(char,long)', 'OpenCharLongHashMap.forEachPair(org.apache.mahout.math.function.CharLongProcedure)']
OpenCharLongHashMapTest.testGet(): ['OpenCharLongHashMap.put(char,long)', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.get(char)', 'OpenCharLongHashMap.indexOfKey(char)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)']
OpenCharLongHashMapTest.testAdjustOrPutValue(): ['OpenCharLongHashMap.put(char,long)', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.adjustOrPutValue(char,long,long)', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.get(char)', 'OpenCharLongHashMap.indexOfKey(char)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)']
OpenCharLongHashMapTest.testKeys(): ['OpenCharLongHashMap.put(char,long)', 'CharArrayList.elements()', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenCharLongHashMap.keys()', 'OpenCharLongHashMap.rehash(int)', 'CharArrayList.get(int)', 'OpenCharLongHashMap.keys(org.apache.mahout.math.list.CharArrayList)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)']
OpenCharLongHashMapTest.testPairsMatching(): ['LongArrayList.get(int)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.indexOfKey(char)', 'CharArrayList.sort()', 'LongArrayList.clear()', 'OpenCharLongHashMap.removeKey(char)', 'LongArrayList.size()', 'CharArrayList.get(int)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'OpenCharLongHashMap.put(char,long)', 'CharArrayList.ensureCapacity(int)', 'OpenCharLongHashMap.indexOfInsertion(char)', 'CharArrayList.size()', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.sort()', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.pairsMatching(org.apache.mahout.math.function.CharLongProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.LongArrayList)', 'Arrays.ensureCapacity(char[],int)', 'OpenCharLongHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.clear()', 'LongArrayList.ensureCapacity(int)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'CharLongProcedure.apply(char,long)', 'CharArrayList.add(char)']
OpenCharLongHashMapTest.testValues(): ['LongArrayList.elements()', 'OpenCharLongHashMap.put(char,long)', 'LongArrayList.get(int)', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.indexOfKey(char)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.sort()', 'OpenCharLongHashMap.removeKey(char)', 'OpenCharLongHashMap.rehash(int)', 'LongArrayList.size()', 'OpenCharLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'LongArrayList.setSize(int)', 'OpenCharLongHashMap.values(org.apache.mahout.math.list.LongArrayList)']
OpenCharLongHashMapTest.testCopy(): ['OpenCharLongHashMap.put(char,long)', 'OpenCharLongHashMap.trimToSize()', 'OpenCharLongHashMap.clear()', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)', 'OpenCharLongHashMap.copy()', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.nextPrime(int)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharLongHashMap.size()']
OpenCharLongHashMapTest.testEquals(): ['OpenCharLongHashMap.put(char,long)', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'OpenCharLongHashMap.indexOfKey(char)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)', 'OpenCharLongHashMap.removeKey(char)', 'OpenCharLongHashMap.copy()', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharLongHashMap.equals(java.lang.Object)']
OpenCharLongHashMapTest.testKeysSortedByValue(): ['OpenCharLongHashMap.put(char,long)', 'CharArrayList.toArray(char[])', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.size()', 'OpenCharLongHashMap.indexOfKey(char)', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)', 'OpenCharLongHashMap.keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'OpenCharLongHashMap.removeKey(char)', 'OpenCharLongHashMap.rehash(int)', 'OpenCharLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)']
OpenCharLongHashMapTest.testPairsSortedByKey(): ['OpenCharLongHashMap.put(char,long)', 'LongArrayList.get(int)', 'OpenCharLongHashMap.indexOfInsertion(char)', 'OpenCharLongHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.size()', 'OpenCharLongHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.clear()', 'OpenCharLongHashMap.rehash(int)', 'LongArrayList.size()', 'CharArrayList.get(int)', 'CharArrayList.clear()', 'OpenCharLongHashMap.pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.LongArrayList)', 'OpenCharLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharLongHashMap.pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.LongArrayList)']
OpenCharFloatHashMapTest.testConstructors(): ['OpenCharFloatHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenCharFloatHashMapTest.testEnsureCapacity(): ['OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'PrimeFinder.nextPrime(int)', 'OpenCharFloatHashMap.nextPrime(int)', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.getInternalFactors(int[],double[],double[])', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)', 'OpenCharFloatHashMap.ensureCapacity(int)']
OpenCharFloatHashMapTest.testClear(): ['OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.size()', 'OpenCharFloatHashMap.indexOfKey(char)', 'OpenCharFloatHashMap.get(char)', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'OpenCharFloatHashMap.trimToSize()', 'OpenCharFloatHashMap.put(char,float)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'OpenCharFloatHashMap.nextPrime(int)', 'OpenCharFloatHashMap.clear()', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)']
OpenCharFloatHashMapTest.testClone(): ['OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.clone()', 'OpenCharFloatHashMap.size()', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'OpenCharFloatHashMap.trimToSize()', 'OpenCharFloatHashMap.put(char,float)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'OpenCharFloatHashMap.nextPrime(int)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.clear()', 'HashFunctions.hash(char)', 'AbstractCharFloatMap.clone()', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)']
OpenCharFloatHashMapTest.testContainsKey(): ['OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.containsKey(char)', 'OpenCharFloatHashMap.indexOfKey(char)', 'OpenCharFloatHashMap.put(char,float)']
OpenCharFloatHashMapTest.testContainValue(): ['OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.indexOfValue(float)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.containsValue(float)', 'OpenCharFloatHashMap.put(char,float)']
OpenCharFloatHashMapTest.testForEachKey(): ['OpenCharFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.toArray(char[])', 'OpenCharFloatHashMap.removeKey(char)', 'OpenCharFloatHashMap.forEachKey(org.apache.mahout.math.function.CharProcedure)', 'CharProcedure.apply(char)', 'CharArrayList.size()', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'OpenCharFloatHashMap.put(char,float)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.indexOfKey(char)']
OpenCharFloatHashMapTest.testForEachPair(): ['OpenCharFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.forEachPair(org.apache.mahout.math.function.CharFloatProcedure)', 'OpenCharFloatHashMap.removeKey(char)', 'OpenCharFloatHashMap.indexOfKey(char)', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'OpenCharFloatHashMap.put(char,float)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'CharFloatProcedure.apply(char,float)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)']
OpenCharFloatHashMapTest.testGet(): ['OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.get(char)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.indexOfKey(char)', 'OpenCharFloatHashMap.put(char,float)']
OpenCharFloatHashMapTest.testAdjustOrPutValue(): ['OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'OpenCharFloatHashMap.indexOfKey(char)', 'OpenCharFloatHashMap.adjustOrPutValue(char,float,float)', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.get(char)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.put(char,float)']
OpenCharFloatHashMapTest.testKeys(): ['OpenCharFloatHashMap.rehash(int)', 'CharArrayList.elements()', 'OpenCharFloatHashMap.keys()', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'OpenCharFloatHashMap.put(char,float)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'CharArrayList.get(int)', 'OpenCharFloatHashMap.keys(org.apache.mahout.math.list.CharArrayList)', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)']
OpenCharFloatHashMapTest.testPairsMatching(): ['OpenCharFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharFloatHashMap.rehash(int)', 'Arrays.ensureCapacity(float[],int)', 'FloatArrayList.ensureCapacity(int)', 'OpenCharFloatHashMap.removeKey(char)', 'FloatArrayList.size()', 'OpenCharFloatHashMap.put(char,float)', 'CharArrayList.sort()', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'CharArrayList.get(int)', 'FloatArrayList.sort()', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.indexOfKey(char)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.ensureCapacity(int)', 'FloatArrayList.clear()', 'FloatArrayList.add(float)', 'CharArrayList.size()', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.clear()', 'FloatArrayList.get(int)', 'HashFunctions.hash(char)', 'CharFloatProcedure.apply(char,float)', 'OpenCharFloatHashMap.pairsMatching(org.apache.mahout.math.function.CharFloatProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.FloatArrayList)', 'CharArrayList.add(char)']
OpenCharFloatHashMapTest.testValues(): ['OpenCharFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)', 'OpenCharFloatHashMap.removeKey(char)', 'FloatArrayList.setSize(int)', 'FloatArrayList.size()', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'FloatArrayList.elements()', 'OpenCharFloatHashMap.put(char,float)', 'OpenCharFloatHashMap.values(org.apache.mahout.math.list.FloatArrayList)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'FloatArrayList.sort()', 'FloatArrayList.get(int)', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.indexOfKey(char)']
OpenCharFloatHashMapTest.testCopy(): ['OpenCharFloatHashMap.copy()', 'OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.size()', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'OpenCharFloatHashMap.trimToSize()', 'OpenCharFloatHashMap.put(char,float)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'OpenCharFloatHashMap.nextPrime(int)', 'OpenCharFloatHashMap.clear()', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)']
OpenCharFloatHashMapTest.testEquals(): ['OpenCharFloatHashMap.copy()', 'OpenCharFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharFloatHashMap.rehash(int)', 'OpenCharFloatHashMap.removeKey(char)', 'OpenCharFloatHashMap.indexOfKey(char)', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'OpenCharFloatHashMap.equals(java.lang.Object)', 'OpenCharFloatHashMap.put(char,float)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)']
OpenCharFloatHashMapTest.testKeysSortedByValue(): ['OpenCharFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharFloatHashMap.rehash(int)', 'CharArrayList.toArray(char[])', 'OpenCharFloatHashMap.removeKey(char)', 'OpenCharFloatHashMap.indexOfKey(char)', 'OpenCharFloatHashMap.keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList.size()', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'OpenCharFloatHashMap.put(char,float)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)']
OpenCharFloatHashMapTest.testPairsSortedByKey(): ['OpenCharFloatHashMap.rehash(int)', 'FloatArrayList.clear()', 'OpenCharFloatHashMap.pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.size()', 'OpenCharFloatHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.size()', 'OpenCharFloatHashMap.put(char,float)', 'OpenCharFloatHashMap.indexOfInsertion(char)', 'CharArrayList.get(int)', 'CharArrayList.clear()', 'OpenCharFloatHashMap.pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.get(int)', 'HashFunctions.hash(char)', 'OpenCharFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharFloatHashMap.chooseHighWaterMark(int,double)']
OpenLongFloatHashMapTest.testConstructors(): ['OpenLongFloatHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenLongFloatHashMapTest.testEnsureCapacity(): ['OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenLongFloatHashMap.nextPrime(int)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'OpenLongFloatHashMap.ensureCapacity(int)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.getInternalFactors(int[],double[],double[])', 'OpenLongFloatHashMap.rehash(int)']
OpenLongFloatHashMapTest.testClear(): ['OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongFloatHashMap.clear()', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'OpenLongFloatHashMap.trimToSize()', 'OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'OpenLongFloatHashMap.size()', 'OpenLongFloatHashMap.nextPrime(int)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'OpenLongFloatHashMap.get(long)', 'OpenLongFloatHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)']
OpenLongFloatHashMapTest.testClone(): ['OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongFloatHashMap.clear()', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'AbstractLongFloatMap.clone()', 'OpenLongFloatHashMap.trimToSize()', 'OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'OpenLongFloatHashMap.clone()', 'OpenLongFloatHashMap.size()', 'OpenLongFloatHashMap.nextPrime(int)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)']
OpenLongFloatHashMapTest.testContainsKey(): ['OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'OpenLongFloatHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.containsKey(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)']
OpenLongFloatHashMapTest.testContainValue(): ['OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongFloatHashMap.containsValue(float)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'OpenLongFloatHashMap.indexOfValue(float)', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)']
OpenLongFloatHashMapTest.testForEachKey(): ['OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.toArray(long[])', 'OpenLongFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'LongProcedure.apply(long)', 'OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.size()', 'OpenLongFloatHashMap.forEachKey(org.apache.mahout.math.function.LongProcedure)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'OpenLongFloatHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)', 'OpenLongFloatHashMap.removeKey(long)']
OpenLongFloatHashMapTest.testForEachPair(): ['OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongFloatHashMap.chooseShrinkCapacity(int,double,double)', 'LongFloatProcedure.apply(long,float)', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'OpenLongFloatHashMap.forEachPair(org.apache.mahout.math.function.LongFloatProcedure)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'OpenLongFloatHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)', 'OpenLongFloatHashMap.removeKey(long)']
OpenLongFloatHashMapTest.testGet(): ['OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'OpenLongFloatHashMap.get(long)', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'OpenLongFloatHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)']
OpenLongFloatHashMapTest.testAdjustOrPutValue(): ['OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'OpenLongFloatHashMap.get(long)', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'OpenLongFloatHashMap.indexOfKey(long)', 'OpenLongFloatHashMap.adjustOrPutValue(long,float,float)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)']
OpenLongFloatHashMapTest.testKeys(): ['LongArrayList.elements()', 'OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongFloatHashMap.keys()', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.get(int)', 'OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'OpenLongFloatHashMap.keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.sort()', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'HashFunctions.hash(long)', 'LongArrayList.setSize(int)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)']
OpenLongFloatHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.ensureCapacity(int)', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.get(int)', 'FloatArrayList.size()', 'OpenLongFloatHashMap.pairsMatching(org.apache.mahout.math.function.LongFloatProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.FloatArrayList)', 'LongArrayList.clear()', 'LongArrayList.size()', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'FloatArrayList.sort()', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'OpenLongFloatHashMap.chooseShrinkCapacity(int,double,double)', 'FloatArrayList.clear()', 'LongFloatProcedure.apply(long,float)', 'FloatArrayList.add(float)', 'OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.sort()', 'LongArrayList.ensureCapacity(int)', 'FloatArrayList.get(int)', 'OpenLongFloatHashMap.indexOfKey(long)', 'OpenLongFloatHashMap.rehash(int)', 'OpenLongFloatHashMap.removeKey(long)']
OpenLongFloatHashMapTest.testValues(): ['OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongFloatHashMap.values(org.apache.mahout.math.list.FloatArrayList)', 'OpenLongFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'FloatArrayList.setSize(int)', 'FloatArrayList.size()', 'FloatArrayList.elements()', 'OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'FloatArrayList.sort()', 'FloatArrayList.get(int)', 'OpenLongFloatHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)', 'OpenLongFloatHashMap.removeKey(long)']
OpenLongFloatHashMapTest.testCopy(): ['OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongFloatHashMap.copy()', 'OpenLongFloatHashMap.clear()', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'OpenLongFloatHashMap.trimToSize()', 'OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'OpenLongFloatHashMap.size()', 'OpenLongFloatHashMap.nextPrime(int)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)']
OpenLongFloatHashMapTest.testEquals(): ['OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongFloatHashMap.copy()', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'OpenLongFloatHashMap.equals(java.lang.Object)', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'OpenLongFloatHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)', 'OpenLongFloatHashMap.removeKey(long)']
OpenLongFloatHashMapTest.testKeysSortedByValue(): ['OpenLongFloatHashMap.keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.toArray(long[])', 'OpenLongFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.size()', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'OpenLongFloatHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)', 'OpenLongFloatHashMap.removeKey(long)']
OpenLongFloatHashMapTest.testPairsSortedByKey(): ['OpenLongFloatHashMap.pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.FloatArrayList)', 'OpenLongFloatHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.clear()', 'OpenLongFloatHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.get(int)', 'FloatArrayList.size()', 'OpenLongFloatHashMap.pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.FloatArrayList)', 'OpenLongFloatHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.clear()', 'LongArrayList.size()', 'OpenLongFloatHashMap.indexOfInsertion(long)', 'FloatArrayList.get(int)', 'HashFunctions.hash(long)', 'OpenLongFloatHashMap.put(long,float)', 'OpenLongFloatHashMap.rehash(int)']
OpenDoubleByteHashMapTest.testConstructors(): ['OpenDoubleByteHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenDoubleByteHashMapTest.testEnsureCapacity(): ['HashFunctions.hash(double)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenDoubleByteHashMap.nextPrime(int)', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.getInternalFactors(int[],double[],double[])', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'OpenDoubleByteHashMap.ensureCapacity(int)']
OpenDoubleByteHashMapTest.testClear(): ['HashFunctions.hash(double)', 'OpenDoubleByteHashMap.clear()', 'OpenDoubleByteHashMap.indexOfKey(double)', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.get(double)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.trimToSize()', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.nextPrime(int)', 'OpenDoubleByteHashMap.size()']
OpenDoubleByteHashMapTest.testClone(): ['HashFunctions.hash(double)', 'OpenDoubleByteHashMap.clear()', 'OpenDoubleByteHashMap.clone()', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.trimToSize()', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.nextPrime(int)', 'AbstractDoubleByteMap.clone()', 'OpenDoubleByteHashMap.size()']
OpenDoubleByteHashMapTest.testContainsKey(): ['HashFunctions.hash(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfKey(double)', 'OpenDoubleByteHashMap.containsKey(double)', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)']
OpenDoubleByteHashMapTest.testContainValue(): ['HashFunctions.hash(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.indexOfValue(byte)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'OpenDoubleByteHashMap.containsValue(byte)']
OpenDoubleByteHashMapTest.testForEachKey(): ['DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleByteHashMap.indexOfKey(double)', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleArrayList.size()', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.removeKey(double)', 'DoubleProcedure.apply(double)', 'OpenDoubleByteHashMap.forEachKey(org.apache.mahout.math.function.DoubleProcedure)']
OpenDoubleByteHashMapTest.testForEachPair(): ['HashFunctions.hash(double)', 'OpenDoubleByteHashMap.indexOfKey(double)', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleByteProcedure.apply(double,byte)', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.removeKey(double)', 'OpenDoubleByteHashMap.forEachPair(org.apache.mahout.math.function.DoubleByteProcedure)']
OpenDoubleByteHashMapTest.testGet(): ['HashFunctions.hash(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfKey(double)', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.get(double)', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)']
OpenDoubleByteHashMapTest.testAdjustOrPutValue(): ['HashFunctions.hash(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfKey(double)', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.adjustOrPutValue(double,byte,byte)', 'OpenDoubleByteHashMap.get(double)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)']
OpenDoubleByteHashMapTest.testKeys(): ['HashFunctions.hash(double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'DoubleArrayList.setSize(int)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.keys(org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.keys()']
OpenDoubleByteHashMapTest.testPairsMatching(): ['ByteArrayList.get(int)', 'DoubleArrayList.sort()', 'DoubleArrayList.add(double)', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleByteProcedure.apply(double,byte)', 'ByteArrayList.sort()', 'DoubleArrayList.size()', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'OpenDoubleByteHashMap.removeKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleByteHashMap.indexOfKey(double)', 'DoubleArrayList.get(int)', 'OpenDoubleByteHashMap.pairsMatching(org.apache.mahout.math.function.DoubleByteProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'OpenDoubleByteHashMap.put(double,byte)', 'DoubleArrayList.clear()', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleByteHashMapTest.testValues(): ['HashFunctions.hash(double)', 'OpenDoubleByteHashMap.indexOfKey(double)', 'ByteArrayList.get(int)', 'ByteArrayList.size()', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.setSize(int)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.sort()', 'OpenDoubleByteHashMap.values(org.apache.mahout.math.list.ByteArrayList)', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.removeKey(double)', 'ByteArrayList.elements()']
OpenDoubleByteHashMapTest.testCopy(): ['HashFunctions.hash(double)', 'OpenDoubleByteHashMap.clear()', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.trimToSize()', 'OpenDoubleByteHashMap.copy()', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.nextPrime(int)', 'OpenDoubleByteHashMap.size()']
OpenDoubleByteHashMapTest.testEquals(): ['HashFunctions.hash(double)', 'OpenDoubleByteHashMap.indexOfKey(double)', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleByteHashMap.equals(java.lang.Object)', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.copy()', 'OpenDoubleByteHashMap.removeKey(double)']
OpenDoubleByteHashMapTest.testKeysSortedByValue(): ['DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleByteHashMap.indexOfKey(double)', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleByteHashMap.keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList.size()', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleByteHashMap.removeKey(double)']
OpenDoubleByteHashMapTest.testPairsSortedByKey(): ['HashFunctions.hash(double)', 'DoubleArrayList.get(int)', 'ByteArrayList.get(int)', 'ByteArrayList.size()', 'OpenDoubleByteHashMap.rehash(int)', 'OpenDoubleByteHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleByteHashMap.pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ByteArrayList)', 'OpenDoubleByteHashMap.indexOfInsertion(double)', 'ByteArrayList.clear()', 'OpenDoubleByteHashMap.pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.ByteArrayList)', 'OpenDoubleByteHashMap.put(double,byte)', 'OpenDoubleByteHashMap.chooseLowWaterMark(int,double)', 'DoubleArrayList.clear()', 'DoubleArrayList.size()', 'OpenDoubleByteHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testConstructors(): ['PrimeFinder.nextPrime(int)', 'OpenIntIntHashMap.getInternalFactors(int[],double[],double[])']
OpenIntIntHashMapTest.testEnsureCapacity(): ['OpenIntIntHashMap.nextPrime(int)', 'OpenIntIntHashMap.rehash(int)', 'OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.getInternalFactors(int[],double[],double[])', 'OpenIntIntHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(int)']
OpenIntIntHashMapTest.testClear(): ['OpenIntIntHashMap.size()', 'OpenIntIntHashMap.nextPrime(int)', 'OpenIntIntHashMap.clear()', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'OpenIntIntHashMap.get(int)', 'OpenIntIntHashMap.trimToSize()', 'OpenIntIntHashMap.indexOfKey(int)', 'OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testClone(): ['OpenIntIntHashMap.size()', 'OpenIntIntHashMap.nextPrime(int)', 'OpenIntIntHashMap.clear()', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'OpenIntIntHashMap.trimToSize()', 'OpenIntIntHashMap.clone()', 'OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'HashFunctions.hash(int)', 'AbstractIntIntMap.clone()', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testContainsKey(): ['OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.containsKey(int)', 'OpenIntIntHashMap.rehash(int)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'OpenIntIntHashMap.indexOfKey(int)', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testContainValue(): ['OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.containsValue(int)', 'OpenIntIntHashMap.rehash(int)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'OpenIntIntHashMap.indexOfValue(int)', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testForEachKey(): ['OpenIntIntHashMap.removeKey(int)', 'OpenIntIntHashMap.forEachKey(org.apache.mahout.math.function.IntProcedure)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.toArray(int[])', 'OpenIntIntHashMap.indexOfKey(int)', 'IntArrayList.size()', 'IntProcedure.apply(int)', 'OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testForEachPair(): ['OpenIntIntHashMap.removeKey(int)', 'IntIntProcedure.apply(int,int)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'OpenIntIntHashMap.indexOfKey(int)', 'OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntIntHashMap.forEachPair(org.apache.mahout.math.function.IntIntProcedure)', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testGet(): ['OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.get(int)', 'OpenIntIntHashMap.indexOfKey(int)', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testAdjustOrPutValue(): ['OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.get(int)', 'OpenIntIntHashMap.indexOfKey(int)', 'OpenIntIntHashMap.adjustOrPutValue(int,int,int)', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testKeys(): ['OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.sort()', 'IntArrayList.elements()', 'IntArrayList.setSize(int)', 'OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'IntArrayList.get(int)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.keys(org.apache.mahout.math.list.IntArrayList)', 'OpenIntIntHashMap.keys()', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testPairsMatching(): ['OpenIntIntHashMap.removeKey(int)', 'IntIntProcedure.apply(int,int)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.sort()', 'OpenIntIntHashMap.indexOfKey(int)', 'IntArrayList.size()', 'IntArrayList.add(int)', 'OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'IntArrayList.get(int)', 'HashFunctions.hash(int)', 'IntArrayList.ensureCapacity(int)', 'OpenIntIntHashMap.pairsMatching(org.apache.mahout.math.function.IntIntProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.IntArrayList)', 'OpenIntIntHashMap.chooseShrinkCapacity(int,double,double)', 'Arrays.ensureCapacity(int[],int)', 'IntArrayList.clear()', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testValues(): ['OpenIntIntHashMap.removeKey(int)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.sort()', 'OpenIntIntHashMap.indexOfKey(int)', 'IntArrayList.elements()', 'IntArrayList.setSize(int)', 'IntArrayList.size()', 'OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'OpenIntIntHashMap.values(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.get(int)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testCopy(): ['OpenIntIntHashMap.size()', 'OpenIntIntHashMap.nextPrime(int)', 'OpenIntIntHashMap.clear()', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'OpenIntIntHashMap.trimToSize()', 'OpenIntIntHashMap.copy()', 'OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testEquals(): ['OpenIntIntHashMap.removeKey(int)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'OpenIntIntHashMap.indexOfKey(int)', 'OpenIntIntHashMap.copy()', 'OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'OpenIntIntHashMap.equals(java.lang.Object)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testKeysSortedByValue(): ['OpenIntIntHashMap.removeKey(int)', 'OpenIntIntHashMap.keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.toArray(int[])', 'OpenIntIntHashMap.indexOfKey(int)', 'IntArrayList.size()', 'OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenIntIntHashMapTest.testPairsSortedByKey(): ['OpenIntIntHashMap.indexOfInsertion(int)', 'OpenIntIntHashMap.rehash(int)', 'IntArrayList.get(int)', 'OpenIntIntHashMap.chooseHighWaterMark(int,double)', 'OpenIntIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntIntHashMap.pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.IntArrayList)', 'OpenIntIntHashMap.pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.clear()', 'IntArrayList.size()', 'OpenIntIntHashMap.put(int,int)', 'OpenIntIntHashMap.chooseGrowCapacity(int,double,double)']
OpenShortDoubleHashMapTest.testConstructors(): ['OpenShortDoubleHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenShortDoubleHashMapTest.testEnsureCapacity(): ['OpenShortDoubleHashMap.getInternalFactors(int[],double[],double[])', 'OpenShortDoubleHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenShortDoubleHashMap.rehash(int)', 'OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)', 'OpenShortDoubleHashMap.nextPrime(int)', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)']
OpenShortDoubleHashMapTest.testClear(): ['OpenShortDoubleHashMap.clear()', 'OpenShortDoubleHashMap.trimToSize()', 'OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenShortDoubleHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.indexOfKey(short)', 'OpenShortDoubleHashMap.nextPrime(int)', 'OpenShortDoubleHashMap.size()', 'OpenShortDoubleHashMap.get(short)', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)']
OpenShortDoubleHashMapTest.testClone(): ['OpenShortDoubleHashMap.clear()', 'OpenShortDoubleHashMap.trimToSize()', 'OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenShortDoubleHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.nextPrime(int)', 'OpenShortDoubleHashMap.size()', 'OpenShortDoubleHashMap.clone()', 'AbstractShortDoubleMap.clone()', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)']
OpenShortDoubleHashMapTest.testContainsKey(): ['OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenShortDoubleHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.indexOfKey(short)', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenShortDoubleHashMap.containsKey(short)']
OpenShortDoubleHashMapTest.testContainValue(): ['OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.containsValue(double)', 'OpenShortDoubleHashMap.rehash(int)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.indexOfValue(double)', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)']
OpenShortDoubleHashMapTest.testForEachKey(): ['OpenShortDoubleHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.size()', 'OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.toArray(short[])', 'OpenShortDoubleHashMap.rehash(int)', 'OpenShortDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.indexOfKey(short)', 'OpenShortDoubleHashMap.removeKey(short)', 'ShortProcedure.apply(short)', 'OpenShortDoubleHashMap.forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'HashFunctions.hash(short)']
OpenShortDoubleHashMapTest.testForEachPair(): ['OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenShortDoubleHashMap.rehash(int)', 'HashFunctions.hash(short)', 'ShortDoubleProcedure.apply(short,double)', 'OpenShortDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.indexOfKey(short)', 'OpenShortDoubleHashMap.removeKey(short)', 'OpenShortDoubleHashMap.forEachPair(org.apache.mahout.math.function.ShortDoubleProcedure)', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)']
OpenShortDoubleHashMapTest.testGet(): ['OpenShortDoubleHashMap.get(short)', 'OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.rehash(int)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.indexOfKey(short)', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)']
OpenShortDoubleHashMapTest.testAdjustOrPutValue(): ['OpenShortDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenShortDoubleHashMap.get(short)', 'OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.rehash(int)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenShortDoubleHashMap.adjustOrPutValue(short,double,double)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.indexOfKey(short)', 'HashFunctions.hash(short)']
OpenShortDoubleHashMapTest.testKeys(): ['OpenShortDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenShortDoubleHashMap.rehash(int)', 'OpenShortDoubleHashMap.keys()', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'ShortArrayList.elements()', 'OpenShortDoubleHashMap.keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.sort()', 'ShortArrayList.setSize(int)', 'ShortArrayList.get(int)', 'HashFunctions.hash(short)']
OpenShortDoubleHashMapTest.testPairsMatching(): ['OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'DoubleArrayList.sort()', 'DoubleArrayList.add(double)', 'ShortArrayList.clear()', 'OpenShortDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortDoubleHashMap.indexOfKey(short)', 'DoubleArrayList.size()', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.size()', 'OpenShortDoubleHashMap.rehash(int)', 'HashFunctions.hash(short)', 'DoubleArrayList.get(int)', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.removeKey(short)', 'ShortArrayList.sort()', 'DoubleArrayList.clear()', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)', 'OpenShortDoubleHashMap.pairsMatching(org.apache.mahout.math.function.ShortDoubleProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'ShortDoubleProcedure.apply(short,double)']
OpenShortDoubleHashMapTest.testValues(): ['OpenShortDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenShortDoubleHashMap.rehash(int)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenShortDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.indexOfKey(short)', 'OpenShortDoubleHashMap.removeKey(short)', 'DoubleArrayList.setSize(int)', 'DoubleArrayList.size()', 'OpenShortDoubleHashMap.values(org.apache.mahout.math.list.DoubleArrayList)', 'HashFunctions.hash(short)']
OpenShortDoubleHashMapTest.testCopy(): ['OpenShortDoubleHashMap.clear()', 'OpenShortDoubleHashMap.trimToSize()', 'OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenShortDoubleHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.nextPrime(int)', 'OpenShortDoubleHashMap.size()', 'OpenShortDoubleHashMap.copy()', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)']
OpenShortDoubleHashMapTest.testEquals(): ['OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenShortDoubleHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenShortDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.indexOfKey(short)', 'OpenShortDoubleHashMap.removeKey(short)', 'OpenShortDoubleHashMap.equals(java.lang.Object)', 'OpenShortDoubleHashMap.copy()', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)']
OpenShortDoubleHashMapTest.testKeysSortedByValue(): ['ShortArrayList.size()', 'OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.toArray(short[])', 'OpenShortDoubleHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenShortDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortDoubleHashMap.put(short,double)', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortDoubleHashMap.indexOfKey(short)', 'OpenShortDoubleHashMap.keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'OpenShortDoubleHashMap.removeKey(short)', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)']
OpenShortDoubleHashMapTest.testPairsSortedByKey(): ['ShortArrayList.size()', 'OpenShortDoubleHashMap.indexOfInsertion(short)', 'OpenShortDoubleHashMap.pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'OpenShortDoubleHashMap.rehash(int)', 'OpenShortDoubleHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)', 'DoubleArrayList.get(int)', 'OpenShortDoubleHashMap.put(short,double)', 'ShortArrayList.clear()', 'OpenShortDoubleHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.clear()', 'DoubleArrayList.size()', 'ShortArrayList.get(int)', 'OpenShortDoubleHashMap.pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'OpenShortDoubleHashMap.chooseLowWaterMark(int,double)']
OpenIntShortHashMapTest.testConstructors(): ['OpenIntShortHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenIntShortHashMapTest.testEnsureCapacity(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'PrimeFinder.nextPrime(int)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.nextPrime(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'OpenIntShortHashMap.getInternalFactors(int[],double[],double[])', 'OpenIntShortHashMap.ensureCapacity(int)']
OpenIntShortHashMapTest.testClear(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.trimToSize()', 'OpenIntShortHashMap.indexOfKey(int)', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntShortHashMap.size()', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.nextPrime(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'OpenIntShortHashMap.clear()', 'OpenIntShortHashMap.get(int)']
OpenIntShortHashMapTest.testClone(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.trimToSize()', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntShortHashMap.clone()', 'OpenIntShortHashMap.size()', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.nextPrime(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'AbstractIntShortMap.clone()', 'OpenIntShortHashMap.clear()']
OpenIntShortHashMapTest.testContainsKey(): ['OpenIntShortHashMap.containsKey(int)', 'OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.indexOfKey(int)', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)']
OpenIntShortHashMapTest.testContainValue(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'OpenIntShortHashMap.containsValue(short)', 'OpenIntShortHashMap.indexOfValue(short)']
OpenIntShortHashMapTest.testForEachKey(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.removeKey(int)', 'OpenIntShortHashMap.indexOfKey(int)', 'OpenIntShortHashMap.rehash(int)', 'IntArrayList.toArray(int[])', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.size()', 'IntProcedure.apply(int)', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'OpenIntShortHashMap.forEachKey(org.apache.mahout.math.function.IntProcedure)', 'OpenIntShortHashMap.chooseShrinkCapacity(int,double,double)']
OpenIntShortHashMapTest.testForEachPair(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.removeKey(int)', 'OpenIntShortHashMap.indexOfKey(int)', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'IntShortProcedure.apply(int,short)', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'OpenIntShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntShortHashMap.forEachPair(org.apache.mahout.math.function.IntShortProcedure)']
OpenIntShortHashMapTest.testGet(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.indexOfKey(int)', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'OpenIntShortHashMap.get(int)', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)']
OpenIntShortHashMapTest.testAdjustOrPutValue(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.indexOfKey(int)', 'OpenIntShortHashMap.adjustOrPutValue(int,short,short)', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'OpenIntShortHashMap.get(int)', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)']
OpenIntShortHashMapTest.testKeys(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.keys(org.apache.mahout.math.list.IntArrayList)', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.keys()', 'IntArrayList.sort()', 'IntArrayList.elements()', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.setSize(int)', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.get(int)', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)']
OpenIntShortHashMapTest.testPairsMatching(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.removeKey(int)', 'OpenIntShortHashMap.indexOfKey(int)', 'IntArrayList.sort()', 'ShortArrayList.clear()', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.size()', 'IntShortProcedure.apply(int,short)', 'IntArrayList.ensureCapacity(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'Arrays.ensureCapacity(int[],int)', 'IntArrayList.clear()', 'ShortArrayList.size()', 'OpenIntShortHashMap.rehash(int)', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'IntArrayList.add(int)', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.get(int)', 'OpenIntShortHashMap.put(int,short)', 'ShortArrayList.sort()', 'OpenIntShortHashMap.pairsMatching(org.apache.mahout.math.function.IntShortProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ShortArrayList)', 'HashFunctions.hash(int)', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)', 'OpenIntShortHashMap.chooseShrinkCapacity(int,double,double)']
OpenIntShortHashMapTest.testValues(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.removeKey(int)', 'ShortArrayList.size()', 'OpenIntShortHashMap.values(org.apache.mahout.math.list.ShortArrayList)', 'OpenIntShortHashMap.indexOfKey(int)', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.elements()', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntShortHashMap.put(int,short)', 'ShortArrayList.sort()', 'HashFunctions.hash(int)', 'ShortArrayList.setSize(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.get(int)', 'OpenIntShortHashMap.chooseShrinkCapacity(int,double,double)']
OpenIntShortHashMapTest.testCopy(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.trimToSize()', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'OpenIntShortHashMap.copy()', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntShortHashMap.size()', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.nextPrime(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'OpenIntShortHashMap.clear()']
OpenIntShortHashMapTest.testEquals(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.equals(java.lang.Object)', 'OpenIntShortHashMap.removeKey(int)', 'OpenIntShortHashMap.indexOfKey(int)', 'OpenIntShortHashMap.rehash(int)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'OpenIntShortHashMap.copy()', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'OpenIntShortHashMap.chooseShrinkCapacity(int,double,double)']
OpenIntShortHashMapTest.testKeysSortedByValue(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'OpenIntShortHashMap.removeKey(int)', 'OpenIntShortHashMap.indexOfKey(int)', 'OpenIntShortHashMap.rehash(int)', 'IntArrayList.toArray(int[])', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.size()', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'OpenIntShortHashMap.chooseShrinkCapacity(int,double,double)']
OpenIntShortHashMapTest.testPairsSortedByKey(): ['OpenIntShortHashMap.indexOfInsertion(int)', 'ShortArrayList.size()', 'OpenIntShortHashMap.rehash(int)', 'ShortArrayList.clear()', 'OpenIntShortHashMap.pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ShortArrayList)', 'OpenIntShortHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.size()', 'OpenIntShortHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.get(int)', 'OpenIntShortHashMap.put(int,short)', 'HashFunctions.hash(int)', 'OpenIntShortHashMap.pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.ShortArrayList)', 'OpenIntShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.get(int)', 'IntArrayList.clear()']
OpenShortCharHashMapTest.testConstructors(): ['OpenShortCharHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenShortCharHashMapTest.testEnsureCapacity(): ['OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.getInternalFactors(int[],double[],double[])', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'OpenShortCharHashMap.nextPrime(int)']
OpenShortCharHashMapTest.testClear(): ['OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.trimToSize()', 'OpenShortCharHashMap.get(short)', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.clear()', 'OpenShortCharHashMap.nextPrime(int)', 'OpenShortCharHashMap.put(short,char)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'OpenShortCharHashMap.size()', 'OpenShortCharHashMap.indexOfKey(short)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortCharHashMapTest.testClone(): ['OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.trimToSize()', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.clear()', 'OpenShortCharHashMap.nextPrime(int)', 'OpenShortCharHashMap.put(short,char)', 'AbstractShortCharMap.clone()', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'OpenShortCharHashMap.size()', 'OpenShortCharHashMap.clone()', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortCharHashMapTest.testContainsKey(): ['OpenShortCharHashMap.put(short,char)', 'OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.containsKey(short)', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.indexOfKey(short)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortCharHashMapTest.testContainValue(): ['OpenShortCharHashMap.put(short,char)', 'OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.indexOfValue(char)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)', 'OpenShortCharHashMap.containsValue(char)']
OpenShortCharHashMapTest.testForEachKey(): ['OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.chooseShrinkCapacity(int,double,double)', 'ShortArrayList.size()', 'OpenShortCharHashMap.removeKey(short)', 'ShortArrayList.toArray(short[])', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'OpenShortCharHashMap.put(short,char)', 'ShortProcedure.apply(short)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'OpenShortCharHashMap.indexOfKey(short)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortCharHashMapTest.testForEachPair(): ['OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortCharHashMap.removeKey(short)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.put(short,char)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'OpenShortCharHashMap.forEachPair(org.apache.mahout.math.function.ShortCharProcedure)', 'OpenShortCharHashMap.indexOfKey(short)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)', 'ShortCharProcedure.apply(short,char)']
OpenShortCharHashMapTest.testGet(): ['OpenShortCharHashMap.put(short,char)', 'OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.get(short)', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.indexOfKey(short)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortCharHashMapTest.testAdjustOrPutValue(): ['OpenShortCharHashMap.put(short,char)', 'OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.adjustOrPutValue(short,char,char)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.get(short)', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.indexOfKey(short)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortCharHashMapTest.testKeys(): ['OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'ShortArrayList.elements()', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.keys()', 'OpenShortCharHashMap.put(short,char)', 'ShortArrayList.sort()', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.setSize(int)', 'ShortArrayList.get(int)', 'OpenShortCharHashMap.keys(org.apache.mahout.math.list.ShortArrayList)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortCharHashMapTest.testPairsMatching(): ['OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.chooseShrinkCapacity(int,double,double)', 'ShortArrayList.clear()', 'CharArrayList.sort()', 'CharArrayList.add(char)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.get(int)', 'OpenShortCharHashMap.pairsMatching(org.apache.mahout.math.function.ShortCharProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenShortCharHashMap.indexOfKey(short)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.size()', 'CharArrayList.ensureCapacity(int)', 'OpenShortCharHashMap.removeKey(short)', 'ShortArrayList.ensureCapacity(int)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'Arrays.ensureCapacity(short[],int)', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.size()', 'OpenShortCharHashMap.put(short,char)', 'ShortArrayList.sort()', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.clear()', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)', 'HashFunctions.hash(short)', 'ShortCharProcedure.apply(short,char)']
OpenShortCharHashMapTest.testValues(): ['OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortCharHashMap.removeKey(short)', 'CharArrayList.elements()', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.size()', 'OpenShortCharHashMap.put(short,char)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.get(int)', 'OpenShortCharHashMap.values(org.apache.mahout.math.list.CharArrayList)', 'OpenShortCharHashMap.indexOfKey(short)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortCharHashMapTest.testCopy(): ['OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.trimToSize()', 'OpenShortCharHashMap.copy()', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.clear()', 'OpenShortCharHashMap.nextPrime(int)', 'OpenShortCharHashMap.put(short,char)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'OpenShortCharHashMap.size()', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortCharHashMapTest.testEquals(): ['OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortCharHashMap.removeKey(short)', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.copy()', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.put(short,char)', 'OpenShortCharHashMap.equals(java.lang.Object)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'OpenShortCharHashMap.indexOfKey(short)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortCharHashMapTest.testKeysSortedByValue(): ['OpenShortCharHashMap.rehash(int)', 'OpenShortCharHashMap.chooseShrinkCapacity(int,double,double)', 'ShortArrayList.size()', 'OpenShortCharHashMap.removeKey(short)', 'ShortArrayList.toArray(short[])', 'OpenShortCharHashMap.indexOfInsertion(short)', 'OpenShortCharHashMap.keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortCharHashMap.put(short,char)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'OpenShortCharHashMap.indexOfKey(short)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortCharHashMapTest.testPairsSortedByKey(): ['OpenShortCharHashMap.rehash(int)', 'ShortArrayList.size()', 'OpenShortCharHashMap.indexOfInsertion(short)', 'ShortArrayList.clear()', 'OpenShortCharHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.size()', 'OpenShortCharHashMap.put(short,char)', 'OpenShortCharHashMap.pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenShortCharHashMap.pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenShortCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.get(int)', 'CharArrayList.clear()', 'ShortArrayList.get(int)', 'OpenShortCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortObjectHashMapTest.testConstructors(): ['PrimeFinder.nextPrime(int)', 'OpenShortObjectHashMap.getInternalFactors(int[],double[],double[])']
OpenShortObjectHashMapTest.testEnsureCapacity(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'OpenShortObjectHashMap.nextPrime(int)', 'OpenShortObjectHashMap.indexOfInsertion(short)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.getInternalFactors(int[],double[],double[])']
OpenShortObjectHashMapTest.testClear(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.trimToSize()', 'OpenShortObjectHashMap.indexOfKey(short)', 'OpenShortObjectHashMap.get(short)', 'OpenShortObjectHashMap.containsKey(short)', 'OpenShortObjectHashMap.size()', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'OpenShortObjectHashMap.clear()', 'OpenShortObjectHashMap.nextPrime(int)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testClone(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.trimToSize()', 'AbstractShortObjectMap.clone()', 'OpenShortObjectHashMap.size()', 'OpenShortObjectHashMap.clone()', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'OpenShortObjectHashMap.clear()', 'OpenShortObjectHashMap.nextPrime(int)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testContainsKey(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.indexOfKey(short)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'OpenShortObjectHashMap.containsKey(short)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testContainValue(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.indexOfValue(java.lang.Object)', 'OpenShortObjectHashMap.containsValue(java.lang.Object)', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testForEachKey(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.size()', 'ShortArrayList.toArray(short[])', 'OpenShortObjectHashMap.indexOfKey(short)', 'OpenShortObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortObjectHashMap.removeKey(short)', 'OpenShortObjectHashMap.forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'ShortProcedure.apply(short)', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testForEachPair(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.indexOfKey(short)', 'OpenShortObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortObjectHashMap.removeKey(short)', 'OpenShortObjectHashMap.forEachPair(org.apache.mahout.math.function.ShortObjectProcedure)', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'ShortObjectProcedure.apply(short,java.lang.Object)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testGet(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.indexOfKey(short)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'OpenShortObjectHashMap.get(short)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testKeys(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.keys()', 'ShortArrayList.elements()', 'ShortArrayList.sort()', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.setSize(int)', 'OpenShortObjectHashMap.keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.get(int)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testPairsMatching(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.size()', 'OpenShortObjectHashMap.indexOfKey(short)', 'ShortArrayList.ensureCapacity(int)', 'OpenShortObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortObjectHashMap.pairsMatching(org.apache.mahout.math.function.ShortObjectProcedure,org.apache.mahout.math.list.ShortArrayList,java.util.List)', 'Arrays.ensureCapacity(short[],int)', 'OpenShortObjectHashMap.removeKey(short)', 'ShortArrayList.clear()', 'ShortArrayList.sort()', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'ShortObjectProcedure.apply(short,java.lang.Object)', 'ShortArrayList.get(int)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'ShortArrayList.add(short)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testValues(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.indexOfKey(short)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'OpenShortObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.removeKey(short)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortObjectHashMap.values(java.util.List)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testCopy(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.trimToSize()', 'OpenShortObjectHashMap.size()', 'OpenShortObjectHashMap.copy()', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'OpenShortObjectHashMap.clear()', 'OpenShortObjectHashMap.nextPrime(int)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testEquals(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.indexOfKey(short)', 'OpenShortObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortObjectHashMap.removeKey(short)', 'OpenShortObjectHashMap.copy()', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'OpenShortObjectHashMap.equals(java.lang.Object)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testKeysSortedByValue(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.size()', 'ShortArrayList.toArray(short[])', 'OpenShortObjectHashMap.indexOfKey(short)', 'OpenShortObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortObjectHashMap.removeKey(short)', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'OpenShortObjectHashMap.keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testPairsSortedByKey(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.size()', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.get(int)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortObjectHashMap.pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,java.util.List)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenShortObjectHashMapTest.testPairsSortedByValue(): ['OpenShortObjectHashMap.chooseLowWaterMark(int,double)', 'OpenShortObjectHashMap.rehash(int)', 'OpenShortObjectHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.get(int)', 'OpenShortObjectHashMap.pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,java.util.List)', 'OpenShortObjectHashMap.put(short,java.lang.Object)', 'OpenShortObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortObjectHashMap.indexOfInsertion(short)']
OpenLongCharHashMapTest.testConstructors(): ['OpenLongCharHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenLongCharHashMapTest.testEnsureCapacity(): ['PrimeFinder.nextPrime(int)', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.getInternalFactors(int[],double[],double[])', 'OpenLongCharHashMap.nextPrime(int)', 'HashFunctions.hash(long)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.ensureCapacity(int)']
OpenLongCharHashMapTest.testClear(): ['OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.get(long)', 'OpenLongCharHashMap.size()', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'OpenLongCharHashMap.indexOfKey(long)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)', 'OpenLongCharHashMap.trimToSize()', 'OpenLongCharHashMap.nextPrime(int)', 'OpenLongCharHashMap.clear()']
OpenLongCharHashMapTest.testClone(): ['OpenLongCharHashMap.clone()', 'OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'AbstractLongCharMap.clone()', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.size()', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)', 'OpenLongCharHashMap.trimToSize()', 'OpenLongCharHashMap.nextPrime(int)', 'OpenLongCharHashMap.clear()']
OpenLongCharHashMapTest.testContainsKey(): ['OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.indexOfKey(long)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.containsKey(long)']
OpenLongCharHashMapTest.testContainValue(): ['OpenLongCharHashMap.containsValue(char)', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.indexOfValue(char)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)']
OpenLongCharHashMapTest.testForEachKey(): ['LongArrayList.toArray(long[])', 'OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.removeKey(long)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.chooseShrinkCapacity(int,double,double)', 'LongProcedure.apply(long)', 'OpenLongCharHashMap.forEachKey(org.apache.mahout.math.function.LongProcedure)', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.size()', 'OpenLongCharHashMap.indexOfKey(long)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)']
OpenLongCharHashMapTest.testForEachPair(): ['OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.removeKey(long)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.forEachPair(org.apache.mahout.math.function.LongCharProcedure)', 'OpenLongCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'OpenLongCharHashMap.indexOfKey(long)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)', 'LongCharProcedure.apply(long,char)']
OpenLongCharHashMapTest.testGet(): ['OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.indexOfKey(long)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.get(long)']
OpenLongCharHashMapTest.testAdjustOrPutValue(): ['OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'OpenLongCharHashMap.adjustOrPutValue(long,char,char)', 'OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.indexOfKey(long)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.get(long)']
OpenLongCharHashMapTest.testKeys(): ['LongArrayList.elements()', 'OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.keys()', 'LongArrayList.get(int)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.sort()', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'OpenLongCharHashMap.keys(org.apache.mahout.math.list.LongArrayList)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)', 'LongArrayList.setSize(int)']
OpenLongCharHashMapTest.testPairsMatching(): ['OpenLongCharHashMap.removeKey(long)', 'LongArrayList.get(int)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.pairsMatching(org.apache.mahout.math.function.LongCharProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'CharArrayList.sort()', 'LongArrayList.clear()', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.size()', 'CharArrayList.get(int)', 'OpenLongCharHashMap.indexOfKey(long)', 'HashFunctions.hash(long)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'CharArrayList.ensureCapacity(int)', 'OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.size()', 'OpenLongCharHashMap.chooseShrinkCapacity(int,double,double)', 'LongArrayList.sort()', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.clear()', 'LongArrayList.ensureCapacity(int)', 'OpenLongCharHashMap.put(long,char)', 'LongCharProcedure.apply(long,char)', 'CharArrayList.add(char)']
OpenLongCharHashMapTest.testValues(): ['CharArrayList.elements()', 'OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.removeKey(long)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.values(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList.size()', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.get(int)', 'OpenLongCharHashMap.indexOfKey(long)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)']
OpenLongCharHashMapTest.testCopy(): ['OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.size()', 'OpenLongCharHashMap.copy()', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)', 'OpenLongCharHashMap.trimToSize()', 'OpenLongCharHashMap.nextPrime(int)', 'OpenLongCharHashMap.clear()']
OpenLongCharHashMapTest.testEquals(): ['OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.removeKey(long)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongCharHashMap.copy()', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'OpenLongCharHashMap.equals(java.lang.Object)', 'OpenLongCharHashMap.indexOfKey(long)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)']
OpenLongCharHashMapTest.testKeysSortedByValue(): ['LongArrayList.toArray(long[])', 'OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.removeKey(long)', 'OpenLongCharHashMap.rehash(int)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.size()', 'OpenLongCharHashMap.indexOfKey(long)', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)', 'OpenLongCharHashMap.keysSortedByValue(org.apache.mahout.math.list.LongArrayList)']
OpenLongCharHashMapTest.testPairsSortedByKey(): ['OpenLongCharHashMap.chooseHighWaterMark(int,double)', 'OpenLongCharHashMap.pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.CharArrayList)', 'LongArrayList.get(int)', 'OpenLongCharHashMap.rehash(int)', 'CharArrayList.size()', 'OpenLongCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongCharHashMap.indexOfInsertion(long)', 'LongArrayList.clear()', 'OpenLongCharHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.size()', 'CharArrayList.get(int)', 'CharArrayList.clear()', 'OpenLongCharHashMap.put(long,char)', 'HashFunctions.hash(long)', 'OpenLongCharHashMap.pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.CharArrayList)']
OpenShortShortHashMapTest.testConstructors(): ['OpenShortShortHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenShortShortHashMapTest.testEnsureCapacity(): ['OpenShortShortHashMap.nextPrime(int)', 'OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenShortShortHashMap.getInternalFactors(int[],double[],double[])', 'HashFunctions.hash(short)', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.ensureCapacity(int)', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.rehash(int)']
OpenShortShortHashMapTest.testClear(): ['OpenShortShortHashMap.clear()', 'OpenShortShortHashMap.get(short)', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.size()', 'OpenShortShortHashMap.rehash(int)', 'OpenShortShortHashMap.nextPrime(int)', 'OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'OpenShortShortHashMap.indexOfKey(short)', 'OpenShortShortHashMap.trimToSize()', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortShortHashMapTest.testClone(): ['OpenShortShortHashMap.clone()', 'OpenShortShortHashMap.clear()', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.size()', 'OpenShortShortHashMap.rehash(int)', 'OpenShortShortHashMap.nextPrime(int)', 'OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'AbstractShortShortMap.clone()', 'OpenShortShortHashMap.trimToSize()', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortShortHashMapTest.testContainsKey(): ['OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'OpenShortShortHashMap.indexOfKey(short)', 'HashFunctions.hash(short)', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.containsKey(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.rehash(int)']
OpenShortShortHashMapTest.testContainValue(): ['OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.containsValue(short)', 'OpenShortShortHashMap.indexOfValue(short)', 'OpenShortShortHashMap.rehash(int)']
OpenShortShortHashMapTest.testForEachKey(): ['OpenShortShortHashMap.forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'ShortArrayList.size()', 'ShortArrayList.toArray(short[])', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.rehash(int)', 'ShortProcedure.apply(short)', 'OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'OpenShortShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortShortHashMap.indexOfKey(short)', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.removeKey(short)', 'HashFunctions.hash(short)']
OpenShortShortHashMapTest.testForEachPair(): ['OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.forEachPair(org.apache.mahout.math.function.ShortShortProcedure)', 'OpenShortShortHashMap.rehash(int)', 'OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'OpenShortShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortShortHashMap.indexOfKey(short)', 'ShortShortProcedure.apply(short,short)', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.removeKey(short)', 'HashFunctions.hash(short)']
OpenShortShortHashMapTest.testGet(): ['OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'OpenShortShortHashMap.indexOfKey(short)', 'OpenShortShortHashMap.get(short)', 'HashFunctions.hash(short)', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.rehash(int)']
OpenShortShortHashMapTest.testAdjustOrPutValue(): ['OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'OpenShortShortHashMap.indexOfKey(short)', 'OpenShortShortHashMap.adjustOrPutValue(short,short,short)', 'OpenShortShortHashMap.get(short)', 'HashFunctions.hash(short)', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.rehash(int)']
OpenShortShortHashMapTest.testKeys(): ['ShortArrayList.elements()', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.rehash(int)', 'OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.sort()', 'OpenShortShortHashMap.keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.setSize(int)', 'ShortArrayList.get(int)', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.keys()', 'HashFunctions.hash(short)']
OpenShortShortHashMapTest.testPairsMatching(): ['ShortArrayList.size()', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'ShortArrayList.clear()', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.rehash(int)', 'OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'OpenShortShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortShortHashMap.indexOfKey(short)', 'ShortArrayList.sort()', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.get(int)', 'OpenShortShortHashMap.pairsMatching(org.apache.mahout.math.function.ShortShortProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.add(short)', 'ShortShortProcedure.apply(short,short)', 'OpenShortShortHashMap.removeKey(short)', 'HashFunctions.hash(short)']
OpenShortShortHashMapTest.testValues(): ['ShortArrayList.size()', 'HashFunctions.hash(short)', 'ShortArrayList.elements()', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.rehash(int)', 'OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'OpenShortShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortShortHashMap.indexOfKey(short)', 'ShortArrayList.sort()', 'ShortArrayList.setSize(int)', 'ShortArrayList.get(int)', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.removeKey(short)', 'OpenShortShortHashMap.values(org.apache.mahout.math.list.ShortArrayList)']
OpenShortShortHashMapTest.testCopy(): ['OpenShortShortHashMap.clear()', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.size()', 'OpenShortShortHashMap.rehash(int)', 'OpenShortShortHashMap.nextPrime(int)', 'OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'OpenShortShortHashMap.copy()', 'OpenShortShortHashMap.trimToSize()', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortShortHashMapTest.testEquals(): ['OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.rehash(int)', 'OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'OpenShortShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortShortHashMap.indexOfKey(short)', 'OpenShortShortHashMap.equals(java.lang.Object)', 'OpenShortShortHashMap.copy()', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.removeKey(short)', 'HashFunctions.hash(short)']
OpenShortShortHashMapTest.testKeysSortedByValue(): ['ShortArrayList.size()', 'ShortArrayList.toArray(short[])', 'OpenShortShortHashMap.keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.rehash(int)', 'OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'OpenShortShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortShortHashMap.indexOfKey(short)', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.removeKey(short)', 'HashFunctions.hash(short)']
OpenShortShortHashMapTest.testPairsSortedByKey(): ['OpenShortShortHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.size()', 'HashFunctions.hash(short)', 'OpenShortShortHashMap.chooseLowWaterMark(int,double)', 'OpenShortShortHashMap.pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.get(int)', 'ShortArrayList.clear()', 'OpenShortShortHashMap.indexOfInsertion(short)', 'OpenShortShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortShortHashMap.put(short,short)', 'OpenShortShortHashMap.pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ShortArrayList)', 'OpenShortShortHashMap.rehash(int)']
OpenFloatByteHashMapTest.testConstructors(): ['OpenFloatByteHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenFloatByteHashMapTest.testEnsureCapacity(): ['OpenFloatByteHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'OpenFloatByteHashMap.getInternalFactors(int[],double[],double[])', 'OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.nextPrime(int)', 'HashFunctions.hash(float)']
OpenFloatByteHashMapTest.testClear(): ['OpenFloatByteHashMap.get(float)', 'OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.size()', 'OpenFloatByteHashMap.trimToSize()', 'OpenFloatByteHashMap.indexOfKey(float)', 'OpenFloatByteHashMap.nextPrime(int)', 'OpenFloatByteHashMap.clear()', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testClone(): ['OpenFloatByteHashMap.clone()', 'OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.size()', 'AbstractFloatByteMap.clone()', 'OpenFloatByteHashMap.trimToSize()', 'OpenFloatByteHashMap.nextPrime(int)', 'OpenFloatByteHashMap.clear()', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testContainsKey(): ['OpenFloatByteHashMap.indexOfKey(float)', 'OpenFloatByteHashMap.containsKey(float)', 'OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testContainValue(): ['OpenFloatByteHashMap.containsValue(byte)', 'OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.indexOfValue(byte)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testForEachKey(): ['OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.removeKey(float)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList.size()', 'OpenFloatByteHashMap.chooseShrinkCapacity(int,double,double)', 'FloatProcedure.apply(float)', 'OpenFloatByteHashMap.indexOfKey(float)', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'FloatArrayList.toArray(float[])', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testForEachPair(): ['OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.removeKey(float)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatByteHashMap.indexOfKey(float)', 'OpenFloatByteHashMap.forEachPair(org.apache.mahout.math.function.FloatByteProcedure)', 'FloatByteProcedure.apply(float,byte)', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testGet(): ['OpenFloatByteHashMap.get(float)', 'OpenFloatByteHashMap.indexOfKey(float)', 'OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testAdjustOrPutValue(): ['OpenFloatByteHashMap.get(float)', 'OpenFloatByteHashMap.indexOfKey(float)', 'OpenFloatByteHashMap.adjustOrPutValue(float,byte,byte)', 'OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testKeys(): ['OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.rehash(int)', 'FloatArrayList.setSize(int)', 'FloatArrayList.elements()', 'OpenFloatByteHashMap.keys()', 'FloatArrayList.get(int)', 'FloatArrayList.sort()', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.keys(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'FloatArrayList.ensureCapacity(int)', 'ByteArrayList.get(int)', 'OpenFloatByteHashMap.rehash(int)', 'FloatArrayList.size()', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'ByteArrayList.sort()', 'FloatArrayList.sort()', 'FloatByteProcedure.apply(float,byte)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)', 'OpenFloatByteHashMap.pairsMatching(org.apache.mahout.math.function.FloatByteProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ByteArrayList)', 'FloatArrayList.clear()', 'OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.removeKey(float)', 'FloatArrayList.add(float)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'OpenFloatByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatByteHashMap.indexOfKey(float)', 'FloatArrayList.get(int)', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)']
OpenFloatByteHashMapTest.testValues(): ['ByteArrayList.get(int)', 'OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.removeKey(float)', 'OpenFloatByteHashMap.rehash(int)', 'ByteArrayList.size()', 'ByteArrayList.setSize(int)', 'OpenFloatByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatByteHashMap.values(org.apache.mahout.math.list.ByteArrayList)', 'OpenFloatByteHashMap.indexOfKey(float)', 'ByteArrayList.sort()', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'ByteArrayList.elements()', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testCopy(): ['OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.size()', 'OpenFloatByteHashMap.trimToSize()', 'OpenFloatByteHashMap.nextPrime(int)', 'OpenFloatByteHashMap.copy()', 'OpenFloatByteHashMap.clear()', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testEquals(): ['OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.removeKey(float)', 'OpenFloatByteHashMap.equals(java.lang.Object)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatByteHashMap.indexOfKey(float)', 'OpenFloatByteHashMap.copy()', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testKeysSortedByValue(): ['OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.removeKey(float)', 'OpenFloatByteHashMap.rehash(int)', 'OpenFloatByteHashMap.keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.size()', 'OpenFloatByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatByteHashMap.indexOfKey(float)', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'FloatArrayList.toArray(float[])', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenFloatByteHashMapTest.testPairsSortedByKey(): ['FloatArrayList.clear()', 'ByteArrayList.get(int)', 'OpenFloatByteHashMap.indexOfInsertion(float)', 'OpenFloatByteHashMap.rehash(int)', 'ByteArrayList.size()', 'FloatArrayList.size()', 'ByteArrayList.clear()', 'FloatArrayList.get(int)', 'OpenFloatByteHashMap.chooseLowWaterMark(int,double)', 'OpenFloatByteHashMap.pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ByteArrayList)', 'OpenFloatByteHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatByteHashMap.pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ByteArrayList)', 'OpenFloatByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatByteHashMap.put(float,byte)']
OpenCharByteHashMapTest.testConstructors(): ['OpenCharByteHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenCharByteHashMapTest.testEnsureCapacity(): ['OpenCharByteHashMap.ensureCapacity(int)', 'OpenCharByteHashMap.nextPrime(int)', 'PrimeFinder.nextPrime(int)', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.getInternalFactors(int[],double[],double[])', 'OpenCharByteHashMap.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)']
OpenCharByteHashMapTest.testClear(): ['OpenCharByteHashMap.nextPrime(int)', 'OpenCharByteHashMap.trimToSize()', 'OpenCharByteHashMap.clear()', 'OpenCharByteHashMap.rehash(int)', 'OpenCharByteHashMap.indexOfKey(char)', 'OpenCharByteHashMap.get(char)', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)', 'OpenCharByteHashMap.size()']
OpenCharByteHashMapTest.testClone(): ['OpenCharByteHashMap.nextPrime(int)', 'OpenCharByteHashMap.trimToSize()', 'OpenCharByteHashMap.clear()', 'OpenCharByteHashMap.rehash(int)', 'AbstractCharByteMap.clone()', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.clone()', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)', 'OpenCharByteHashMap.size()']
OpenCharByteHashMapTest.testContainsKey(): ['OpenCharByteHashMap.containsKey(char)', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharByteHashMap.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.indexOfKey(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)']
OpenCharByteHashMapTest.testContainValue(): ['OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.indexOfValue(byte)', 'OpenCharByteHashMap.rehash(int)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.containsValue(byte)', 'OpenCharByteHashMap.put(char,byte)']
OpenCharByteHashMapTest.testForEachKey(): ['OpenCharByteHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.toArray(char[])', 'OpenCharByteHashMap.removeKey(char)', 'OpenCharByteHashMap.rehash(int)', 'CharProcedure.apply(char)', 'OpenCharByteHashMap.indexOfKey(char)', 'CharArrayList.size()', 'OpenCharByteHashMap.forEachKey(org.apache.mahout.math.function.CharProcedure)', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)']
OpenCharByteHashMapTest.testForEachPair(): ['OpenCharByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharByteHashMap.removeKey(char)', 'OpenCharByteHashMap.rehash(int)', 'OpenCharByteHashMap.indexOfKey(char)', 'OpenCharByteHashMap.forEachPair(org.apache.mahout.math.function.CharByteProcedure)', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'CharByteProcedure.apply(char,byte)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)']
OpenCharByteHashMapTest.testGet(): ['OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharByteHashMap.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.indexOfKey(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)', 'OpenCharByteHashMap.get(char)']
OpenCharByteHashMapTest.testAdjustOrPutValue(): ['OpenCharByteHashMap.adjustOrPutValue(char,byte,byte)', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharByteHashMap.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.indexOfKey(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)', 'OpenCharByteHashMap.get(char)']
OpenCharByteHashMapTest.testKeys(): ['CharArrayList.elements()', 'OpenCharByteHashMap.rehash(int)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenCharByteHashMap.keys()', 'CharArrayList.get(int)', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.keys(org.apache.mahout.math.list.CharArrayList)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)']
OpenCharByteHashMapTest.testPairsMatching(): ['OpenCharByteHashMap.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.get(int)', 'OpenCharByteHashMap.pairsMatching(org.apache.mahout.math.function.CharByteProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'CharArrayList.sort()', 'CharArrayList.get(int)', 'ByteArrayList.sort()', 'OpenCharByteHashMap.indexOfInsertion(char)', 'CharArrayList.ensureCapacity(int)', 'OpenCharByteHashMap.removeKey(char)', 'OpenCharByteHashMap.rehash(int)', 'ByteArrayList.ensureCapacity(int)', 'OpenCharByteHashMap.indexOfKey(char)', 'ByteArrayList.size()', 'Arrays.ensureCapacity(byte[],int)', 'CharArrayList.size()', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.clear()', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'CharByteProcedure.apply(char,byte)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)', 'CharArrayList.add(char)']
OpenCharByteHashMapTest.testValues(): ['OpenCharByteHashMap.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.get(int)', 'OpenCharByteHashMap.removeKey(char)', 'OpenCharByteHashMap.rehash(int)', 'OpenCharByteHashMap.values(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.size()', 'OpenCharByteHashMap.indexOfKey(char)', 'ByteArrayList.setSize(int)', 'ByteArrayList.sort()', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)', 'ByteArrayList.elements()']
OpenCharByteHashMapTest.testCopy(): ['OpenCharByteHashMap.nextPrime(int)', 'OpenCharByteHashMap.trimToSize()', 'OpenCharByteHashMap.clear()', 'OpenCharByteHashMap.rehash(int)', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharByteHashMap.copy()', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)', 'OpenCharByteHashMap.size()']
OpenCharByteHashMapTest.testEquals(): ['OpenCharByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharByteHashMap.removeKey(char)', 'OpenCharByteHashMap.rehash(int)', 'OpenCharByteHashMap.indexOfKey(char)', 'OpenCharByteHashMap.equals(java.lang.Object)', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharByteHashMap.copy()', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)']
OpenCharByteHashMapTest.testKeysSortedByValue(): ['OpenCharByteHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.toArray(char[])', 'OpenCharByteHashMap.removeKey(char)', 'OpenCharByteHashMap.rehash(int)', 'OpenCharByteHashMap.indexOfKey(char)', 'CharArrayList.size()', 'OpenCharByteHashMap.indexOfInsertion(char)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharByteHashMap.keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)']
OpenCharByteHashMapTest.testPairsSortedByKey(): ['ByteArrayList.get(int)', 'OpenCharByteHashMap.pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ByteArrayList)', 'OpenCharByteHashMap.rehash(int)', 'ByteArrayList.size()', 'CharArrayList.size()', 'ByteArrayList.clear()', 'CharArrayList.get(int)', 'OpenCharByteHashMap.indexOfInsertion(char)', 'CharArrayList.clear()', 'OpenCharByteHashMap.pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.ByteArrayList)', 'OpenCharByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharByteHashMap.chooseHighWaterMark(int,double)', 'OpenCharByteHashMap.chooseLowWaterMark(int,double)', 'OpenCharByteHashMap.put(char,byte)']
OpenByteCharHashMapTest.testConstructors(): ['OpenByteCharHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenByteCharHashMapTest.testEnsureCapacity(): ['OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenByteCharHashMap.nextPrime(int)', 'HashFunctions.hash(short)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.getInternalFactors(int[],double[],double[])', 'OpenByteCharHashMap.ensureCapacity(int)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)']
OpenByteCharHashMapTest.testClear(): ['OpenByteCharHashMap.trimToSize()', 'OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'OpenByteCharHashMap.size()', 'OpenByteCharHashMap.indexOfKey(byte)', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteCharHashMap.get(byte)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'OpenByteCharHashMap.clear()', 'OpenByteCharHashMap.nextPrime(int)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenByteCharHashMapTest.testClone(): ['OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.trimToSize()', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'OpenByteCharHashMap.size()', 'OpenByteCharHashMap.clone()', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'OpenByteCharHashMap.clear()', 'AbstractByteCharMap.clone()', 'OpenByteCharHashMap.nextPrime(int)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenByteCharHashMapTest.testContainsKey(): ['OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.indexOfKey(byte)', 'OpenByteCharHashMap.containsKey(byte)', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenByteCharHashMapTest.testContainValue(): ['OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'OpenByteCharHashMap.containsValue(char)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.indexOfValue(char)', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenByteCharHashMapTest.testForEachKey(): ['OpenByteCharHashMap.forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'OpenByteCharHashMap.removeKey(byte)', 'OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'OpenByteCharHashMap.indexOfKey(byte)', 'OpenByteCharHashMap.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.size()', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.toArray(byte[])', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'ByteProcedure.apply(byte)', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenByteCharHashMapTest.testForEachPair(): ['OpenByteCharHashMap.removeKey(byte)', 'OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'OpenByteCharHashMap.forEachPair(org.apache.mahout.math.function.ByteCharProcedure)', 'OpenByteCharHashMap.indexOfKey(byte)', 'OpenByteCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'ByteCharProcedure.apply(byte,char)', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenByteCharHashMapTest.testGet(): ['OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.indexOfKey(byte)', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteCharHashMap.put(byte,char)', 'OpenByteCharHashMap.get(byte)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)']
OpenByteCharHashMapTest.testAdjustOrPutValue(): ['OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.indexOfKey(byte)', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteCharHashMap.put(byte,char)', 'OpenByteCharHashMap.get(byte)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'OpenByteCharHashMap.adjustOrPutValue(byte,char,char)']
OpenByteCharHashMapTest.testKeys(): ['OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.get(int)', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'ByteArrayList.elements()', 'ByteArrayList.setSize(int)', 'OpenByteCharHashMap.keys(org.apache.mahout.math.list.ByteArrayList)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.sort()', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.keys()', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenByteCharHashMapTest.testPairsMatching(): ['OpenByteCharHashMap.rehash(int)', 'ByteArrayList.get(int)', 'OpenByteCharHashMap.indexOfKey(byte)', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'CharArrayList.sort()', 'CharArrayList.get(int)', 'ByteArrayList.sort()', 'OpenByteCharHashMap.pairsMatching(org.apache.mahout.math.function.ByteCharProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenByteCharHashMap.put(byte,char)', 'OpenByteCharHashMap.removeKey(byte)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.ensureCapacity(int)', 'OpenByteCharHashMap.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.size()', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'CharArrayList.clear()', 'Arrays.ensureCapacity(char[],int)', 'ByteCharProcedure.apply(byte,char)', 'HashFunctions.hash(short)', 'CharArrayList.add(char)']
OpenByteCharHashMapTest.testValues(): ['OpenByteCharHashMap.removeKey(byte)', 'OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.elements()', 'OpenByteCharHashMap.indexOfKey(byte)', 'OpenByteCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.size()', 'OpenByteCharHashMap.values(org.apache.mahout.math.list.CharArrayList)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'CharArrayList.get(int)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenByteCharHashMapTest.testCopy(): ['OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.trimToSize()', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'OpenByteCharHashMap.size()', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'OpenByteCharHashMap.clear()', 'OpenByteCharHashMap.nextPrime(int)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.copy()', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenByteCharHashMapTest.testEquals(): ['OpenByteCharHashMap.removeKey(byte)', 'OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'OpenByteCharHashMap.indexOfKey(byte)', 'OpenByteCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteCharHashMap.equals(java.lang.Object)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.copy()', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenByteCharHashMapTest.testKeysSortedByValue(): ['OpenByteCharHashMap.removeKey(byte)', 'OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'OpenByteCharHashMap.indexOfKey(byte)', 'OpenByteCharHashMap.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.size()', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.toArray(byte[])', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'OpenByteCharHashMap.keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenByteCharHashMapTest.testPairsSortedByKey(): ['OpenByteCharHashMap.pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenByteCharHashMap.rehash(int)', 'OpenByteCharHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.get(int)', 'ByteArrayList.size()', 'OpenByteCharHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.size()', 'ByteArrayList.clear()', 'OpenByteCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.get(int)', 'OpenByteCharHashMap.pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenByteCharHashMap.indexOfInsertion(byte)', 'CharArrayList.clear()', 'OpenByteCharHashMap.put(byte,char)', 'HashFunctions.hash(short)']
OpenFloatCharHashMapTest.testConstructors(): ['OpenFloatCharHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenFloatCharHashMapTest.testEnsureCapacity(): ['OpenFloatCharHashMap.nextPrime(int)', 'PrimeFinder.nextPrime(int)', 'OpenFloatCharHashMap.indexOfInsertion(float)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.ensureCapacity(int)', 'OpenFloatCharHashMap.getInternalFactors(int[],double[],double[])', 'OpenFloatCharHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)']
OpenFloatCharHashMapTest.testClear(): ['OpenFloatCharHashMap.nextPrime(int)', 'OpenFloatCharHashMap.indexOfInsertion(float)', 'OpenFloatCharHashMap.trimToSize()', 'OpenFloatCharHashMap.get(float)', 'OpenFloatCharHashMap.clear()', 'OpenFloatCharHashMap.indexOfKey(float)', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.rehash(int)', 'OpenFloatCharHashMap.size()', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)']
OpenFloatCharHashMapTest.testClone(): ['OpenFloatCharHashMap.nextPrime(int)', 'OpenFloatCharHashMap.clone()', 'OpenFloatCharHashMap.indexOfInsertion(float)', 'OpenFloatCharHashMap.trimToSize()', 'AbstractFloatCharMap.clone()', 'OpenFloatCharHashMap.clear()', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.rehash(int)', 'OpenFloatCharHashMap.size()', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)']
OpenFloatCharHashMapTest.testContainsKey(): ['OpenFloatCharHashMap.indexOfInsertion(float)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.rehash(int)', 'OpenFloatCharHashMap.containsKey(float)', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.indexOfKey(float)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)']
OpenFloatCharHashMapTest.testContainValue(): ['OpenFloatCharHashMap.containsValue(char)', 'OpenFloatCharHashMap.indexOfInsertion(float)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.indexOfValue(char)', 'OpenFloatCharHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)']
OpenFloatCharHashMapTest.testForEachKey(): ['OpenFloatCharHashMap.chooseLowWaterMark(int,double)', 'OpenFloatCharHashMap.indexOfInsertion(float)', 'FloatArrayList.size()', 'OpenFloatCharHashMap.indexOfKey(float)', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)', 'FloatProcedure.apply(float)', 'OpenFloatCharHashMap.forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.rehash(int)', 'FloatArrayList.toArray(float[])', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatCharHashMap.removeKey(float)']
OpenFloatCharHashMapTest.testForEachPair(): ['OpenFloatCharHashMap.indexOfInsertion(float)', 'FloatCharProcedure.apply(float,char)', 'OpenFloatCharHashMap.indexOfKey(float)', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.forEachPair(org.apache.mahout.math.function.FloatCharProcedure)', 'OpenFloatCharHashMap.rehash(int)', 'OpenFloatCharHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)', 'OpenFloatCharHashMap.removeKey(float)']
OpenFloatCharHashMapTest.testGet(): ['OpenFloatCharHashMap.indexOfInsertion(float)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.get(float)', 'OpenFloatCharHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.indexOfKey(float)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)']
OpenFloatCharHashMapTest.testAdjustOrPutValue(): ['OpenFloatCharHashMap.adjustOrPutValue(float,char,char)', 'OpenFloatCharHashMap.indexOfInsertion(float)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.get(float)', 'OpenFloatCharHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.indexOfKey(float)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)']
OpenFloatCharHashMapTest.testKeys(): ['OpenFloatCharHashMap.indexOfInsertion(float)', 'FloatArrayList.setSize(int)', 'FloatArrayList.elements()', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatCharHashMap.keys()', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'FloatArrayList.get(int)', 'FloatArrayList.sort()', 'OpenFloatCharHashMap.rehash(int)', 'OpenFloatCharHashMap.keys(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)']
OpenFloatCharHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'FloatArrayList.ensureCapacity(int)', 'FloatCharProcedure.apply(float,char)', 'FloatArrayList.size()', 'CharArrayList.sort()', 'CharArrayList.get(int)', 'OpenFloatCharHashMap.put(float,char)', 'FloatArrayList.sort()', 'OpenFloatCharHashMap.rehash(int)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)', 'OpenFloatCharHashMap.removeKey(float)', 'CharArrayList.ensureCapacity(int)', 'OpenFloatCharHashMap.indexOfInsertion(float)', 'FloatArrayList.clear()', 'OpenFloatCharHashMap.pairsMatching(org.apache.mahout.math.function.FloatCharProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.CharArrayList)', 'FloatArrayList.add(float)', 'CharArrayList.size()', 'OpenFloatCharHashMap.indexOfKey(float)', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.clear()', 'FloatArrayList.get(int)', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.add(char)']
OpenFloatCharHashMapTest.testValues(): ['OpenFloatCharHashMap.chooseLowWaterMark(int,double)', 'OpenFloatCharHashMap.indexOfInsertion(float)', 'CharArrayList.elements()', 'CharArrayList.size()', 'OpenFloatCharHashMap.indexOfKey(float)', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.setSize(int)', 'OpenFloatCharHashMap.values(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList.sort()', 'CharArrayList.get(int)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatCharHashMap.removeKey(float)']
OpenFloatCharHashMapTest.testCopy(): ['OpenFloatCharHashMap.nextPrime(int)', 'OpenFloatCharHashMap.indexOfInsertion(float)', 'OpenFloatCharHashMap.trimToSize()', 'OpenFloatCharHashMap.clear()', 'OpenFloatCharHashMap.copy()', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.rehash(int)', 'OpenFloatCharHashMap.size()', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)']
OpenFloatCharHashMapTest.testEquals(): ['OpenFloatCharHashMap.indexOfInsertion(float)', 'OpenFloatCharHashMap.equals(java.lang.Object)', 'OpenFloatCharHashMap.copy()', 'OpenFloatCharHashMap.indexOfKey(float)', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.rehash(int)', 'OpenFloatCharHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)', 'OpenFloatCharHashMap.removeKey(float)']
OpenFloatCharHashMapTest.testKeysSortedByValue(): ['OpenFloatCharHashMap.indexOfInsertion(float)', 'FloatArrayList.size()', 'OpenFloatCharHashMap.indexOfKey(float)', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatCharHashMap.keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.rehash(int)', 'FloatArrayList.toArray(float[])', 'OpenFloatCharHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)', 'OpenFloatCharHashMap.removeKey(float)']
OpenFloatCharHashMapTest.testPairsSortedByKey(): ['OpenFloatCharHashMap.indexOfInsertion(float)', 'FloatArrayList.clear()', 'FloatArrayList.size()', 'CharArrayList.size()', 'OpenFloatCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatCharHashMap.pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.CharArrayList)', 'CharArrayList.get(int)', 'OpenFloatCharHashMap.put(float,char)', 'OpenFloatCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.clear()', 'FloatArrayList.get(int)', 'OpenFloatCharHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatCharHashMap.pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenFloatCharHashMap.chooseLowWaterMark(int,double)']
OpenIntFloatHashMapTest.testConstructors(): ['OpenIntFloatHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenIntFloatHashMapTest.testEnsureCapacity(): ['OpenIntFloatHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenIntFloatHashMap.getInternalFactors(int[],double[],double[])', 'OpenIntFloatHashMap.nextPrime(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)']
OpenIntFloatHashMapTest.testClear(): ['OpenIntFloatHashMap.size()', 'OpenIntFloatHashMap.trimToSize()', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'OpenIntFloatHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.nextPrime(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.clear()', 'OpenIntFloatHashMap.get(int)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testClone(): ['OpenIntFloatHashMap.size()', 'OpenIntFloatHashMap.trimToSize()', 'AbstractIntFloatMap.clone()', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.nextPrime(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.clone()', 'OpenIntFloatHashMap.clear()', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testContainsKey(): ['OpenIntFloatHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'OpenIntFloatHashMap.containsKey(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testContainValue(): ['HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'OpenIntFloatHashMap.indexOfValue(float)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.containsValue(float)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testForEachKey(): ['IntArrayList.toArray(int[])', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'IntArrayList.size()', 'IntProcedure.apply(int)', 'OpenIntFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntFloatHashMap.removeKey(int)', 'OpenIntFloatHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.forEachKey(org.apache.mahout.math.function.IntProcedure)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testForEachPair(): ['IntFloatProcedure.apply(int,float)', 'OpenIntFloatHashMap.forEachPair(org.apache.mahout.math.function.IntFloatProcedure)', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'OpenIntFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntFloatHashMap.removeKey(int)', 'OpenIntFloatHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testGet(): ['OpenIntFloatHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.get(int)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testAdjustOrPutValue(): ['OpenIntFloatHashMap.adjustOrPutValue(int,float,float)', 'OpenIntFloatHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.get(int)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testKeys(): ['IntArrayList.sort()', 'IntArrayList.elements()', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.keys()', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'IntArrayList.setSize(int)', 'OpenIntFloatHashMap.keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.get(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'FloatArrayList.ensureCapacity(int)', 'IntFloatProcedure.apply(int,float)', 'IntArrayList.sort()', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'FloatArrayList.size()', 'IntArrayList.size()', 'OpenIntFloatHashMap.removeKey(int)', 'IntArrayList.ensureCapacity(int)', 'FloatArrayList.sort()', 'Arrays.ensureCapacity(int[],int)', 'OpenIntFloatHashMap.rehash(int)', 'IntArrayList.clear()', 'OpenIntFloatHashMap.pairsMatching(org.apache.mahout.math.function.IntFloatProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.FloatArrayList)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.clear()', 'OpenIntFloatHashMap.put(int,float)', 'FloatArrayList.add(float)', 'IntArrayList.add(int)', 'OpenIntFloatHashMap.chooseShrinkCapacity(int,double,double)', 'IntArrayList.get(int)', 'OpenIntFloatHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.get(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)']
OpenIntFloatHashMapTest.testValues(): ['OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'FloatArrayList.setSize(int)', 'FloatArrayList.size()', 'FloatArrayList.elements()', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntFloatHashMap.removeKey(int)', 'OpenIntFloatHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.sort()', 'FloatArrayList.get(int)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.values(org.apache.mahout.math.list.FloatArrayList)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testCopy(): ['OpenIntFloatHashMap.copy()', 'OpenIntFloatHashMap.size()', 'OpenIntFloatHashMap.trimToSize()', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.nextPrime(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.clear()', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testEquals(): ['OpenIntFloatHashMap.copy()', 'OpenIntFloatHashMap.equals(java.lang.Object)', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'OpenIntFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntFloatHashMap.removeKey(int)', 'OpenIntFloatHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testKeysSortedByValue(): ['OpenIntFloatHashMap.keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.toArray(int[])', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'IntArrayList.size()', 'OpenIntFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntFloatHashMap.removeKey(int)', 'OpenIntFloatHashMap.indexOfKey(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'OpenIntFloatHashMap.rehash(int)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenIntFloatHashMapTest.testPairsSortedByKey(): ['FloatArrayList.clear()', 'OpenIntFloatHashMap.put(int,float)', 'OpenIntFloatHashMap.indexOfInsertion(int)', 'FloatArrayList.size()', 'OpenIntFloatHashMap.pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.FloatArrayList)', 'IntArrayList.size()', 'IntArrayList.get(int)', 'HashFunctions.hash(int)', 'OpenIntFloatHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.get(int)', 'OpenIntFloatHashMap.rehash(int)', 'IntArrayList.clear()', 'OpenIntFloatHashMap.pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.FloatArrayList)', 'OpenIntFloatHashMap.chooseLowWaterMark(int,double)', 'OpenIntFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testConstructors(): ['OpenCharDoubleHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenCharDoubleHashMapTest.testEnsureCapacity(): ['OpenCharDoubleHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenCharDoubleHashMap.nextPrime(int)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.getInternalFactors(int[],double[],double[])', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)']
OpenCharDoubleHashMapTest.testClear(): ['OpenCharDoubleHashMap.get(char)', 'OpenCharDoubleHashMap.trimToSize()', 'OpenCharDoubleHashMap.clear()', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenCharDoubleHashMap.nextPrime(int)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.indexOfKey(char)', 'OpenCharDoubleHashMap.size()', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testClone(): ['OpenCharDoubleHashMap.trimToSize()', 'OpenCharDoubleHashMap.clear()', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenCharDoubleHashMap.nextPrime(int)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'AbstractCharDoubleMap.clone()', 'OpenCharDoubleHashMap.rehash(int)', 'OpenCharDoubleHashMap.clone()', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.size()', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testContainsKey(): ['OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'OpenCharDoubleHashMap.containsKey(char)', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.indexOfKey(char)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testContainValue(): ['OpenCharDoubleHashMap.containsValue(double)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.indexOfValue(double)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testForEachKey(): ['OpenCharDoubleHashMap.removeKey(char)', 'CharArrayList.toArray(char[])', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'CharProcedure.apply(char)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.size()', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.indexOfKey(char)', 'OpenCharDoubleHashMap.forEachKey(org.apache.mahout.math.function.CharProcedure)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testForEachPair(): ['OpenCharDoubleHashMap.forEachPair(org.apache.mahout.math.function.CharDoubleProcedure)', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'CharDoubleProcedure.apply(char,double)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.indexOfKey(char)', 'OpenCharDoubleHashMap.removeKey(char)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testGet(): ['OpenCharDoubleHashMap.get(char)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.indexOfKey(char)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testAdjustOrPutValue(): ['OpenCharDoubleHashMap.get(char)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.indexOfKey(char)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.adjustOrPutValue(char,double,double)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testKeys(): ['CharArrayList.elements()', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenCharDoubleHashMap.keys(org.apache.mahout.math.list.CharArrayList)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenCharDoubleHashMap.keys()', 'CharArrayList.get(int)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testPairsMatching(): ['DoubleArrayList.sort()', 'OpenCharDoubleHashMap.put(char,double)', 'DoubleArrayList.add(double)', 'OpenCharDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.sort()', 'CharArrayList.get(int)', 'DoubleArrayList.size()', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'CharDoubleProcedure.apply(char,double)', 'OpenCharDoubleHashMap.removeKey(char)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.ensureCapacity(int)', 'OpenCharDoubleHashMap.pairsMatching(org.apache.mahout.math.function.CharDoubleProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList.get(int)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.size()', 'DoubleArrayList.clear()', 'OpenCharDoubleHashMap.rehash(int)', 'CharArrayList.clear()', 'Arrays.ensureCapacity(char[],int)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.indexOfKey(char)', 'CharArrayList.add(char)']
OpenCharDoubleHashMapTest.testValues(): ['DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenCharDoubleHashMap.values(org.apache.mahout.math.list.DoubleArrayList)', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleArrayList.setSize(int)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'DoubleArrayList.size()', 'OpenCharDoubleHashMap.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.indexOfKey(char)', 'OpenCharDoubleHashMap.removeKey(char)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testCopy(): ['OpenCharDoubleHashMap.trimToSize()', 'OpenCharDoubleHashMap.clear()', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenCharDoubleHashMap.nextPrime(int)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'OpenCharDoubleHashMap.copy()', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.size()', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testEquals(): ['OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'OpenCharDoubleHashMap.copy()', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.equals(java.lang.Object)', 'OpenCharDoubleHashMap.indexOfKey(char)', 'OpenCharDoubleHashMap.removeKey(char)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testKeysSortedByValue(): ['CharArrayList.toArray(char[])', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.size()', 'OpenCharDoubleHashMap.keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'OpenCharDoubleHashMap.rehash(int)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.indexOfKey(char)', 'OpenCharDoubleHashMap.removeKey(char)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenCharDoubleHashMapTest.testPairsSortedByKey(): ['DoubleArrayList.get(int)', 'OpenCharDoubleHashMap.put(char,double)', 'OpenCharDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenCharDoubleHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.size()', 'DoubleArrayList.clear()', 'CharArrayList.get(int)', 'DoubleArrayList.size()', 'OpenCharDoubleHashMap.indexOfInsertion(char)', 'CharArrayList.clear()', 'OpenCharDoubleHashMap.rehash(int)', 'OpenCharDoubleHashMap.pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'HashFunctions.hash(char)', 'OpenCharDoubleHashMap.pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'OpenCharDoubleHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleDoubleHashMapTest.testConstructors(): ['OpenDoubleDoubleHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenDoubleDoubleHashMapTest.testEnsureCapacity(): ['HashFunctions.hash(double)', 'PrimeFinder.nextPrime(int)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.getInternalFactors(int[],double[],double[])', 'OpenDoubleDoubleHashMap.nextPrime(int)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.ensureCapacity(int)', 'OpenDoubleDoubleHashMap.rehash(int)']
OpenDoubleDoubleHashMapTest.testClear(): ['HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.indexOfKey(double)', 'OpenDoubleDoubleHashMap.trimToSize()', 'OpenDoubleDoubleHashMap.size()', 'OpenDoubleDoubleHashMap.get(double)', 'OpenDoubleDoubleHashMap.clear()', 'OpenDoubleDoubleHashMap.put(double,double)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.nextPrime(int)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)']
OpenDoubleDoubleHashMapTest.testClone(): ['HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.trimToSize()', 'OpenDoubleDoubleHashMap.size()', 'OpenDoubleDoubleHashMap.clear()', 'AbstractDoubleDoubleMap.clone()', 'OpenDoubleDoubleHashMap.put(double,double)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.nextPrime(int)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)', 'OpenDoubleDoubleHashMap.clone()']
OpenDoubleDoubleHashMapTest.testContainsKey(): ['OpenDoubleDoubleHashMap.put(double,double)', 'HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.indexOfKey(double)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.containsKey(double)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)']
OpenDoubleDoubleHashMapTest.testContainValue(): ['OpenDoubleDoubleHashMap.put(double,double)', 'HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.containsValue(double)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.indexOfValue(double)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)']
OpenDoubleDoubleHashMapTest.testForEachKey(): ['DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.indexOfKey(double)', 'OpenDoubleDoubleHashMap.put(double,double)', 'OpenDoubleDoubleHashMap.removeKey(double)', 'OpenDoubleDoubleHashMap.forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.size()', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleProcedure.apply(double)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)']
OpenDoubleDoubleHashMapTest.testForEachPair(): ['HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.indexOfKey(double)', 'OpenDoubleDoubleHashMap.forEachPair(org.apache.mahout.math.function.DoubleDoubleProcedure)', 'OpenDoubleDoubleHashMap.put(double,double)', 'OpenDoubleDoubleHashMap.removeKey(double)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)', 'DoubleDoubleProcedure.apply(double,double)']
OpenDoubleDoubleHashMapTest.testGet(): ['OpenDoubleDoubleHashMap.put(double,double)', 'HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.indexOfKey(double)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)', 'OpenDoubleDoubleHashMap.get(double)']
OpenDoubleDoubleHashMapTest.testAdjustOrPutValue(): ['OpenDoubleDoubleHashMap.put(double,double)', 'HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.indexOfKey(double)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.adjustOrPutValue(double,double,double)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)', 'OpenDoubleDoubleHashMap.get(double)']
OpenDoubleDoubleHashMapTest.testKeys(): ['HashFunctions.hash(double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'DoubleArrayList.setSize(int)', 'OpenDoubleDoubleHashMap.put(double,double)', 'OpenDoubleDoubleHashMap.keys()', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.keys(org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)']
OpenDoubleDoubleHashMapTest.testPairsMatching(): ['HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.indexOfKey(double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.sort()', 'DoubleArrayList.add(double)', 'OpenDoubleDoubleHashMap.put(double,double)', 'OpenDoubleDoubleHashMap.removeKey(double)', 'DoubleArrayList.clear()', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.size()', 'OpenDoubleDoubleHashMap.pairsMatching(org.apache.mahout.math.function.DoubleDoubleProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)', 'DoubleDoubleProcedure.apply(double,double)']
OpenDoubleDoubleHashMapTest.testValues(): ['HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.indexOfKey(double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenDoubleDoubleHashMap.values(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList.setSize(int)', 'OpenDoubleDoubleHashMap.put(double,double)', 'OpenDoubleDoubleHashMap.removeKey(double)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.size()', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)']
OpenDoubleDoubleHashMapTest.testCopy(): ['HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.trimToSize()', 'OpenDoubleDoubleHashMap.size()', 'OpenDoubleDoubleHashMap.clear()', 'OpenDoubleDoubleHashMap.put(double,double)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.copy()', 'OpenDoubleDoubleHashMap.nextPrime(int)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)']
OpenDoubleDoubleHashMapTest.testEquals(): ['HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.indexOfKey(double)', 'OpenDoubleDoubleHashMap.put(double,double)', 'OpenDoubleDoubleHashMap.removeKey(double)', 'OpenDoubleDoubleHashMap.equals(java.lang.Object)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.copy()', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)']
OpenDoubleDoubleHashMapTest.testKeysSortedByValue(): ['DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleDoubleHashMap.indexOfKey(double)', 'OpenDoubleDoubleHashMap.keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleDoubleHashMap.put(double,double)', 'OpenDoubleDoubleHashMap.removeKey(double)', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.size()', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)']
OpenDoubleDoubleHashMapTest.testPairsSortedByKey(): ['OpenDoubleDoubleHashMap.put(double,double)', 'OpenDoubleDoubleHashMap.pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'HashFunctions.hash(double)', 'DoubleArrayList.clear()', 'OpenDoubleDoubleHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)', 'OpenDoubleDoubleHashMap.indexOfInsertion(double)', 'OpenDoubleDoubleHashMap.pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleDoubleHashMap.rehash(int)']
OpenObjectDoubleHashMapTest.testConstructors(): ['OpenObjectDoubleHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenObjectDoubleHashMapTest.testEnsureCapacity(): ['PrimeFinder.nextPrime(int)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.ensureCapacity(int)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.getInternalFactors(int[],double[],double[])', 'OpenObjectDoubleHashMap.nextPrime(int)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)']
OpenObjectDoubleHashMapTest.testClear(): ['OpenObjectDoubleHashMap.clear()', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.nextPrime(int)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.size()', 'OpenObjectDoubleHashMap.trimToSize()']
OpenObjectDoubleHashMapTest.testClone(): ['OpenObjectDoubleHashMap.clear()', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.nextPrime(int)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.clone()', 'AbstractObjectDoubleMap.clone()', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.size()', 'OpenObjectDoubleHashMap.trimToSize()']
OpenObjectDoubleHashMapTest.testContainsKey(): ['OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenObjectDoubleHashMap.indexOfKey(java.lang.Object)', 'OpenObjectDoubleHashMap.containsKey(java.lang.Object)']
OpenObjectDoubleHashMapTest.testContainValue(): ['OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenObjectDoubleHashMap.containsValue(double)', 'OpenObjectDoubleHashMap.indexOfValue(double)']
OpenObjectDoubleHashMapTest.testForEachKey(): ['OpenObjectDoubleHashMap.removeKey(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectDoubleHashMap.rehash(int)', 'ObjectProcedure.apply(java.lang.Object)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfKey(java.lang.Object)']
OpenObjectDoubleHashMapTest.testForEachPair(): ['OpenObjectDoubleHashMap.removeKey(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.forEachPair(org.apache.mahout.math.function.ObjectDoubleProcedure)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'ObjectDoubleProcedure.apply(java.lang.Object,double)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfKey(java.lang.Object)']
OpenObjectDoubleHashMapTest.testGet(): ['OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenObjectDoubleHashMap.indexOfKey(java.lang.Object)', 'OpenObjectDoubleHashMap.get(java.lang.Object)']
OpenObjectDoubleHashMapTest.testKeys(): ['OpenObjectDoubleHashMap.keys(java.util.List)', 'OpenObjectDoubleHashMap.keys()', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)']
OpenObjectDoubleHashMapTest.testAdjustOrPutValue(): ['OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.adjustOrPutValue(java.lang.Object,double,double)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenObjectDoubleHashMap.indexOfKey(java.lang.Object)', 'OpenObjectDoubleHashMap.get(java.lang.Object)']
OpenObjectDoubleHashMapTest.testPairsMatching(): ['OpenObjectDoubleHashMap.removeKey(java.lang.Object)', 'OpenObjectDoubleHashMap.pairsMatching(org.apache.mahout.math.function.ObjectDoubleProcedure,java.util.List,org.apache.mahout.math.list.DoubleArrayList)', 'OpenObjectDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.sort()', 'OpenObjectDoubleHashMap.rehash(int)', 'DoubleArrayList.add(double)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'DoubleArrayList.clear()', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'DoubleArrayList.size()', 'ObjectDoubleProcedure.apply(java.lang.Object,double)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'Arrays.ensureCapacity(double[],int)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'DoubleArrayList.ensureCapacity(int)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfKey(java.lang.Object)']
OpenObjectDoubleHashMapTest.testValues(): ['OpenObjectDoubleHashMap.removeKey(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'DoubleArrayList.setSize(int)', 'OpenObjectDoubleHashMap.values(org.apache.mahout.math.list.DoubleArrayList)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'DoubleArrayList.size()', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfKey(java.lang.Object)']
OpenObjectDoubleHashMapTest.testCopy(): ['OpenObjectDoubleHashMap.copy()', 'OpenObjectDoubleHashMap.clear()', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.nextPrime(int)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.size()', 'OpenObjectDoubleHashMap.trimToSize()']
OpenObjectDoubleHashMapTest.testEquals(): ['OpenObjectDoubleHashMap.copy()', 'OpenObjectDoubleHashMap.removeKey(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.equals(java.lang.Object)', 'OpenObjectDoubleHashMap.indexOfKey(java.lang.Object)']
OpenObjectDoubleHashMapTest.testKeysSortedByValue(): ['OpenObjectDoubleHashMap.removeKey(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.keysSortedByValue(java.util.List)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenObjectDoubleHashMap.indexOfKey(java.lang.Object)']
OpenObjectDoubleHashMapTest.testPairsSortedByKey(): ['OpenObjectDoubleHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.DoubleArrayList)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)']
OpenObjectDoubleHashMapTest.testPairsSortedByKeyNotComparable(): ['OpenObjectDoubleHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.DoubleArrayList)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)']
OpenObjectDoubleHashMapTest.testPairsSortedByValue(): ['OpenObjectDoubleHashMap.pairsSortedByValue(java.util.List,org.apache.mahout.math.list.DoubleArrayList)', 'OpenObjectDoubleHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectDoubleHashMap.chooseHighWaterMark(int,double)', 'DoubleArrayList.get(int)', 'OpenObjectDoubleHashMap.rehash(int)', 'OpenObjectDoubleHashMap.put(java.lang.Object,double)', 'OpenObjectDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectDoubleHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectDoubleHashMap.chooseLowWaterMark(int,double)']
OpenShortFloatHashMapTest.testConstructors(): ['OpenShortFloatHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenShortFloatHashMapTest.testEnsureCapacity(): ['OpenShortFloatHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)', 'OpenShortFloatHashMap.ensureCapacity(int)', 'HashFunctions.hash(short)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.nextPrime(int)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)']
OpenShortFloatHashMapTest.testClear(): ['OpenShortFloatHashMap.put(short,float)', 'OpenShortFloatHashMap.indexOfKey(short)', 'OpenShortFloatHashMap.size()', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'OpenShortFloatHashMap.clear()', 'OpenShortFloatHashMap.trimToSize()', 'OpenShortFloatHashMap.get(short)', 'OpenShortFloatHashMap.nextPrime(int)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortFloatHashMapTest.testClone(): ['OpenShortFloatHashMap.put(short,float)', 'OpenShortFloatHashMap.size()', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'AbstractShortFloatMap.clone()', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'OpenShortFloatHashMap.clear()', 'OpenShortFloatHashMap.clone()', 'OpenShortFloatHashMap.trimToSize()', 'OpenShortFloatHashMap.nextPrime(int)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortFloatHashMapTest.testContainsKey(): ['OpenShortFloatHashMap.put(short,float)', 'OpenShortFloatHashMap.indexOfKey(short)', 'OpenShortFloatHashMap.containsKey(short)', 'HashFunctions.hash(short)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)']
OpenShortFloatHashMapTest.testContainValue(): ['OpenShortFloatHashMap.put(short,float)', 'OpenShortFloatHashMap.indexOfValue(float)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.containsValue(float)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'HashFunctions.hash(short)']
OpenShortFloatHashMapTest.testForEachKey(): ['OpenShortFloatHashMap.put(short,float)', 'ShortArrayList.size()', 'OpenShortFloatHashMap.indexOfKey(short)', 'ShortArrayList.toArray(short[])', 'OpenShortFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'ShortProcedure.apply(short)', 'OpenShortFloatHashMap.removeKey(short)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenShortFloatHashMap.forEachKey(org.apache.mahout.math.function.ShortProcedure)']
OpenShortFloatHashMapTest.testForEachPair(): ['OpenShortFloatHashMap.put(short,float)', 'ShortFloatProcedure.apply(short,float)', 'OpenShortFloatHashMap.indexOfKey(short)', 'OpenShortFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'OpenShortFloatHashMap.forEachPair(org.apache.mahout.math.function.ShortFloatProcedure)', 'OpenShortFloatHashMap.removeKey(short)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortFloatHashMapTest.testGet(): ['OpenShortFloatHashMap.put(short,float)', 'OpenShortFloatHashMap.indexOfKey(short)', 'OpenShortFloatHashMap.get(short)', 'HashFunctions.hash(short)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)']
OpenShortFloatHashMapTest.testAdjustOrPutValue(): ['OpenShortFloatHashMap.put(short,float)', 'OpenShortFloatHashMap.indexOfKey(short)', 'OpenShortFloatHashMap.get(short)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.adjustOrPutValue(short,float,float)', 'HashFunctions.hash(short)']
OpenShortFloatHashMapTest.testKeys(): ['OpenShortFloatHashMap.put(short,float)', 'OpenShortFloatHashMap.keys(org.apache.mahout.math.list.ShortArrayList)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.keys()', 'ShortArrayList.elements()', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.sort()', 'ShortArrayList.setSize(int)', 'ShortArrayList.get(int)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortFloatHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'OpenShortFloatHashMap.indexOfKey(short)', 'FloatArrayList.ensureCapacity(int)', 'ShortArrayList.clear()', 'FloatArrayList.size()', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'FloatArrayList.sort()', 'OpenShortFloatHashMap.put(short,float)', 'OpenShortFloatHashMap.pairsMatching(org.apache.mahout.math.function.ShortFloatProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.FloatArrayList)', 'ShortArrayList.size()', 'ShortFloatProcedure.apply(short,float)', 'FloatArrayList.clear()', 'OpenShortFloatHashMap.chooseShrinkCapacity(int,double,double)', 'ShortArrayList.ensureCapacity(int)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'Arrays.ensureCapacity(short[],int)', 'FloatArrayList.add(float)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.sort()', 'FloatArrayList.get(int)', 'OpenShortFloatHashMap.removeKey(short)', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortFloatHashMapTest.testValues(): ['OpenShortFloatHashMap.put(short,float)', 'OpenShortFloatHashMap.indexOfKey(short)', 'OpenShortFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.setSize(int)', 'FloatArrayList.size()', 'FloatArrayList.elements()', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'FloatArrayList.sort()', 'FloatArrayList.get(int)', 'OpenShortFloatHashMap.removeKey(short)', 'OpenShortFloatHashMap.values(org.apache.mahout.math.list.FloatArrayList)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortFloatHashMapTest.testCopy(): ['OpenShortFloatHashMap.put(short,float)', 'OpenShortFloatHashMap.copy()', 'OpenShortFloatHashMap.size()', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'OpenShortFloatHashMap.clear()', 'OpenShortFloatHashMap.trimToSize()', 'OpenShortFloatHashMap.nextPrime(int)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortFloatHashMapTest.testEquals(): ['OpenShortFloatHashMap.put(short,float)', 'OpenShortFloatHashMap.indexOfKey(short)', 'OpenShortFloatHashMap.copy()', 'OpenShortFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'OpenShortFloatHashMap.removeKey(short)', 'OpenShortFloatHashMap.equals(java.lang.Object)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortFloatHashMapTest.testKeysSortedByValue(): ['OpenShortFloatHashMap.put(short,float)', 'ShortArrayList.size()', 'OpenShortFloatHashMap.indexOfKey(short)', 'ShortArrayList.toArray(short[])', 'OpenShortFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'OpenShortFloatHashMap.keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'OpenShortFloatHashMap.removeKey(short)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortFloatHashMapTest.testPairsSortedByKey(): ['OpenShortFloatHashMap.put(short,float)', 'ShortArrayList.size()', 'FloatArrayList.clear()', 'OpenShortFloatHashMap.pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.FloatArrayList)', 'OpenShortFloatHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.clear()', 'FloatArrayList.size()', 'OpenShortFloatHashMap.indexOfInsertion(short)', 'OpenShortFloatHashMap.pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.FloatArrayList)', 'OpenShortFloatHashMap.chooseLowWaterMark(int,double)', 'FloatArrayList.get(int)', 'ShortArrayList.get(int)', 'OpenShortFloatHashMap.rehash(int)', 'OpenShortFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testConstructors(): ['OpenByteFloatHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenByteFloatHashMapTest.testEnsureCapacity(): ['OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenByteFloatHashMap.getInternalFactors(int[],double[],double[])', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.rehash(int)', 'OpenByteFloatHashMap.nextPrime(int)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testClear(): ['OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.rehash(int)', 'OpenByteFloatHashMap.nextPrime(int)', 'OpenByteFloatHashMap.trimToSize()', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.indexOfKey(byte)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.size()', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.clear()', 'OpenByteFloatHashMap.get(byte)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testClone(): ['OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.rehash(int)', 'OpenByteFloatHashMap.nextPrime(int)', 'OpenByteFloatHashMap.clone()', 'OpenByteFloatHashMap.trimToSize()', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.size()', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.clear()', 'AbstractByteFloatMap.clone()', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testContainsKey(): ['OpenByteFloatHashMap.containsKey(byte)', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.indexOfKey(byte)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testContainValue(): ['OpenByteFloatHashMap.indexOfValue(float)', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.containsValue(float)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testForEachKey(): ['OpenByteFloatHashMap.forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.rehash(int)', 'ByteArrayList.size()', 'OpenByteFloatHashMap.removeKey(byte)', 'ByteArrayList.toArray(byte[])', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.indexOfKey(byte)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.put(byte,float)', 'ByteProcedure.apply(byte)', 'OpenByteFloatHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testForEachPair(): ['ByteFloatProcedure.apply(byte,float)', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.rehash(int)', 'OpenByteFloatHashMap.forEachPair(org.apache.mahout.math.function.ByteFloatProcedure)', 'OpenByteFloatHashMap.removeKey(byte)', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.indexOfKey(byte)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testGet(): ['OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.indexOfKey(byte)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.rehash(int)', 'OpenByteFloatHashMap.get(byte)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testAdjustOrPutValue(): ['OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.indexOfKey(byte)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.rehash(int)', 'OpenByteFloatHashMap.adjustOrPutValue(byte,float,float)', 'OpenByteFloatHashMap.get(byte)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testKeys(): ['ByteArrayList.get(int)', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.rehash(int)', 'ByteArrayList.elements()', 'ByteArrayList.setSize(int)', 'OpenByteFloatHashMap.keys()', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.sort()', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.keys(org.apache.mahout.math.list.ByteArrayList)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'FloatArrayList.ensureCapacity(int)', 'ByteArrayList.get(int)', 'OpenByteFloatHashMap.rehash(int)', 'FloatArrayList.size()', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.sort()', 'FloatArrayList.sort()', 'OpenByteFloatHashMap.put(byte,float)', 'ByteFloatProcedure.apply(byte,float)', 'FloatArrayList.clear()', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'FloatArrayList.add(float)', 'OpenByteFloatHashMap.pairsMatching(org.apache.mahout.math.function.ByteFloatProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.FloatArrayList)', 'ByteArrayList.ensureCapacity(int)', 'ByteArrayList.size()', 'Arrays.ensureCapacity(byte[],int)', 'OpenByteFloatHashMap.removeKey(byte)', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.indexOfKey(byte)', 'FloatArrayList.get(int)', 'OpenByteFloatHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testValues(): ['OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.rehash(int)', 'FloatArrayList.setSize(int)', 'FloatArrayList.size()', 'FloatArrayList.elements()', 'OpenByteFloatHashMap.removeKey(byte)', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.indexOfKey(byte)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.values(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.sort()', 'OpenByteFloatHashMap.put(byte,float)', 'FloatArrayList.get(int)', 'OpenByteFloatHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testCopy(): ['OpenByteFloatHashMap.copy()', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.rehash(int)', 'OpenByteFloatHashMap.nextPrime(int)', 'OpenByteFloatHashMap.trimToSize()', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.size()', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.clear()', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testEquals(): ['OpenByteFloatHashMap.equals(java.lang.Object)', 'OpenByteFloatHashMap.copy()', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.rehash(int)', 'OpenByteFloatHashMap.removeKey(byte)', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.indexOfKey(byte)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testKeysSortedByValue(): ['OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.rehash(int)', 'ByteArrayList.size()', 'ByteArrayList.toArray(byte[])', 'OpenByteFloatHashMap.removeKey(byte)', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.indexOfKey(byte)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'OpenByteFloatHashMap.keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteFloatHashMapTest.testPairsSortedByKey(): ['FloatArrayList.clear()', 'ByteArrayList.get(int)', 'OpenByteFloatHashMap.chooseLowWaterMark(int,double)', 'OpenByteFloatHashMap.rehash(int)', 'ByteArrayList.size()', 'FloatArrayList.size()', 'OpenByteFloatHashMap.pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.FloatArrayList)', 'ByteArrayList.clear()', 'OpenByteFloatHashMap.indexOfInsertion(byte)', 'OpenByteFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteFloatHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.get(int)', 'OpenByteFloatHashMap.put(byte,float)', 'OpenByteFloatHashMap.pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.FloatArrayList)', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testConstructors(): ['OpenByteLongHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenByteLongHashMapTest.testEnsureCapacity(): ['OpenByteLongHashMap.nextPrime(int)', 'PrimeFinder.nextPrime(int)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'OpenByteLongHashMap.ensureCapacity(int)', 'OpenByteLongHashMap.getInternalFactors(int[],double[],double[])', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testClear(): ['OpenByteLongHashMap.nextPrime(int)', 'OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'OpenByteLongHashMap.size()', 'OpenByteLongHashMap.trimToSize()', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteLongHashMap.get(byte)', 'OpenByteLongHashMap.indexOfKey(byte)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'OpenByteLongHashMap.clear()', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testClone(): ['OpenByteLongHashMap.nextPrime(int)', 'OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'OpenByteLongHashMap.size()', 'OpenByteLongHashMap.trimToSize()', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.clone()', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'OpenByteLongHashMap.clear()', 'AbstractByteLongMap.clone()', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testContainsKey(): ['OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'OpenByteLongHashMap.indexOfKey(byte)', 'OpenByteLongHashMap.containsKey(byte)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testContainValue(): ['OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'OpenByteLongHashMap.containsValue(long)', 'OpenByteLongHashMap.indexOfValue(long)', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testForEachKey(): ['OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.size()', 'ByteArrayList.toArray(byte[])', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteLongHashMap.forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'OpenByteLongHashMap.indexOfKey(byte)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'ByteProcedure.apply(byte)', 'OpenByteLongHashMap.removeKey(byte)', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testForEachPair(): ['OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteLongHashMap.forEachPair(org.apache.mahout.math.function.ByteLongProcedure)', 'OpenByteLongHashMap.indexOfKey(byte)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.chooseShrinkCapacity(int,double,double)', 'ByteLongProcedure.apply(byte,long)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'OpenByteLongHashMap.removeKey(byte)', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testGet(): ['OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'OpenByteLongHashMap.get(byte)', 'OpenByteLongHashMap.indexOfKey(byte)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testAdjustOrPutValue(): ['OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'OpenByteLongHashMap.get(byte)', 'OpenByteLongHashMap.adjustOrPutValue(byte,long,long)', 'OpenByteLongHashMap.indexOfKey(byte)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testKeys(): ['OpenByteLongHashMap.keys(org.apache.mahout.math.list.ByteArrayList)', 'OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.get(int)', 'ByteArrayList.elements()', 'ByteArrayList.setSize(int)', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'ByteArrayList.sort()', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'OpenByteLongHashMap.keys()', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testPairsMatching(): ['OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.get(int)', 'LongArrayList.get(int)', 'OpenByteLongHashMap.pairsMatching(org.apache.mahout.math.function.ByteLongProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.LongArrayList)', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'LongArrayList.clear()', 'LongArrayList.size()', 'ByteArrayList.sort()', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.chooseShrinkCapacity(int,double,double)', 'ByteLongProcedure.apply(byte,long)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.add(long)', 'OpenByteLongHashMap.removeKey(byte)', 'Arrays.ensureCapacity(long[],int)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'LongArrayList.sort()', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.ensureCapacity(int)', 'OpenByteLongHashMap.indexOfKey(byte)', 'OpenByteLongHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testValues(): ['LongArrayList.elements()', 'OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.values(org.apache.mahout.math.list.LongArrayList)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.get(int)', 'LongArrayList.sort()', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.size()', 'OpenByteLongHashMap.indexOfKey(byte)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.setSize(int)', 'OpenByteLongHashMap.removeKey(byte)', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testCopy(): ['OpenByteLongHashMap.nextPrime(int)', 'OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'OpenByteLongHashMap.copy()', 'OpenByteLongHashMap.size()', 'OpenByteLongHashMap.trimToSize()', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'OpenByteLongHashMap.clear()', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testEquals(): ['OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'OpenByteLongHashMap.copy()', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteLongHashMap.indexOfKey(byte)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'OpenByteLongHashMap.removeKey(byte)', 'OpenByteLongHashMap.equals(java.lang.Object)', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testKeysSortedByValue(): ['OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.size()', 'ByteArrayList.toArray(byte[])', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteLongHashMap.indexOfKey(byte)', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'OpenByteLongHashMap.removeKey(byte)', 'OpenByteLongHashMap.keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'HashFunctions.hash(short)']
OpenByteLongHashMapTest.testPairsSortedByKey(): ['OpenByteLongHashMap.put(byte,long)', 'OpenByteLongHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.get(int)', 'LongArrayList.get(int)', 'OpenByteLongHashMap.pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.LongArrayList)', 'ByteArrayList.size()', 'ByteArrayList.clear()', 'LongArrayList.clear()', 'OpenByteLongHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.size()', 'OpenByteLongHashMap.indexOfInsertion(byte)', 'OpenByteLongHashMap.rehash(int)', 'OpenByteLongHashMap.chooseHighWaterMark(int,double)', 'OpenByteLongHashMap.pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.LongArrayList)', 'HashFunctions.hash(short)']
OpenByteByteHashMapTest.testConstructors(): ['OpenByteByteHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenByteByteHashMapTest.testEnsureCapacity(): ['OpenByteByteHashMap.getInternalFactors(int[],double[],double[])', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'OpenByteByteHashMap.nextPrime(int)', 'OpenByteByteHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenByteByteHashMapTest.testClear(): ['OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'OpenByteByteHashMap.indexOfKey(byte)', 'OpenByteByteHashMap.rehash(int)', 'OpenByteByteHashMap.get(byte)', 'OpenByteByteHashMap.trimToSize()', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'OpenByteByteHashMap.size()', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.clear()', 'OpenByteByteHashMap.nextPrime(int)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testClone(): ['OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'AbstractByteByteMap.clone()', 'OpenByteByteHashMap.rehash(int)', 'OpenByteByteHashMap.trimToSize()', 'OpenByteByteHashMap.clone()', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'OpenByteByteHashMap.size()', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.clear()', 'OpenByteByteHashMap.nextPrime(int)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testContainsKey(): ['OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.indexOfKey(byte)', 'OpenByteByteHashMap.containsKey(byte)', 'OpenByteByteHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testContainValue(): ['OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'OpenByteByteHashMap.containsValue(byte)', 'OpenByteByteHashMap.indexOfValue(byte)', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testForEachKey(): ['OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'OpenByteByteHashMap.forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList.size()', 'OpenByteByteHashMap.indexOfKey(byte)', 'OpenByteByteHashMap.rehash(int)', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.toArray(byte[])', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.removeKey(byte)', 'OpenByteByteHashMap.chooseShrinkCapacity(int,double,double)', 'ByteProcedure.apply(byte)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testForEachPair(): ['OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'OpenByteByteHashMap.forEachPair(org.apache.mahout.math.function.ByteByteProcedure)', 'OpenByteByteHashMap.indexOfKey(byte)', 'OpenByteByteHashMap.rehash(int)', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'ByteByteProcedure.apply(byte,byte)', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.removeKey(byte)', 'OpenByteByteHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testGet(): ['OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.indexOfKey(byte)', 'OpenByteByteHashMap.get(byte)', 'OpenByteByteHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testAdjustOrPutValue(): ['OpenByteByteHashMap.adjustOrPutValue(byte,byte,byte)', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.rehash(int)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.indexOfKey(byte)', 'OpenByteByteHashMap.get(byte)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testKeys(): ['OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'ByteArrayList.get(int)', 'ByteArrayList.elements()', 'ByteArrayList.setSize(int)', 'OpenByteByteHashMap.rehash(int)', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.sort()', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.keys()', 'OpenByteByteHashMap.keys(org.apache.mahout.math.list.ByteArrayList)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testPairsMatching(): ['OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'OpenByteByteHashMap.pairsMatching(org.apache.mahout.math.function.ByteByteProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.get(int)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'OpenByteByteHashMap.indexOfKey(byte)', 'OpenByteByteHashMap.rehash(int)', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.sort()', 'ByteByteProcedure.apply(byte,byte)', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.removeKey(byte)', 'OpenByteByteHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testValues(): ['OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'HashFunctions.hash(short)', 'ByteArrayList.get(int)', 'ByteArrayList.size()', 'OpenByteByteHashMap.indexOfKey(byte)', 'ByteArrayList.setSize(int)', 'OpenByteByteHashMap.values(org.apache.mahout.math.list.ByteArrayList)', 'OpenByteByteHashMap.rehash(int)', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.sort()', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.removeKey(byte)', 'OpenByteByteHashMap.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.elements()', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testCopy(): ['OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'OpenByteByteHashMap.rehash(int)', 'OpenByteByteHashMap.trimToSize()', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'OpenByteByteHashMap.size()', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.copy()', 'OpenByteByteHashMap.clear()', 'OpenByteByteHashMap.nextPrime(int)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testEquals(): ['OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'OpenByteByteHashMap.indexOfKey(byte)', 'OpenByteByteHashMap.rehash(int)', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.copy()', 'OpenByteByteHashMap.removeKey(byte)', 'OpenByteByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteByteHashMap.equals(java.lang.Object)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testKeysSortedByValue(): ['OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'ByteArrayList.size()', 'OpenByteByteHashMap.indexOfKey(byte)', 'OpenByteByteHashMap.rehash(int)', 'OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.toArray(byte[])', 'OpenByteByteHashMap.put(byte,byte)', 'OpenByteByteHashMap.keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'OpenByteByteHashMap.removeKey(byte)', 'OpenByteByteHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenByteByteHashMapTest.testPairsSortedByKey(): ['OpenByteByteHashMap.chooseLowWaterMark(int,double)', 'OpenByteByteHashMap.pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ByteArrayList)', 'OpenByteByteHashMap.chooseHighWaterMark(int,double)', 'OpenByteByteHashMap.rehash(int)', 'OpenByteByteHashMap.indexOfInsertion(byte)', 'ByteArrayList.get(int)', 'OpenByteByteHashMap.pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ByteArrayList)', 'OpenByteByteHashMap.put(byte,byte)', 'ByteArrayList.size()', 'ByteArrayList.clear()', 'HashFunctions.hash(short)', 'OpenByteByteHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleCharHashMapTest.testConstructors(): ['OpenDoubleCharHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenDoubleCharHashMapTest.testEnsureCapacity(): ['OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'HashFunctions.hash(double)', 'PrimeFinder.nextPrime(int)', 'OpenDoubleCharHashMap.nextPrime(int)', 'OpenDoubleCharHashMap.getInternalFactors(int[],double[],double[])', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleCharHashMap.ensureCapacity(int)']
OpenDoubleCharHashMapTest.testClear(): ['OpenDoubleCharHashMap.size()', 'OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleCharHashMap.trimToSize()', 'OpenDoubleCharHashMap.indexOfKey(double)', 'OpenDoubleCharHashMap.nextPrime(int)', 'OpenDoubleCharHashMap.put(double,char)', 'OpenDoubleCharHashMap.get(double)', 'OpenDoubleCharHashMap.clear()']
OpenDoubleCharHashMapTest.testClone(): ['OpenDoubleCharHashMap.size()', 'OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.clone()', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleCharHashMap.trimToSize()', 'OpenDoubleCharHashMap.nextPrime(int)', 'AbstractDoubleCharMap.clone()', 'OpenDoubleCharHashMap.put(double,char)', 'OpenDoubleCharHashMap.clear()']
OpenDoubleCharHashMapTest.testContainsKey(): ['OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.containsKey(double)', 'OpenDoubleCharHashMap.indexOfKey(double)', 'OpenDoubleCharHashMap.put(double,char)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)']
OpenDoubleCharHashMapTest.testContainValue(): ['OpenDoubleCharHashMap.indexOfValue(char)', 'OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.put(double,char)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleCharHashMap.containsValue(char)']
OpenDoubleCharHashMapTest.testForEachKey(): ['OpenDoubleCharHashMap.rehash(int)', 'DoubleArrayList.toArray(double[])', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleCharHashMap.removeKey(double)', 'OpenDoubleCharHashMap.indexOfKey(double)', 'DoubleArrayList.size()', 'OpenDoubleCharHashMap.put(double,char)', 'DoubleProcedure.apply(double)', 'OpenDoubleCharHashMap.forEachKey(org.apache.mahout.math.function.DoubleProcedure)']
OpenDoubleCharHashMapTest.testForEachPair(): ['OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'DoubleCharProcedure.apply(double,char)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.forEachPair(org.apache.mahout.math.function.DoubleCharProcedure)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleCharHashMap.removeKey(double)', 'OpenDoubleCharHashMap.indexOfKey(double)', 'OpenDoubleCharHashMap.put(double,char)']
OpenDoubleCharHashMapTest.testGet(): ['OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.indexOfKey(double)', 'OpenDoubleCharHashMap.put(double,char)', 'OpenDoubleCharHashMap.get(double)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)']
OpenDoubleCharHashMapTest.testAdjustOrPutValue(): ['OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.indexOfKey(double)', 'OpenDoubleCharHashMap.put(double,char)', 'OpenDoubleCharHashMap.get(double)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.adjustOrPutValue(double,char,char)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)']
OpenDoubleCharHashMapTest.testKeys(): ['OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.keys(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'DoubleArrayList.setSize(int)', 'OpenDoubleCharHashMap.keys()', 'OpenDoubleCharHashMap.put(double,char)']
OpenDoubleCharHashMapTest.testPairsMatching(): ['OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'DoubleCharProcedure.apply(double,char)', 'DoubleArrayList.sort()', 'DoubleArrayList.add(double)', 'OpenDoubleCharHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.sort()', 'OpenDoubleCharHashMap.indexOfKey(double)', 'CharArrayList.get(int)', 'DoubleArrayList.size()', 'Arrays.ensureCapacity(double[],int)', 'OpenDoubleCharHashMap.put(double,char)', 'DoubleArrayList.ensureCapacity(int)', 'OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.pairsMatching(org.apache.mahout.math.function.DoubleCharProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.CharArrayList)', 'CharArrayList.ensureCapacity(int)', 'DoubleArrayList.get(int)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.size()', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleCharHashMap.removeKey(double)', 'DoubleArrayList.clear()', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.clear()', 'CharArrayList.add(char)']
OpenDoubleCharHashMapTest.testValues(): ['OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'CharArrayList.elements()', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.size()', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleCharHashMap.values(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenDoubleCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleCharHashMap.removeKey(double)', 'OpenDoubleCharHashMap.indexOfKey(double)', 'CharArrayList.get(int)', 'OpenDoubleCharHashMap.put(double,char)']
OpenDoubleCharHashMapTest.testCopy(): ['OpenDoubleCharHashMap.size()', 'OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleCharHashMap.trimToSize()', 'OpenDoubleCharHashMap.nextPrime(int)', 'OpenDoubleCharHashMap.put(double,char)', 'OpenDoubleCharHashMap.copy()', 'OpenDoubleCharHashMap.clear()']
OpenDoubleCharHashMapTest.testEquals(): ['OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.equals(java.lang.Object)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleCharHashMap.removeKey(double)', 'OpenDoubleCharHashMap.indexOfKey(double)', 'OpenDoubleCharHashMap.put(double,char)', 'OpenDoubleCharHashMap.copy()']
OpenDoubleCharHashMapTest.testKeysSortedByValue(): ['OpenDoubleCharHashMap.rehash(int)', 'DoubleArrayList.toArray(double[])', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'OpenDoubleCharHashMap.keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleCharHashMap.removeKey(double)', 'OpenDoubleCharHashMap.indexOfKey(double)', 'DoubleArrayList.size()', 'OpenDoubleCharHashMap.put(double,char)']
OpenDoubleCharHashMapTest.testPairsSortedByKey(): ['OpenDoubleCharHashMap.rehash(int)', 'OpenDoubleCharHashMap.pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenDoubleCharHashMap.indexOfInsertion(double)', 'OpenDoubleCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleCharHashMap.pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.CharArrayList)', 'HashFunctions.hash(double)', 'DoubleArrayList.get(int)', 'OpenDoubleCharHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.size()', 'OpenDoubleCharHashMap.chooseHighWaterMark(int,double)', 'DoubleArrayList.clear()', 'CharArrayList.get(int)', 'DoubleArrayList.size()', 'CharArrayList.clear()', 'OpenDoubleCharHashMap.put(double,char)']
OpenShortIntHashMapTest.testConstructors(): ['OpenShortIntHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenShortIntHashMapTest.testEnsureCapacity(): ['PrimeFinder.nextPrime(int)', 'OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.getInternalFactors(int[],double[],double[])', 'OpenShortIntHashMap.nextPrime(int)', 'OpenShortIntHashMap.ensureCapacity(int)', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testClear(): ['OpenShortIntHashMap.size()', 'OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.get(short)', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'OpenShortIntHashMap.indexOfKey(short)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.trimToSize()', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.clear()', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.nextPrime(int)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testClone(): ['AbstractShortIntMap.clone()', 'OpenShortIntHashMap.size()', 'OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.trimToSize()', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.clear()', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.nextPrime(int)', 'OpenShortIntHashMap.clone()', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testContainsKey(): ['OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.indexOfKey(short)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.containsKey(short)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testContainValue(): ['OpenShortIntHashMap.indexOfValue(int)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.containsValue(int)', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testForEachKey(): ['ShortArrayList.size()', 'ShortArrayList.toArray(short[])', 'OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'ShortProcedure.apply(short)', 'OpenShortIntHashMap.forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'OpenShortIntHashMap.indexOfKey(short)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.removeKey(short)', 'OpenShortIntHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testForEachPair(): ['OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'OpenShortIntHashMap.indexOfKey(short)', 'OpenShortIntHashMap.forEachPair(org.apache.mahout.math.function.ShortIntProcedure)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.rehash(int)', 'ShortIntProcedure.apply(short,int)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.removeKey(short)', 'OpenShortIntHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testGet(): ['OpenShortIntHashMap.indexOfKey(short)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.get(short)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testAdjustOrPutValue(): ['OpenShortIntHashMap.adjustOrPutValue(short,int,int)', 'OpenShortIntHashMap.indexOfKey(short)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.get(short)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testKeys(): ['OpenShortIntHashMap.indexOfInsertion(short)', 'ShortArrayList.elements()', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.keys(org.apache.mahout.math.list.ShortArrayList)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.sort()', 'OpenShortIntHashMap.put(short,int)', 'ShortArrayList.setSize(int)', 'OpenShortIntHashMap.rehash(int)', 'ShortArrayList.get(int)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.keys()', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testPairsMatching(): ['OpenShortIntHashMap.indexOfInsertion(short)', 'IntArrayList.sort()', 'ShortArrayList.clear()', 'IntArrayList.size()', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'OpenShortIntHashMap.indexOfKey(short)', 'IntArrayList.ensureCapacity(int)', 'OpenShortIntHashMap.pairsMatching(org.apache.mahout.math.function.ShortIntProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.IntArrayList)', 'Arrays.ensureCapacity(int[],int)', 'IntArrayList.clear()', 'OpenShortIntHashMap.removeKey(short)', 'OpenShortIntHashMap.chooseShrinkCapacity(int,double,double)', 'ShortArrayList.size()', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'IntArrayList.add(int)', 'IntArrayList.get(int)', 'ShortArrayList.sort()', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.rehash(int)', 'ShortArrayList.get(int)', 'ShortIntProcedure.apply(short,int)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'ShortArrayList.add(short)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testValues(): ['OpenShortIntHashMap.values(org.apache.mahout.math.list.IntArrayList)', 'OpenShortIntHashMap.indexOfInsertion(short)', 'IntArrayList.sort()', 'IntArrayList.elements()', 'IntArrayList.setSize(int)', 'IntArrayList.size()', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenShortIntHashMap.indexOfKey(short)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.removeKey(short)', 'OpenShortIntHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testCopy(): ['OpenShortIntHashMap.size()', 'OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.copy()', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.trimToSize()', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.clear()', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.nextPrime(int)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testEquals(): ['OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.copy()', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'OpenShortIntHashMap.equals(java.lang.Object)', 'OpenShortIntHashMap.indexOfKey(short)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.removeKey(short)', 'OpenShortIntHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testKeysSortedByValue(): ['ShortArrayList.size()', 'ShortArrayList.toArray(short[])', 'OpenShortIntHashMap.indexOfInsertion(short)', 'OpenShortIntHashMap.keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'OpenShortIntHashMap.indexOfKey(short)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.rehash(int)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortIntHashMap.removeKey(short)', 'OpenShortIntHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortIntHashMapTest.testPairsSortedByKey(): ['OpenShortIntHashMap.pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.IntArrayList)', 'ShortArrayList.size()', 'OpenShortIntHashMap.pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.IntArrayList)', 'OpenShortIntHashMap.indexOfInsertion(short)', 'ShortArrayList.clear()', 'IntArrayList.size()', 'OpenShortIntHashMap.chooseLowWaterMark(int,double)', 'OpenShortIntHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenShortIntHashMap.put(short,int)', 'OpenShortIntHashMap.rehash(int)', 'ShortArrayList.get(int)', 'OpenShortIntHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.clear()', 'HashFunctions.hash(short)']
OpenObjectByteHashMapTest.testConstructors(): ['OpenObjectByteHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenObjectByteHashMapTest.testEnsureCapacity(): ['OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'PrimeFinder.nextPrime(int)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.nextPrime(int)', 'OpenObjectByteHashMap.getInternalFactors(int[],double[],double[])', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)', 'OpenObjectByteHashMap.ensureCapacity(int)']
OpenObjectByteHashMapTest.testClear(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.trimToSize()', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.clear()', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.nextPrime(int)', 'OpenObjectByteHashMap.size()']
OpenObjectByteHashMapTest.testClone(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.trimToSize()', 'AbstractObjectByteMap.clone()', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.clear()', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.nextPrime(int)', 'OpenObjectByteHashMap.size()', 'OpenObjectByteHashMap.clone()']
OpenObjectByteHashMapTest.testContainsKey(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.indexOfKey(java.lang.Object)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.containsKey(java.lang.Object)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)']
OpenObjectByteHashMapTest.testContainValue(): ['OpenObjectByteHashMap.containsValue(byte)', 'OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.indexOfValue(byte)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)']
OpenObjectByteHashMapTest.testForEachKey(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'ObjectProcedure.apply(java.lang.Object)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)', 'OpenObjectByteHashMap.forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.indexOfKey(java.lang.Object)', 'OpenObjectByteHashMap.removeKey(java.lang.Object)']
OpenObjectByteHashMapTest.testForEachPair(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)', 'OpenObjectByteHashMap.forEachPair(org.apache.mahout.math.function.ObjectByteProcedure)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.indexOfKey(java.lang.Object)', 'OpenObjectByteHashMap.removeKey(java.lang.Object)', 'ObjectByteProcedure.apply(java.lang.Object,byte)']
OpenObjectByteHashMapTest.testGet(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.indexOfKey(java.lang.Object)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.get(java.lang.Object)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)']
OpenObjectByteHashMapTest.testKeys(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.keys(java.util.List)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.keys()', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)']
OpenObjectByteHashMapTest.testAdjustOrPutValue(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.indexOfKey(java.lang.Object)', 'OpenObjectByteHashMap.adjustOrPutValue(java.lang.Object,byte,byte)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.get(java.lang.Object)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)']
OpenObjectByteHashMapTest.testPairsMatching(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.pairsMatching(org.apache.mahout.math.function.ObjectByteProcedure,java.util.List,org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.get(int)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'ByteArrayList.ensureCapacity(int)', 'OpenObjectByteHashMap.rehash(int)', 'ByteArrayList.size()', 'Arrays.ensureCapacity(byte[],int)', 'OpenObjectByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'ByteArrayList.sort()', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.indexOfKey(java.lang.Object)', 'OpenObjectByteHashMap.removeKey(java.lang.Object)', 'ObjectByteProcedure.apply(java.lang.Object,byte)']
OpenObjectByteHashMapTest.testValues(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'ByteArrayList.get(int)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.rehash(int)', 'ByteArrayList.size()', 'OpenObjectByteHashMap.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.setSize(int)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)', 'OpenObjectByteHashMap.values(org.apache.mahout.math.list.ByteArrayList)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'ByteArrayList.sort()', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.indexOfKey(java.lang.Object)', 'OpenObjectByteHashMap.removeKey(java.lang.Object)', 'ByteArrayList.elements()']
OpenObjectByteHashMapTest.testCopy(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.trimToSize()', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.copy()', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.clear()', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.nextPrime(int)', 'OpenObjectByteHashMap.size()']
OpenObjectByteHashMapTest.testEquals(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.copy()', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)', 'OpenObjectByteHashMap.equals(java.lang.Object)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.indexOfKey(java.lang.Object)', 'OpenObjectByteHashMap.removeKey(java.lang.Object)']
OpenObjectByteHashMapTest.testKeysSortedByValue(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.indexOfKey(java.lang.Object)', 'OpenObjectByteHashMap.removeKey(java.lang.Object)', 'OpenObjectByteHashMap.keysSortedByValue(java.util.List)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)']
OpenObjectByteHashMapTest.testPairsSortedByKey(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'ByteArrayList.get(int)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ByteArrayList)', 'OpenObjectByteHashMap.rehash(int)', 'ByteArrayList.size()', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)']
OpenObjectByteHashMapTest.testPairsSortedByKeyNotComparable(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ByteArrayList)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)']
OpenObjectByteHashMapTest.testPairsSortedByValue(): ['OpenObjectByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectByteHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'ByteArrayList.get(int)', 'OpenObjectByteHashMap.chooseLowWaterMark(int,double)', 'OpenObjectByteHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectByteHashMap.put(java.lang.Object,byte)', 'OpenObjectByteHashMap.rehash(int)', 'OpenObjectByteHashMap.pairsSortedByValue(java.util.List,org.apache.mahout.math.list.ByteArrayList)', 'OpenObjectByteHashMap.chooseHighWaterMark(int,double)']
OpenIntCharHashMapTest.testConstructors(): ['OpenIntCharHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenIntCharHashMapTest.testEnsureCapacity(): ['OpenIntCharHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.ensureCapacity(int)', 'OpenIntCharHashMap.nextPrime(int)', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)']
OpenIntCharHashMapTest.testClear(): ['OpenIntCharHashMap.size()', 'OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'OpenIntCharHashMap.clear()', 'OpenIntCharHashMap.trimToSize()', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.nextPrime(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'OpenIntCharHashMap.get(int)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntCharHashMap.indexOfKey(int)']
OpenIntCharHashMapTest.testClone(): ['OpenIntCharHashMap.size()', 'OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'OpenIntCharHashMap.clear()', 'OpenIntCharHashMap.trimToSize()', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.nextPrime(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'OpenIntCharHashMap.clone()', 'AbstractIntCharMap.clone()', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)']
OpenIntCharHashMapTest.testContainsKey(): ['OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.containsKey(int)', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'OpenIntCharHashMap.indexOfKey(int)']
OpenIntCharHashMapTest.testContainValue(): ['OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.indexOfValue(char)', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'OpenIntCharHashMap.containsValue(char)']
OpenIntCharHashMapTest.testForEachKey(): ['OpenIntCharHashMap.removeKey(int)', 'OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'IntArrayList.toArray(int[])', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.size()', 'IntProcedure.apply(int)', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntCharHashMap.forEachKey(org.apache.mahout.math.function.IntProcedure)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntCharHashMap.indexOfKey(int)']
OpenIntCharHashMapTest.testForEachPair(): ['OpenIntCharHashMap.removeKey(int)', 'OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'IntCharProcedure.apply(int,char)', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntCharHashMap.forEachPair(org.apache.mahout.math.function.IntCharProcedure)', 'OpenIntCharHashMap.indexOfKey(int)']
OpenIntCharHashMapTest.testGet(): ['OpenIntCharHashMap.get(int)', 'OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'OpenIntCharHashMap.indexOfKey(int)']
OpenIntCharHashMapTest.testAdjustOrPutValue(): ['OpenIntCharHashMap.adjustOrPutValue(int,char,char)', 'OpenIntCharHashMap.get(int)', 'OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'OpenIntCharHashMap.indexOfKey(int)']
OpenIntCharHashMapTest.testKeys(): ['OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'OpenIntCharHashMap.keys()', 'IntArrayList.sort()', 'IntArrayList.elements()', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.setSize(int)', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'OpenIntCharHashMap.keys(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.get(int)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)']
OpenIntCharHashMapTest.testPairsMatching(): ['OpenIntCharHashMap.removeKey(int)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'IntArrayList.sort()', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.pairsMatching(org.apache.mahout.math.function.IntCharProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.CharArrayList)', 'IntCharProcedure.apply(int,char)', 'IntArrayList.size()', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.sort()', 'CharArrayList.get(int)', 'OpenIntCharHashMap.chooseShrinkCapacity(int,double,double)', 'IntArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(int[],int)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.clear()', 'OpenIntCharHashMap.indexOfKey(int)', 'OpenIntCharHashMap.put(int,char)', 'CharArrayList.ensureCapacity(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.size()', 'IntArrayList.add(int)', 'IntArrayList.get(int)', 'HashFunctions.hash(int)', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.clear()', 'CharArrayList.add(char)']
OpenIntCharHashMapTest.testValues(): ['OpenIntCharHashMap.removeKey(int)', 'OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'CharArrayList.elements()', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.size()', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'HashFunctions.hash(int)', 'CharArrayList.get(int)', 'OpenIntCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntCharHashMap.values(org.apache.mahout.math.list.CharArrayList)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntCharHashMap.indexOfKey(int)']
OpenIntCharHashMapTest.testCopy(): ['OpenIntCharHashMap.size()', 'OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'OpenIntCharHashMap.clear()', 'OpenIntCharHashMap.trimToSize()', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.nextPrime(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.copy()', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)']
OpenIntCharHashMapTest.testEquals(): ['OpenIntCharHashMap.removeKey(int)', 'OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.equals(java.lang.Object)', 'OpenIntCharHashMap.copy()', 'OpenIntCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntCharHashMap.indexOfKey(int)']
OpenIntCharHashMapTest.testKeysSortedByValue(): ['OpenIntCharHashMap.removeKey(int)', 'OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'OpenIntCharHashMap.keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.toArray(int[])', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.size()', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntCharHashMap.indexOfKey(int)']
OpenIntCharHashMapTest.testPairsSortedByKey(): ['OpenIntCharHashMap.put(int,char)', 'OpenIntCharHashMap.indexOfInsertion(int)', 'OpenIntCharHashMap.rehash(int)', 'OpenIntCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.size()', 'IntArrayList.size()', 'OpenIntCharHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.get(int)', 'HashFunctions.hash(int)', 'CharArrayList.get(int)', 'CharArrayList.clear()', 'OpenIntCharHashMap.pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenIntCharHashMap.pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenIntCharHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.clear()']
OpenLongObjectHashMapTest.testConstructors(): ['OpenLongObjectHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenLongObjectHashMapTest.testEnsureCapacity(): ['OpenLongObjectHashMap.nextPrime(int)', 'PrimeFinder.nextPrime(int)', 'OpenLongObjectHashMap.getInternalFactors(int[],double[],double[])', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.ensureCapacity(int)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testClear(): ['OpenLongObjectHashMap.indexOfKey(long)', 'OpenLongObjectHashMap.nextPrime(int)', 'OpenLongObjectHashMap.trimToSize()', 'OpenLongObjectHashMap.containsKey(long)', 'OpenLongObjectHashMap.size()', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.get(long)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.clear()', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testClone(): ['OpenLongObjectHashMap.nextPrime(int)', 'OpenLongObjectHashMap.trimToSize()', 'OpenLongObjectHashMap.size()', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.clear()', 'AbstractLongObjectMap.clone()', 'OpenLongObjectHashMap.clone()', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testContainsKey(): ['OpenLongObjectHashMap.indexOfKey(long)', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.containsKey(long)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testContainValue(): ['OpenLongObjectHashMap.indexOfValue(java.lang.Object)', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.containsValue(java.lang.Object)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testForEachKey(): ['LongArrayList.toArray(long[])', 'OpenLongObjectHashMap.indexOfKey(long)', 'OpenLongObjectHashMap.removeKey(long)', 'LongProcedure.apply(long)', 'LongArrayList.size()', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.forEachKey(org.apache.mahout.math.function.LongProcedure)', 'OpenLongObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testForEachPair(): ['LongObjectProcedure.apply(long,java.lang.Object)', 'OpenLongObjectHashMap.indexOfKey(long)', 'OpenLongObjectHashMap.removeKey(long)', 'OpenLongObjectHashMap.forEachPair(org.apache.mahout.math.function.LongObjectProcedure)', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testGet(): ['OpenLongObjectHashMap.indexOfKey(long)', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.get(long)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testKeys(): ['LongArrayList.elements()', 'LongArrayList.get(int)', 'OpenLongObjectHashMap.keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.sort()', 'OpenLongObjectHashMap.keys()', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'LongArrayList.setSize(int)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testPairsMatching(): ['LongObjectProcedure.apply(long,java.lang.Object)', 'OpenLongObjectHashMap.indexOfKey(long)', 'LongArrayList.get(int)', 'Arrays.ensureCapacity(long[],int)', 'OpenLongObjectHashMap.removeKey(long)', 'LongArrayList.clear()', 'LongArrayList.sort()', 'LongArrayList.size()', 'OpenLongObjectHashMap.pairsMatching(org.apache.mahout.math.function.LongObjectProcedure,org.apache.mahout.math.list.LongArrayList,java.util.List)', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'LongArrayList.ensureCapacity(int)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'LongArrayList.add(long)', 'OpenLongObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testValues(): ['OpenLongObjectHashMap.values(java.util.List)', 'OpenLongObjectHashMap.indexOfKey(long)', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.removeKey(long)', 'OpenLongObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testCopy(): ['OpenLongObjectHashMap.nextPrime(int)', 'OpenLongObjectHashMap.trimToSize()', 'OpenLongObjectHashMap.copy()', 'OpenLongObjectHashMap.size()', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.clear()', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testEquals(): ['OpenLongObjectHashMap.indexOfKey(long)', 'OpenLongObjectHashMap.copy()', 'OpenLongObjectHashMap.removeKey(long)', 'OpenLongObjectHashMap.equals(java.lang.Object)', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testKeysSortedByValue(): ['LongArrayList.toArray(long[])', 'OpenLongObjectHashMap.indexOfKey(long)', 'OpenLongObjectHashMap.removeKey(long)', 'OpenLongObjectHashMap.keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.size()', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testPairsSortedByKey(): ['OpenLongObjectHashMap.pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,java.util.List)', 'LongArrayList.size()', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.get(int)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.rehash(int)']
OpenLongObjectHashMapTest.testPairsSortedByValue(): ['OpenLongObjectHashMap.pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,java.util.List)', 'OpenLongObjectHashMap.put(long,java.lang.Object)', 'OpenLongObjectHashMap.chooseLowWaterMark(int,double)', 'OpenLongObjectHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.get(int)', 'OpenLongObjectHashMap.indexOfInsertion(long)', 'OpenLongObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongObjectHashMap.rehash(int)']
OpenObjectFloatHashMapTest.testConstructors(): ['OpenObjectFloatHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenObjectFloatHashMapTest.testEnsureCapacity(): ['OpenObjectFloatHashMap.getInternalFactors(int[],double[],double[])', 'OpenObjectFloatHashMap.ensureCapacity(int)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'PrimeFinder.nextPrime(int)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.nextPrime(int)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testClear(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.size()', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.trimToSize()', 'OpenObjectFloatHashMap.clear()', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.nextPrime(int)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testClone(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.size()', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.clone()', 'OpenObjectFloatHashMap.trimToSize()', 'OpenObjectFloatHashMap.clear()', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'AbstractObjectFloatMap.clone()', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.nextPrime(int)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testContainsKey(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.containsKey(java.lang.Object)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)', 'OpenObjectFloatHashMap.indexOfKey(java.lang.Object)']
OpenObjectFloatHashMapTest.testContainValue(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.indexOfValue(float)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.containsValue(float)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testForEachKey(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.rehash(int)', 'ObjectProcedure.apply(java.lang.Object)', 'OpenObjectFloatHashMap.indexOfKey(java.lang.Object)', 'OpenObjectFloatHashMap.forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'OpenObjectFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.removeKey(java.lang.Object)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testForEachPair(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'ObjectFloatProcedure.apply(java.lang.Object,float)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.indexOfKey(java.lang.Object)', 'OpenObjectFloatHashMap.forEachPair(org.apache.mahout.math.function.ObjectFloatProcedure)', 'OpenObjectFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.removeKey(java.lang.Object)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testGet(): ['OpenObjectFloatHashMap.get(java.lang.Object)', 'OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)', 'OpenObjectFloatHashMap.indexOfKey(java.lang.Object)']
OpenObjectFloatHashMapTest.testKeys(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.keys(java.util.List)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.keys()', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testAdjustOrPutValue(): ['OpenObjectFloatHashMap.get(java.lang.Object)', 'OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.adjustOrPutValue(java.lang.Object,float,float)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)', 'OpenObjectFloatHashMap.indexOfKey(java.lang.Object)']
OpenObjectFloatHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'ObjectFloatProcedure.apply(java.lang.Object,float)', 'FloatArrayList.ensureCapacity(int)', 'OpenObjectFloatHashMap.rehash(int)', 'FloatArrayList.clear()', 'FloatArrayList.add(float)', 'FloatArrayList.size()', 'OpenObjectFloatHashMap.indexOfKey(java.lang.Object)', 'OpenObjectFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.pairsMatching(org.apache.mahout.math.function.ObjectFloatProcedure,java.util.List,org.apache.mahout.math.list.FloatArrayList)', 'OpenObjectFloatHashMap.removeKey(java.lang.Object)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'FloatArrayList.sort()', 'FloatArrayList.get(int)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testValues(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.values(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.setSize(int)', 'FloatArrayList.size()', 'FloatArrayList.elements()', 'OpenObjectFloatHashMap.indexOfKey(java.lang.Object)', 'OpenObjectFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.removeKey(java.lang.Object)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'FloatArrayList.sort()', 'FloatArrayList.get(int)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testCopy(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.size()', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.trimToSize()', 'OpenObjectFloatHashMap.clear()', 'OpenObjectFloatHashMap.copy()', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.nextPrime(int)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testEquals(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.equals(java.lang.Object)', 'OpenObjectFloatHashMap.indexOfKey(java.lang.Object)', 'OpenObjectFloatHashMap.copy()', 'OpenObjectFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.removeKey(java.lang.Object)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testKeysSortedByValue(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.removeKey(java.lang.Object)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.keysSortedByValue(java.util.List)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)', 'OpenObjectFloatHashMap.indexOfKey(java.lang.Object)']
OpenObjectFloatHashMapTest.testPairsSortedByKey(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.get(int)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.size()', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testPairsSortedByKeyNotComparable(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.FloatArrayList)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenObjectFloatHashMapTest.testPairsSortedByValue(): ['OpenObjectFloatHashMap.put(java.lang.Object,float)', 'OpenObjectFloatHashMap.pairsSortedByValue(java.util.List,org.apache.mahout.math.list.FloatArrayList)', 'OpenObjectFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectFloatHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectFloatHashMap.rehash(int)', 'OpenObjectFloatHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'FloatArrayList.get(int)', 'OpenObjectFloatHashMap.chooseHighWaterMark(int,double)', 'OpenObjectFloatHashMap.chooseLowWaterMark(int,double)']
OpenShortLongHashMapTest.testConstructors(): ['OpenShortLongHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenShortLongHashMapTest.testEnsureCapacity(): ['PrimeFinder.nextPrime(int)', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.ensureCapacity(int)', 'OpenShortLongHashMap.getInternalFactors(int[],double[],double[])', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.nextPrime(int)', 'OpenShortLongHashMap.rehash(int)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testClear(): ['OpenShortLongHashMap.size()', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.get(short)', 'OpenShortLongHashMap.clear()', 'OpenShortLongHashMap.trimToSize()', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.indexOfKey(short)', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortLongHashMap.put(short,long)', 'OpenShortLongHashMap.nextPrime(int)', 'OpenShortLongHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testClone(): ['OpenShortLongHashMap.size()', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.clear()', 'OpenShortLongHashMap.trimToSize()', 'OpenShortLongHashMap.indexOfInsertion(short)', 'AbstractShortLongMap.clone()', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.clone()', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortLongHashMap.put(short,long)', 'OpenShortLongHashMap.nextPrime(int)', 'OpenShortLongHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testContainsKey(): ['OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.put(short,long)', 'OpenShortLongHashMap.containsKey(short)', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.rehash(int)', 'OpenShortLongHashMap.indexOfKey(short)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testContainValue(): ['OpenShortLongHashMap.indexOfValue(long)', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortLongHashMap.containsValue(long)', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.put(short,long)', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.rehash(int)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testForEachKey(): ['OpenShortLongHashMap.removeKey(short)', 'ShortArrayList.size()', 'ShortArrayList.toArray(short[])', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortLongHashMap.indexOfKey(short)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'ShortProcedure.apply(short)', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortLongHashMap.put(short,long)', 'OpenShortLongHashMap.forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'OpenShortLongHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testForEachPair(): ['OpenShortLongHashMap.removeKey(short)', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.chooseShrinkCapacity(int,double,double)', 'ShortLongProcedure.apply(short,long)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.indexOfKey(short)', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortLongHashMap.forEachPair(org.apache.mahout.math.function.ShortLongProcedure)', 'OpenShortLongHashMap.put(short,long)', 'OpenShortLongHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testGet(): ['OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.get(short)', 'OpenShortLongHashMap.put(short,long)', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.rehash(int)', 'OpenShortLongHashMap.indexOfKey(short)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testAdjustOrPutValue(): ['OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.get(short)', 'OpenShortLongHashMap.put(short,long)', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.adjustOrPutValue(short,long,long)', 'OpenShortLongHashMap.rehash(int)', 'OpenShortLongHashMap.indexOfKey(short)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testKeys(): ['OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.keys(org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.elements()', 'OpenShortLongHashMap.keys()', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'ShortArrayList.sort()', 'OpenShortLongHashMap.put(short,long)', 'ShortArrayList.setSize(int)', 'ShortArrayList.get(int)', 'OpenShortLongHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testPairsMatching(): ['OpenShortLongHashMap.removeKey(short)', 'LongArrayList.get(int)', 'ShortArrayList.clear()', 'ShortLongProcedure.apply(short,long)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.clear()', 'LongArrayList.size()', 'OpenShortLongHashMap.put(short,long)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'ShortArrayList.size()', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortLongHashMap.indexOfKey(short)', 'LongArrayList.sort()', 'ShortArrayList.sort()', 'LongArrayList.ensureCapacity(int)', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)', 'OpenShortLongHashMap.rehash(int)', 'OpenShortLongHashMap.pairsMatching(org.apache.mahout.math.function.ShortLongProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.LongArrayList)']
OpenShortLongHashMapTest.testValues(): ['OpenShortLongHashMap.removeKey(short)', 'LongArrayList.elements()', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.get(int)', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortLongHashMap.indexOfKey(short)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.sort()', 'OpenShortLongHashMap.values(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.size()', 'OpenShortLongHashMap.put(short,long)', 'LongArrayList.setSize(int)', 'OpenShortLongHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testCopy(): ['OpenShortLongHashMap.size()', 'OpenShortLongHashMap.copy()', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.clear()', 'OpenShortLongHashMap.trimToSize()', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortLongHashMap.put(short,long)', 'OpenShortLongHashMap.nextPrime(int)', 'OpenShortLongHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testEquals(): ['OpenShortLongHashMap.removeKey(short)', 'OpenShortLongHashMap.copy()', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.indexOfKey(short)', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortLongHashMap.equals(java.lang.Object)', 'OpenShortLongHashMap.put(short,long)', 'OpenShortLongHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testKeysSortedByValue(): ['OpenShortLongHashMap.removeKey(short)', 'ShortArrayList.size()', 'ShortArrayList.toArray(short[])', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.indexOfKey(short)', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortLongHashMap.put(short,long)', 'OpenShortLongHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortLongHashMapTest.testPairsSortedByKey(): ['ShortArrayList.size()', 'OpenShortLongHashMap.chooseLowWaterMark(int,double)', 'OpenShortLongHashMap.pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.get(int)', 'ShortArrayList.clear()', 'OpenShortLongHashMap.indexOfInsertion(short)', 'OpenShortLongHashMap.chooseHighWaterMark(int,double)', 'OpenShortLongHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.clear()', 'LongArrayList.size()', 'OpenShortLongHashMap.put(short,long)', 'ShortArrayList.get(int)', 'OpenShortLongHashMap.pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.LongArrayList)', 'OpenShortLongHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenIntLongHashMapTest.testConstructors(): ['OpenIntLongHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenIntLongHashMapTest.testEnsureCapacity(): ['OpenIntLongHashMap.getInternalFactors(int[],double[],double[])', 'OpenIntLongHashMap.nextPrime(int)', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'OpenIntLongHashMap.ensureCapacity(int)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testClear(): ['OpenIntLongHashMap.put(int,long)', 'OpenIntLongHashMap.indexOfKey(int)', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.clear()', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'OpenIntLongHashMap.nextPrime(int)', 'OpenIntLongHashMap.get(int)', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.size()', 'OpenIntLongHashMap.trimToSize()', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testClone(): ['OpenIntLongHashMap.put(int,long)', 'AbstractIntLongMap.clone()', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.clear()', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'OpenIntLongHashMap.clone()', 'OpenIntLongHashMap.nextPrime(int)', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.size()', 'OpenIntLongHashMap.trimToSize()', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testContainsKey(): ['OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.put(int,long)', 'OpenIntLongHashMap.indexOfKey(int)', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'OpenIntLongHashMap.containsKey(int)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testContainValue(): ['OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.put(int,long)', 'OpenIntLongHashMap.indexOfValue(long)', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.containsValue(long)', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testForEachKey(): ['OpenIntLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntLongHashMap.put(int,long)', 'OpenIntLongHashMap.indexOfKey(int)', 'IntArrayList.toArray(int[])', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.size()', 'IntProcedure.apply(int)', 'OpenIntLongHashMap.forEachKey(org.apache.mahout.math.function.IntProcedure)', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.removeKey(int)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testForEachPair(): ['OpenIntLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntLongHashMap.put(int,long)', 'OpenIntLongHashMap.forEachPair(org.apache.mahout.math.function.IntLongProcedure)', 'OpenIntLongHashMap.indexOfKey(int)', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.rehash(int)', 'IntLongProcedure.apply(int,long)', 'OpenIntLongHashMap.removeKey(int)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testGet(): ['OpenIntLongHashMap.get(int)', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.put(int,long)', 'OpenIntLongHashMap.indexOfKey(int)', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testAdjustOrPutValue(): ['OpenIntLongHashMap.get(int)', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'OpenIntLongHashMap.adjustOrPutValue(int,long,long)', 'OpenIntLongHashMap.put(int,long)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.indexOfKey(int)', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testKeys(): ['OpenIntLongHashMap.keys(org.apache.mahout.math.list.IntArrayList)', 'OpenIntLongHashMap.put(int,long)', 'IntArrayList.sort()', 'OpenIntLongHashMap.keys()', 'IntArrayList.elements()', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.setSize(int)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testPairsMatching(): ['OpenIntLongHashMap.pairsMatching(org.apache.mahout.math.function.IntLongProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.LongArrayList)', 'OpenIntLongHashMap.chooseShrinkCapacity(int,double,double)', 'LongArrayList.get(int)', 'IntArrayList.sort()', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.size()', 'LongArrayList.clear()', 'LongArrayList.size()', 'IntArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(int[],int)', 'IntArrayList.clear()', 'LongArrayList.add(long)', 'OpenIntLongHashMap.removeKey(int)', 'Arrays.ensureCapacity(long[],int)', 'OpenIntLongHashMap.put(int,long)', 'OpenIntLongHashMap.indexOfKey(int)', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.add(int)', 'IntArrayList.get(int)', 'LongArrayList.sort()', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'LongArrayList.ensureCapacity(int)', 'OpenIntLongHashMap.rehash(int)', 'IntLongProcedure.apply(int,long)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testValues(): ['LongArrayList.elements()', 'OpenIntLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntLongHashMap.put(int,long)', 'OpenIntLongHashMap.indexOfKey(int)', 'LongArrayList.get(int)', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.sort()', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'LongArrayList.size()', 'OpenIntLongHashMap.values(org.apache.mahout.math.list.LongArrayList)', 'OpenIntLongHashMap.rehash(int)', 'LongArrayList.setSize(int)', 'OpenIntLongHashMap.removeKey(int)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testCopy(): ['OpenIntLongHashMap.put(int,long)', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.clear()', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'OpenIntLongHashMap.nextPrime(int)', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.size()', 'OpenIntLongHashMap.trimToSize()', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.copy()', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testEquals(): ['OpenIntLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntLongHashMap.put(int,long)', 'OpenIntLongHashMap.indexOfKey(int)', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.equals(java.lang.Object)', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.copy()', 'OpenIntLongHashMap.removeKey(int)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testKeysSortedByValue(): ['OpenIntLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntLongHashMap.put(int,long)', 'OpenIntLongHashMap.indexOfKey(int)', 'IntArrayList.toArray(int[])', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.size()', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'OpenIntLongHashMap.keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.removeKey(int)', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenIntLongHashMapTest.testPairsSortedByKey(): ['OpenIntLongHashMap.pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.LongArrayList)', 'OpenIntLongHashMap.put(int,long)', 'LongArrayList.get(int)', 'OpenIntLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntLongHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.size()', 'IntArrayList.get(int)', 'LongArrayList.clear()', 'OpenIntLongHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(int)', 'LongArrayList.size()', 'OpenIntLongHashMap.rehash(int)', 'OpenIntLongHashMap.pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.LongArrayList)', 'IntArrayList.clear()', 'OpenIntLongHashMap.indexOfInsertion(int)']
OpenObjectShortHashMapTest.testConstructors(): ['OpenObjectShortHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenObjectShortHashMapTest.testEnsureCapacity(): ['OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.ensureCapacity(int)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.getInternalFactors(int[],double[],double[])', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.nextPrime(int)', 'OpenObjectShortHashMap.rehash(int)']
OpenObjectShortHashMapTest.testClear(): ['OpenObjectShortHashMap.size()', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.trimToSize()', 'OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.clear()', 'OpenObjectShortHashMap.nextPrime(int)']
OpenObjectShortHashMapTest.testClone(): ['OpenObjectShortHashMap.size()', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.clone()', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.trimToSize()', 'OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.clear()', 'AbstractObjectShortMap.clone()', 'OpenObjectShortHashMap.nextPrime(int)']
OpenObjectShortHashMapTest.testContainsKey(): ['OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfKey(java.lang.Object)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.containsKey(java.lang.Object)']
OpenObjectShortHashMapTest.testContainValue(): ['OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.containsValue(short)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.indexOfValue(short)']
OpenObjectShortHashMapTest.testForEachKey(): ['OpenObjectShortHashMap.indexOfKey(java.lang.Object)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'ObjectProcedure.apply(java.lang.Object)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.removeKey(java.lang.Object)', 'OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.chooseShrinkCapacity(int,double,double)']
OpenObjectShortHashMapTest.testForEachPair(): ['ObjectShortProcedure.apply(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfKey(java.lang.Object)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.removeKey(java.lang.Object)', 'OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.forEachPair(org.apache.mahout.math.function.ObjectShortProcedure)', 'OpenObjectShortHashMap.chooseShrinkCapacity(int,double,double)']
OpenObjectShortHashMapTest.testGet(): ['OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.get(java.lang.Object)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfKey(java.lang.Object)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)']
OpenObjectShortHashMapTest.testKeys(): ['OpenObjectShortHashMap.keys(java.util.List)', 'OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.keys()', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)']
OpenObjectShortHashMapTest.testAdjustOrPutValue(): ['OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.get(java.lang.Object)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfKey(java.lang.Object)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.adjustOrPutValue(java.lang.Object,short,short)']
OpenObjectShortHashMapTest.testPairsMatching(): ['ObjectShortProcedure.apply(java.lang.Object,short)', 'ShortArrayList.size()', 'OpenObjectShortHashMap.indexOfKey(java.lang.Object)', 'OpenObjectShortHashMap.pairsMatching(org.apache.mahout.math.function.ObjectShortProcedure,java.util.List,org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.ensureCapacity(int)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'Arrays.ensureCapacity(short[],int)', 'ShortArrayList.clear()', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.removeKey(java.lang.Object)', 'OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'ShortArrayList.sort()', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)', 'OpenObjectShortHashMap.chooseShrinkCapacity(int,double,double)']
OpenObjectShortHashMapTest.testValues(): ['ShortArrayList.size()', 'OpenObjectShortHashMap.indexOfKey(java.lang.Object)', 'OpenObjectShortHashMap.values(org.apache.mahout.math.list.ShortArrayList)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.elements()', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.removeKey(java.lang.Object)', 'OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'ShortArrayList.sort()', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'ShortArrayList.setSize(int)', 'ShortArrayList.get(int)', 'OpenObjectShortHashMap.chooseShrinkCapacity(int,double,double)']
OpenObjectShortHashMapTest.testCopy(): ['OpenObjectShortHashMap.size()', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.trimToSize()', 'OpenObjectShortHashMap.copy()', 'OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.clear()', 'OpenObjectShortHashMap.nextPrime(int)']
OpenObjectShortHashMapTest.testEquals(): ['OpenObjectShortHashMap.indexOfKey(java.lang.Object)', 'OpenObjectShortHashMap.equals(java.lang.Object)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.removeKey(java.lang.Object)', 'OpenObjectShortHashMap.copy()', 'OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.chooseShrinkCapacity(int,double,double)']
OpenObjectShortHashMapTest.testKeysSortedByValue(): ['OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.keysSortedByValue(java.util.List)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfKey(java.lang.Object)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)', 'OpenObjectShortHashMap.removeKey(java.lang.Object)', 'OpenObjectShortHashMap.chooseShrinkCapacity(int,double,double)']
OpenObjectShortHashMapTest.testPairsSortedByKey(): ['OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'ShortArrayList.size()', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ShortArrayList)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.get(int)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)']
OpenObjectShortHashMapTest.testPairsSortedByKeyNotComparable(): ['OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.ShortArrayList)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)']
OpenObjectShortHashMapTest.testPairsSortedByValue(): ['OpenObjectShortHashMap.chooseHighWaterMark(int,double)', 'OpenObjectShortHashMap.put(java.lang.Object,short)', 'OpenObjectShortHashMap.pairsSortedByValue(java.util.List,org.apache.mahout.math.list.ShortArrayList)', 'OpenObjectShortHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.get(int)', 'OpenObjectShortHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectShortHashMap.rehash(int)']
OpenFloatIntHashMapTest.testConstructors(): ['OpenFloatIntHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenFloatIntHashMapTest.testEnsureCapacity(): ['OpenFloatIntHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'OpenFloatIntHashMap.nextPrime(int)', 'OpenFloatIntHashMap.ensureCapacity(int)', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'OpenFloatIntHashMap.rehash(int)', 'HashFunctions.hash(float)']
OpenFloatIntHashMapTest.testClear(): ['OpenFloatIntHashMap.get(float)', 'OpenFloatIntHashMap.size()', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'OpenFloatIntHashMap.trimToSize()', 'OpenFloatIntHashMap.rehash(int)', 'OpenFloatIntHashMap.clear()', 'OpenFloatIntHashMap.nextPrime(int)', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatIntHashMap.indexOfKey(float)']
OpenFloatIntHashMapTest.testClone(): ['OpenFloatIntHashMap.size()', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'OpenFloatIntHashMap.trimToSize()', 'OpenFloatIntHashMap.rehash(int)', 'AbstractFloatIntMap.clone()', 'OpenFloatIntHashMap.clone()', 'OpenFloatIntHashMap.clear()', 'OpenFloatIntHashMap.nextPrime(int)', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)']
OpenFloatIntHashMapTest.testContainsKey(): ['OpenFloatIntHashMap.containsKey(float)', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'OpenFloatIntHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatIntHashMap.indexOfKey(float)']
OpenFloatIntHashMapTest.testContainValue(): ['OpenFloatIntHashMap.containsValue(int)', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'OpenFloatIntHashMap.indexOfValue(int)', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'OpenFloatIntHashMap.rehash(int)', 'HashFunctions.hash(float)']
OpenFloatIntHashMapTest.testForEachKey(): ['OpenFloatIntHashMap.removeKey(float)', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.size()', 'OpenFloatIntHashMap.rehash(int)', 'FloatProcedure.apply(float)', 'OpenFloatIntHashMap.forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList.toArray(float[])', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatIntHashMap.indexOfKey(float)']
OpenFloatIntHashMapTest.testForEachPair(): ['OpenFloatIntHashMap.removeKey(float)', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.forEachPair(org.apache.mahout.math.function.FloatIntProcedure)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'OpenFloatIntHashMap.rehash(int)', 'FloatIntProcedure.apply(float,int)', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatIntHashMap.indexOfKey(float)']
OpenFloatIntHashMapTest.testGet(): ['OpenFloatIntHashMap.get(float)', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'OpenFloatIntHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatIntHashMap.indexOfKey(float)']
OpenFloatIntHashMapTest.testAdjustOrPutValue(): ['OpenFloatIntHashMap.get(float)', 'OpenFloatIntHashMap.adjustOrPutValue(float,int,int)', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'OpenFloatIntHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatIntHashMap.indexOfKey(float)']
OpenFloatIntHashMapTest.testKeys(): ['OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.keys(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.setSize(int)', 'OpenFloatIntHashMap.keys()', 'FloatArrayList.elements()', 'OpenFloatIntHashMap.rehash(int)', 'FloatArrayList.get(int)', 'FloatArrayList.sort()', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)']
OpenFloatIntHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'OpenFloatIntHashMap.pairsMatching(org.apache.mahout.math.function.FloatIntProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.IntArrayList)', 'FloatArrayList.ensureCapacity(int)', 'IntArrayList.sort()', 'FloatArrayList.size()', 'IntArrayList.size()', 'OpenFloatIntHashMap.rehash(int)', 'IntArrayList.ensureCapacity(int)', 'FloatArrayList.sort()', 'Arrays.ensureCapacity(int[],int)', 'IntArrayList.clear()', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'OpenFloatIntHashMap.removeKey(float)', 'FloatArrayList.clear()', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.add(float)', 'IntArrayList.add(int)', 'FloatIntProcedure.apply(float,int)', 'IntArrayList.get(int)', 'FloatArrayList.get(int)', 'HashFunctions.hash(float)', 'OpenFloatIntHashMap.indexOfKey(float)']
OpenFloatIntHashMapTest.testValues(): ['OpenFloatIntHashMap.removeKey(float)', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'IntArrayList.sort()', 'IntArrayList.elements()', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.setSize(int)', 'IntArrayList.size()', 'OpenFloatIntHashMap.rehash(int)', 'IntArrayList.get(int)', 'OpenFloatIntHashMap.values(org.apache.mahout.math.list.IntArrayList)', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatIntHashMap.indexOfKey(float)']
OpenFloatIntHashMapTest.testCopy(): ['OpenFloatIntHashMap.copy()', 'OpenFloatIntHashMap.size()', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'OpenFloatIntHashMap.trimToSize()', 'OpenFloatIntHashMap.rehash(int)', 'OpenFloatIntHashMap.clear()', 'OpenFloatIntHashMap.nextPrime(int)', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)']
OpenFloatIntHashMapTest.testEquals(): ['OpenFloatIntHashMap.copy()', 'OpenFloatIntHashMap.removeKey(float)', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.equals(java.lang.Object)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'OpenFloatIntHashMap.rehash(int)', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatIntHashMap.indexOfKey(float)']
OpenFloatIntHashMapTest.testKeysSortedByValue(): ['OpenFloatIntHashMap.removeKey(float)', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.size()', 'OpenFloatIntHashMap.rehash(int)', 'OpenFloatIntHashMap.keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.toArray(float[])', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatIntHashMap.indexOfKey(float)']
OpenFloatIntHashMapTest.testPairsSortedByKey(): ['FloatArrayList.clear()', 'OpenFloatIntHashMap.put(float,int)', 'OpenFloatIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatIntHashMap.indexOfInsertion(float)', 'OpenFloatIntHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.size()', 'IntArrayList.size()', 'OpenFloatIntHashMap.rehash(int)', 'IntArrayList.get(int)', 'OpenFloatIntHashMap.pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.IntArrayList)', 'FloatArrayList.get(int)', 'IntArrayList.clear()', 'OpenFloatIntHashMap.chooseLowWaterMark(int,double)', 'OpenFloatIntHashMap.pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.IntArrayList)', 'HashFunctions.hash(float)']
OpenFloatObjectHashMapTest.testConstructors(): ['OpenFloatObjectHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenFloatObjectHashMapTest.testEnsureCapacity(): ['OpenFloatObjectHashMap.indexOfInsertion(float)', 'PrimeFinder.nextPrime(int)', 'OpenFloatObjectHashMap.ensureCapacity(int)', 'OpenFloatObjectHashMap.rehash(int)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'OpenFloatObjectHashMap.getInternalFactors(int[],double[],double[])', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)', 'OpenFloatObjectHashMap.nextPrime(int)']
OpenFloatObjectHashMapTest.testClear(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.trimToSize()', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'OpenFloatObjectHashMap.containsKey(float)', 'OpenFloatObjectHashMap.size()', 'OpenFloatObjectHashMap.clear()', 'OpenFloatObjectHashMap.get(float)', 'OpenFloatObjectHashMap.rehash(int)', 'OpenFloatObjectHashMap.indexOfKey(float)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)', 'OpenFloatObjectHashMap.nextPrime(int)']
OpenFloatObjectHashMapTest.testClone(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'AbstractFloatObjectMap.clone()', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.clone()', 'OpenFloatObjectHashMap.trimToSize()', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'OpenFloatObjectHashMap.size()', 'OpenFloatObjectHashMap.clear()', 'OpenFloatObjectHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)', 'OpenFloatObjectHashMap.nextPrime(int)']
OpenFloatObjectHashMapTest.testContainsKey(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.rehash(int)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'OpenFloatObjectHashMap.indexOfKey(float)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)', 'OpenFloatObjectHashMap.containsKey(float)']
OpenFloatObjectHashMapTest.testContainValue(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.containsValue(java.lang.Object)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.rehash(int)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'OpenFloatObjectHashMap.indexOfValue(java.lang.Object)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)']
OpenFloatObjectHashMapTest.testForEachKey(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'OpenFloatObjectHashMap.forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList.size()', 'FloatProcedure.apply(float)', 'OpenFloatObjectHashMap.removeKey(float)', 'OpenFloatObjectHashMap.rehash(int)', 'FloatArrayList.toArray(float[])', 'OpenFloatObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatObjectHashMap.indexOfKey(float)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)']
OpenFloatObjectHashMapTest.testForEachPair(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'FloatObjectProcedure.apply(float,java.lang.Object)', 'OpenFloatObjectHashMap.forEachPair(org.apache.mahout.math.function.FloatObjectProcedure)', 'OpenFloatObjectHashMap.removeKey(float)', 'OpenFloatObjectHashMap.rehash(int)', 'OpenFloatObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatObjectHashMap.indexOfKey(float)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)']
OpenFloatObjectHashMapTest.testGet(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.get(float)', 'OpenFloatObjectHashMap.rehash(int)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'OpenFloatObjectHashMap.indexOfKey(float)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)']
OpenFloatObjectHashMapTest.testKeys(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.setSize(int)', 'FloatArrayList.elements()', 'FloatArrayList.get(int)', 'FloatArrayList.sort()', 'OpenFloatObjectHashMap.keys(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatObjectHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)', 'OpenFloatObjectHashMap.keys()']
OpenFloatObjectHashMapTest.testPairsMatching(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'Arrays.ensureCapacity(float[],int)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.ensureCapacity(int)', 'FloatArrayList.clear()', 'FloatArrayList.add(float)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.size()', 'FloatObjectProcedure.apply(float,java.lang.Object)', 'OpenFloatObjectHashMap.pairsMatching(org.apache.mahout.math.function.FloatObjectProcedure,org.apache.mahout.math.list.FloatArrayList,java.util.List)', 'FloatArrayList.sort()', 'FloatArrayList.get(int)', 'OpenFloatObjectHashMap.removeKey(float)', 'OpenFloatObjectHashMap.rehash(int)', 'OpenFloatObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatObjectHashMap.indexOfKey(float)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)']
OpenFloatObjectHashMapTest.testValues(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.removeKey(float)', 'OpenFloatObjectHashMap.rehash(int)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'OpenFloatObjectHashMap.values(java.util.List)', 'OpenFloatObjectHashMap.indexOfKey(float)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)', 'OpenFloatObjectHashMap.chooseShrinkCapacity(int,double,double)']
OpenFloatObjectHashMapTest.testCopy(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.copy()', 'OpenFloatObjectHashMap.trimToSize()', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'OpenFloatObjectHashMap.size()', 'OpenFloatObjectHashMap.clear()', 'OpenFloatObjectHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)', 'OpenFloatObjectHashMap.nextPrime(int)']
OpenFloatObjectHashMapTest.testEquals(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.equals(java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.copy()', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'OpenFloatObjectHashMap.removeKey(float)', 'OpenFloatObjectHashMap.rehash(int)', 'OpenFloatObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatObjectHashMap.indexOfKey(float)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)']
OpenFloatObjectHashMapTest.testKeysSortedByValue(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.size()', 'OpenFloatObjectHashMap.keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatObjectHashMap.removeKey(float)', 'OpenFloatObjectHashMap.rehash(int)', 'FloatArrayList.toArray(float[])', 'OpenFloatObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatObjectHashMap.indexOfKey(float)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)']
OpenFloatObjectHashMapTest.testPairsSortedByKey(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.get(int)', 'OpenFloatObjectHashMap.rehash(int)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.size()', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,java.util.List)']
OpenFloatObjectHashMapTest.testPairsSortedByValue(): ['OpenFloatObjectHashMap.put(float,java.lang.Object)', 'OpenFloatObjectHashMap.pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,java.util.List)', 'OpenFloatObjectHashMap.indexOfInsertion(float)', 'OpenFloatObjectHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.get(int)', 'OpenFloatObjectHashMap.rehash(int)', 'OpenFloatObjectHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatObjectHashMap.chooseLowWaterMark(int,double)']
OpenObjectLongHashMapTest.testConstructors(): ['OpenObjectLongHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenObjectLongHashMapTest.testEnsureCapacity(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.nextPrime(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.getInternalFactors(int[],double[],double[])', 'OpenObjectLongHashMap.ensureCapacity(int)']
OpenObjectLongHashMapTest.testClear(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.trimToSize()', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.nextPrime(int)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.clear()', 'OpenObjectLongHashMap.size()']
OpenObjectLongHashMapTest.testClone(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.trimToSize()', 'AbstractObjectLongMap.clone()', 'OpenObjectLongHashMap.clone()', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.nextPrime(int)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.clear()', 'OpenObjectLongHashMap.size()']
OpenObjectLongHashMapTest.testContainsKey(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.containsKey(java.lang.Object)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.indexOfKey(java.lang.Object)']
OpenObjectLongHashMapTest.testContainValue(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.containsValue(long)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.indexOfValue(long)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)']
OpenObjectLongHashMapTest.testForEachKey(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'ObjectProcedure.apply(java.lang.Object)', 'OpenObjectLongHashMap.removeKey(java.lang.Object)', 'OpenObjectLongHashMap.forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectLongHashMap.indexOfKey(java.lang.Object)']
OpenObjectLongHashMapTest.testForEachPair(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'ObjectLongProcedure.apply(java.lang.Object,long)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.forEachPair(org.apache.mahout.math.function.ObjectLongProcedure)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.removeKey(java.lang.Object)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectLongHashMap.indexOfKey(java.lang.Object)']
OpenObjectLongHashMapTest.testGet(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.get(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.indexOfKey(java.lang.Object)']
OpenObjectLongHashMapTest.testKeys(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.keys(java.util.List)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.keys()', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)']
OpenObjectLongHashMapTest.testAdjustOrPutValue(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.get(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.adjustOrPutValue(java.lang.Object,long,long)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.indexOfKey(java.lang.Object)']
OpenObjectLongHashMapTest.testPairsMatching(): ['LongArrayList.add(long)', 'OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'ObjectLongProcedure.apply(java.lang.Object,long)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'LongArrayList.get(int)', 'OpenObjectLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectLongHashMap.removeKey(java.lang.Object)', 'Arrays.ensureCapacity(long[],int)', 'LongArrayList.clear()', 'LongArrayList.sort()', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'LongArrayList.size()', 'LongArrayList.ensureCapacity(int)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.indexOfKey(java.lang.Object)', 'OpenObjectLongHashMap.pairsMatching(org.apache.mahout.math.function.ObjectLongProcedure,java.util.List,org.apache.mahout.math.list.LongArrayList)']
OpenObjectLongHashMapTest.testValues(): ['OpenObjectLongHashMap.values(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.elements()', 'OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'LongArrayList.get(int)', 'OpenObjectLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectLongHashMap.removeKey(java.lang.Object)', 'LongArrayList.sort()', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'LongArrayList.size()', 'LongArrayList.setSize(int)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.indexOfKey(java.lang.Object)']
OpenObjectLongHashMapTest.testCopy(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.trimToSize()', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.nextPrime(int)', 'OpenObjectLongHashMap.copy()', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.clear()', 'OpenObjectLongHashMap.size()']
OpenObjectLongHashMapTest.testEquals(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.removeKey(java.lang.Object)', 'OpenObjectLongHashMap.equals(java.lang.Object)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.copy()', 'OpenObjectLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectLongHashMap.indexOfKey(java.lang.Object)']
OpenObjectLongHashMapTest.testKeysSortedByValue(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.keysSortedByValue(java.util.List)', 'OpenObjectLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectLongHashMap.removeKey(java.lang.Object)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.indexOfKey(java.lang.Object)']
OpenObjectLongHashMapTest.testPairsSortedByKey(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'LongArrayList.size()', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'LongArrayList.get(int)', 'OpenObjectLongHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.LongArrayList)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)']
OpenObjectLongHashMapTest.testPairsSortedByKeyNotComparable(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectLongHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.LongArrayList)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)']
OpenObjectLongHashMapTest.testPairsSortedByValue(): ['OpenObjectLongHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectLongHashMap.chooseHighWaterMark(int,double)', 'OpenObjectLongHashMap.put(java.lang.Object,long)', 'OpenObjectLongHashMap.rehash(int)', 'OpenObjectLongHashMap.chooseLowWaterMark(int,double)', 'OpenObjectLongHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'LongArrayList.get(int)', 'OpenObjectLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectLongHashMap.pairsSortedByValue(java.util.List,org.apache.mahout.math.list.LongArrayList)']
OpenByteShortHashMapTest.testConstructors(): ['OpenByteShortHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenByteShortHashMapTest.testEnsureCapacity(): ['OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenByteShortHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.getInternalFactors(int[],double[],double[])', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.ensureCapacity(int)', 'OpenByteShortHashMap.nextPrime(int)']
OpenByteShortHashMapTest.testClear(): ['OpenByteShortHashMap.indexOfKey(byte)', 'OpenByteShortHashMap.put(byte,short)', 'OpenByteShortHashMap.nextPrime(int)', 'OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.rehash(int)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.get(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteShortHashMap.trimToSize()', 'OpenByteShortHashMap.size()', 'OpenByteShortHashMap.clear()', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testClone(): ['OpenByteShortHashMap.put(byte,short)', 'OpenByteShortHashMap.clone()', 'AbstractByteShortMap.clone()', 'OpenByteShortHashMap.nextPrime(int)', 'OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.rehash(int)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteShortHashMap.trimToSize()', 'OpenByteShortHashMap.size()', 'OpenByteShortHashMap.clear()', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testContainsKey(): ['OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.containsKey(byte)', 'OpenByteShortHashMap.rehash(int)', 'OpenByteShortHashMap.indexOfKey(byte)', 'OpenByteShortHashMap.put(byte,short)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testContainValue(): ['OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.rehash(int)', 'OpenByteShortHashMap.indexOfValue(short)', 'OpenByteShortHashMap.put(byte,short)', 'OpenByteShortHashMap.containsValue(short)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testForEachKey(): ['OpenByteShortHashMap.indexOfKey(byte)', 'OpenByteShortHashMap.put(byte,short)', 'ByteArrayList.size()', 'OpenByteShortHashMap.removeKey(byte)', 'OpenByteShortHashMap.forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList.toArray(byte[])', 'OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.rehash(int)', 'OpenByteShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'ByteProcedure.apply(byte)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testForEachPair(): ['OpenByteShortHashMap.forEachPair(org.apache.mahout.math.function.ByteShortProcedure)', 'OpenByteShortHashMap.indexOfKey(byte)', 'OpenByteShortHashMap.put(byte,short)', 'OpenByteShortHashMap.removeKey(byte)', 'ByteShortProcedure.apply(byte,short)', 'OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.rehash(int)', 'OpenByteShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testGet(): ['OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.rehash(int)', 'OpenByteShortHashMap.indexOfKey(byte)', 'OpenByteShortHashMap.put(byte,short)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.get(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testAdjustOrPutValue(): ['OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.rehash(int)', 'OpenByteShortHashMap.indexOfKey(byte)', 'OpenByteShortHashMap.adjustOrPutValue(byte,short,short)', 'OpenByteShortHashMap.put(byte,short)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.get(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testKeys(): ['ByteArrayList.get(int)', 'OpenByteShortHashMap.put(byte,short)', 'ByteArrayList.elements()', 'ByteArrayList.setSize(int)', 'OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.keys()', 'OpenByteShortHashMap.rehash(int)', 'ByteArrayList.sort()', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenByteShortHashMap.keys(org.apache.mahout.math.list.ByteArrayList)']
OpenByteShortHashMapTest.testPairsMatching(): ['ByteArrayList.get(int)', 'OpenByteShortHashMap.put(byte,short)', 'ShortArrayList.clear()', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'OpenByteShortHashMap.pairsMatching(org.apache.mahout.math.function.ByteShortProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ShortArrayList)', 'OpenByteShortHashMap.rehash(int)', 'ByteArrayList.sort()', 'OpenByteShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'ShortArrayList.size()', 'OpenByteShortHashMap.indexOfKey(byte)', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'OpenByteShortHashMap.removeKey(byte)', 'ByteShortProcedure.apply(byte,short)', 'OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.sort()', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testValues(): ['ShortArrayList.size()', 'OpenByteShortHashMap.indexOfKey(byte)', 'OpenByteShortHashMap.values(org.apache.mahout.math.list.ShortArrayList)', 'OpenByteShortHashMap.put(byte,short)', 'ShortArrayList.elements()', 'OpenByteShortHashMap.removeKey(byte)', 'OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'ShortArrayList.sort()', 'OpenByteShortHashMap.rehash(int)', 'ShortArrayList.setSize(int)', 'ShortArrayList.get(int)', 'OpenByteShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testCopy(): ['OpenByteShortHashMap.put(byte,short)', 'OpenByteShortHashMap.copy()', 'OpenByteShortHashMap.nextPrime(int)', 'OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.rehash(int)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteShortHashMap.trimToSize()', 'OpenByteShortHashMap.size()', 'OpenByteShortHashMap.clear()', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testEquals(): ['OpenByteShortHashMap.equals(java.lang.Object)', 'OpenByteShortHashMap.indexOfKey(byte)', 'OpenByteShortHashMap.put(byte,short)', 'OpenByteShortHashMap.copy()', 'OpenByteShortHashMap.removeKey(byte)', 'OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.rehash(int)', 'OpenByteShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testKeysSortedByValue(): ['OpenByteShortHashMap.indexOfKey(byte)', 'OpenByteShortHashMap.put(byte,short)', 'ByteArrayList.size()', 'OpenByteShortHashMap.removeKey(byte)', 'ByteArrayList.toArray(byte[])', 'OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.rehash(int)', 'OpenByteShortHashMap.keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'OpenByteShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteShortHashMapTest.testPairsSortedByKey(): ['ShortArrayList.size()', 'ByteArrayList.get(int)', 'OpenByteShortHashMap.put(byte,short)', 'ShortArrayList.clear()', 'ByteArrayList.size()', 'ByteArrayList.clear()', 'OpenByteShortHashMap.pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ShortArrayList)', 'OpenByteShortHashMap.chooseHighWaterMark(int,double)', 'OpenByteShortHashMap.rehash(int)', 'ShortArrayList.get(int)', 'OpenByteShortHashMap.pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.ShortArrayList)', 'OpenByteShortHashMap.indexOfInsertion(byte)', 'OpenByteShortHashMap.chooseLowWaterMark(int,double)', 'OpenByteShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenObjectIntHashMapTest.testConstructors(): ['OpenObjectIntHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenObjectIntHashMapTest.testEnsureCapacity(): ['OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.nextPrime(int)', 'OpenObjectIntHashMap.getInternalFactors(int[],double[],double[])', 'OpenObjectIntHashMap.ensureCapacity(int)']
OpenObjectIntHashMapTest.testClear(): ['OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.trimToSize()', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.nextPrime(int)', 'OpenObjectIntHashMap.clear()', 'OpenObjectIntHashMap.put(java.lang.Object,int)', 'OpenObjectIntHashMap.size()']
OpenObjectIntHashMapTest.testClone(): ['OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.trimToSize()', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.clone()', 'OpenObjectIntHashMap.rehash(int)', 'AbstractObjectIntMap.clone()', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.nextPrime(int)', 'OpenObjectIntHashMap.clear()', 'OpenObjectIntHashMap.put(java.lang.Object,int)', 'OpenObjectIntHashMap.size()']
OpenObjectIntHashMapTest.testContainsKey(): ['OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.indexOfKey(java.lang.Object)', 'OpenObjectIntHashMap.containsKey(java.lang.Object)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testContainValue(): ['OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.indexOfValue(int)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.containsValue(int)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testForEachKey(): ['OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.indexOfKey(java.lang.Object)', 'OpenObjectIntHashMap.removeKey(java.lang.Object)', 'ObjectProcedure.apply(java.lang.Object)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.forEachKey(org.apache.mahout.math.function.ObjectProcedure)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testForEachPair(): ['OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.indexOfKey(java.lang.Object)', 'OpenObjectIntHashMap.removeKey(java.lang.Object)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.forEachPair(org.apache.mahout.math.function.ObjectIntProcedure)', 'ObjectIntProcedure.apply(java.lang.Object,int)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testGet(): ['OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.get(java.lang.Object)', 'OpenObjectIntHashMap.indexOfKey(java.lang.Object)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testKeys(): ['OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.keys(java.util.List)', 'OpenObjectIntHashMap.keys()', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testAdjustOrPutValue(): ['OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.get(java.lang.Object)', 'OpenObjectIntHashMap.indexOfKey(java.lang.Object)', 'OpenObjectIntHashMap.adjustOrPutValue(java.lang.Object,int,int)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testPairsMatching(): ['OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.pairsMatching(org.apache.mahout.math.function.ObjectIntProcedure,java.util.List,org.apache.mahout.math.list.IntArrayList)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.indexOfKey(java.lang.Object)', 'OpenObjectIntHashMap.removeKey(java.lang.Object)', 'IntArrayList.sort()', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.size()', 'IntArrayList.add(int)', 'OpenObjectIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectIntHashMap.rehash(int)', 'IntArrayList.get(int)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(int[],int)', 'ObjectIntProcedure.apply(java.lang.Object,int)', 'IntArrayList.clear()', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testValues(): ['OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.indexOfKey(java.lang.Object)', 'OpenObjectIntHashMap.removeKey(java.lang.Object)', 'IntArrayList.sort()', 'IntArrayList.elements()', 'IntArrayList.setSize(int)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.size()', 'OpenObjectIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectIntHashMap.rehash(int)', 'IntArrayList.get(int)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.values(org.apache.mahout.math.list.IntArrayList)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testCopy(): ['OpenObjectIntHashMap.copy()', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.trimToSize()', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.nextPrime(int)', 'OpenObjectIntHashMap.clear()', 'OpenObjectIntHashMap.put(java.lang.Object,int)', 'OpenObjectIntHashMap.size()']
OpenObjectIntHashMapTest.testEquals(): ['OpenObjectIntHashMap.copy()', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.indexOfKey(java.lang.Object)', 'OpenObjectIntHashMap.removeKey(java.lang.Object)', 'OpenObjectIntHashMap.equals(java.lang.Object)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testKeysSortedByValue(): ['OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.indexOfKey(java.lang.Object)', 'OpenObjectIntHashMap.removeKey(java.lang.Object)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.keysSortedByValue(java.util.List)', 'OpenObjectIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testPairsSortedByKey(): ['OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.get(int)', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.size()', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testPairsSortedByKeyNotComparable(): ['OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.pairsSortedByKey(java.util.List,org.apache.mahout.math.list.IntArrayList)', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenObjectIntHashMapTest.testPairsSortedByValue(): ['OpenObjectIntHashMap.rehash(int)', 'OpenObjectIntHashMap.pairsSortedByValue(java.util.List,org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.get(int)', 'OpenObjectIntHashMap.indexOfInsertion(java.lang.Object)', 'OpenObjectIntHashMap.equalsMindTheNull(java.lang.Object,java.lang.Object)', 'OpenObjectIntHashMap.chooseHighWaterMark(int,double)', 'OpenObjectIntHashMap.chooseLowWaterMark(int,double)', 'OpenObjectIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenObjectIntHashMap.put(java.lang.Object,int)']
OpenFloatFloatHashMapTest.testConstructors(): ['OpenFloatFloatHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenFloatFloatHashMapTest.testEnsureCapacity(): ['OpenFloatFloatHashMap.getInternalFactors(int[],double[],double[])', 'OpenFloatFloatHashMap.nextPrime(int)', 'OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.rehash(int)', 'HashFunctions.hash(float)']
OpenFloatFloatHashMapTest.testClear(): ['OpenFloatFloatHashMap.size()', 'OpenFloatFloatHashMap.nextPrime(int)', 'OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.rehash(int)', 'OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.get(float)', 'OpenFloatFloatHashMap.indexOfKey(float)', 'OpenFloatFloatHashMap.trimToSize()', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.clear()', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testClone(): ['OpenFloatFloatHashMap.clone()', 'OpenFloatFloatHashMap.size()', 'OpenFloatFloatHashMap.nextPrime(int)', 'OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'AbstractFloatFloatMap.clone()', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.rehash(int)', 'OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.trimToSize()', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.clear()', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testContainsKey(): ['OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.indexOfKey(float)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.rehash(int)', 'OpenFloatFloatHashMap.containsKey(float)', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testContainValue(): ['OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.containsValue(float)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)', 'OpenFloatFloatHashMap.indexOfValue(float)']
OpenFloatFloatHashMapTest.testForEachKey(): ['OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.rehash(int)', 'FloatArrayList.size()', 'OpenFloatFloatHashMap.chooseShrinkCapacity(int,double,double)', 'FloatProcedure.apply(float)', 'OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.indexOfKey(float)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.removeKey(float)', 'FloatArrayList.toArray(float[])', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testForEachPair(): ['OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.rehash(int)', 'OpenFloatFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.indexOfKey(float)', 'OpenFloatFloatHashMap.forEachPair(org.apache.mahout.math.function.FloatFloatProcedure)', 'FloatFloatProcedure.apply(float,float)', 'OpenFloatFloatHashMap.removeKey(float)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testGet(): ['OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.get(float)', 'OpenFloatFloatHashMap.indexOfKey(float)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testAdjustOrPutValue(): ['OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.get(float)', 'OpenFloatFloatHashMap.indexOfKey(float)', 'OpenFloatFloatHashMap.adjustOrPutValue(float,float,float)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.rehash(int)', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testKeys(): ['OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.rehash(int)', 'FloatArrayList.setSize(int)', 'FloatArrayList.elements()', 'OpenFloatFloatHashMap.keys(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.keys()', 'FloatArrayList.get(int)', 'FloatArrayList.sort()', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'FloatArrayList.ensureCapacity(int)', 'FloatArrayList.clear()', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.rehash(int)', 'FloatArrayList.add(float)', 'FloatArrayList.size()', 'OpenFloatFloatHashMap.pairsMatching(org.apache.mahout.math.function.FloatFloatProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.indexOfKey(float)', 'FloatFloatProcedure.apply(float,float)', 'FloatArrayList.sort()', 'OpenFloatFloatHashMap.removeKey(float)', 'FloatArrayList.get(int)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testValues(): ['OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.rehash(int)', 'FloatArrayList.setSize(int)', 'FloatArrayList.size()', 'FloatArrayList.elements()', 'OpenFloatFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.indexOfKey(float)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.sort()', 'OpenFloatFloatHashMap.removeKey(float)', 'FloatArrayList.get(int)', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)', 'OpenFloatFloatHashMap.values(org.apache.mahout.math.list.FloatArrayList)']
OpenFloatFloatHashMapTest.testCopy(): ['OpenFloatFloatHashMap.size()', 'OpenFloatFloatHashMap.nextPrime(int)', 'OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.rehash(int)', 'OpenFloatFloatHashMap.copy()', 'OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.trimToSize()', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.clear()', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testEquals(): ['OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.rehash(int)', 'OpenFloatFloatHashMap.copy()', 'OpenFloatFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.indexOfKey(float)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.removeKey(float)', 'OpenFloatFloatHashMap.equals(java.lang.Object)', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testKeysSortedByValue(): ['OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.rehash(int)', 'FloatArrayList.size()', 'OpenFloatFloatHashMap.keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.indexOfKey(float)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.removeKey(float)', 'FloatArrayList.toArray(float[])', 'HashFunctions.hash(float)', 'OpenFloatFloatHashMap.put(float,float)']
OpenFloatFloatHashMapTest.testPairsSortedByKey(): ['OpenFloatFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatFloatHashMap.chooseLowWaterMark(int,double)', 'FloatArrayList.clear()', 'OpenFloatFloatHashMap.indexOfInsertion(float)', 'OpenFloatFloatHashMap.pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.get(int)', 'OpenFloatFloatHashMap.pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatFloatHashMap.chooseHighWaterMark(int,double)', 'OpenFloatFloatHashMap.rehash(int)', 'FloatArrayList.size()', 'OpenFloatFloatHashMap.put(float,float)', 'HashFunctions.hash(float)']
OpenShortByteHashMapTest.testConstructors(): ['OpenShortByteHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenShortByteHashMapTest.testEnsureCapacity(): ['OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenShortByteHashMap.ensureCapacity(int)', 'OpenShortByteHashMap.nextPrime(int)', 'OpenShortByteHashMap.rehash(int)', 'OpenShortByteHashMap.getInternalFactors(int[],double[],double[])', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testClear(): ['OpenShortByteHashMap.size()', 'OpenShortByteHashMap.put(short,byte)', 'OpenShortByteHashMap.indexOfKey(short)', 'OpenShortByteHashMap.clear()', 'OpenShortByteHashMap.rehash(int)', 'OpenShortByteHashMap.trimToSize()', 'OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.get(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortByteHashMap.nextPrime(int)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testClone(): ['OpenShortByteHashMap.size()', 'OpenShortByteHashMap.put(short,byte)', 'OpenShortByteHashMap.clone()', 'OpenShortByteHashMap.clear()', 'OpenShortByteHashMap.rehash(int)', 'OpenShortByteHashMap.trimToSize()', 'OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'AbstractShortByteMap.clone()', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortByteHashMap.nextPrime(int)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testContainsKey(): ['OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.put(short,byte)', 'OpenShortByteHashMap.indexOfKey(short)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortByteHashMap.rehash(int)', 'OpenShortByteHashMap.containsKey(short)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testContainValue(): ['OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.containsValue(byte)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.put(short,byte)', 'OpenShortByteHashMap.indexOfValue(byte)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortByteHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testForEachKey(): ['ShortArrayList.size()', 'OpenShortByteHashMap.put(short,byte)', 'ShortArrayList.toArray(short[])', 'OpenShortByteHashMap.indexOfKey(short)', 'OpenShortByteHashMap.rehash(int)', 'ShortProcedure.apply(short)', 'OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.removeKey(short)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortByteHashMap.forEachKey(org.apache.mahout.math.function.ShortProcedure)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testForEachPair(): ['OpenShortByteHashMap.put(short,byte)', 'OpenShortByteHashMap.indexOfKey(short)', 'OpenShortByteHashMap.rehash(int)', 'OpenShortByteHashMap.forEachPair(org.apache.mahout.math.function.ShortByteProcedure)', 'OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.removeKey(short)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.chooseShrinkCapacity(int,double,double)', 'ShortByteProcedure.apply(short,byte)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testGet(): ['OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.get(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.put(short,byte)', 'OpenShortByteHashMap.indexOfKey(short)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortByteHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testAdjustOrPutValue(): ['OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.get(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.put(short,byte)', 'OpenShortByteHashMap.indexOfKey(short)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortByteHashMap.adjustOrPutValue(short,byte,byte)', 'OpenShortByteHashMap.rehash(int)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testKeys(): ['OpenShortByteHashMap.put(short,byte)', 'ShortArrayList.elements()', 'OpenShortByteHashMap.rehash(int)', 'OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.sort()', 'ShortArrayList.setSize(int)', 'OpenShortByteHashMap.keys()', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'ShortArrayList.get(int)', 'OpenShortByteHashMap.keys(org.apache.mahout.math.list.ShortArrayList)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testPairsMatching(): ['OpenShortByteHashMap.put(short,byte)', 'ByteArrayList.get(int)', 'ShortArrayList.clear()', 'OpenShortByteHashMap.rehash(int)', 'ByteArrayList.clear()', 'ByteArrayList.add(byte)', 'OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.sort()', 'ShortByteProcedure.apply(short,byte)', 'OpenShortByteHashMap.pairsMatching(org.apache.mahout.math.function.ShortByteProcedure,org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ShortArrayList.size()', 'OpenShortByteHashMap.indexOfKey(short)', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'OpenShortByteHashMap.removeKey(short)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'ShortArrayList.sort()', 'OpenShortByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testValues(): ['OpenShortByteHashMap.put(short,byte)', 'OpenShortByteHashMap.indexOfKey(short)', 'HashFunctions.hash(short)', 'ByteArrayList.get(int)', 'ByteArrayList.size()', 'OpenShortByteHashMap.rehash(int)', 'ByteArrayList.setSize(int)', 'OpenShortByteHashMap.values(org.apache.mahout.math.list.ByteArrayList)', 'OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.removeKey(short)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'ByteArrayList.sort()', 'OpenShortByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'ByteArrayList.elements()']
OpenShortByteHashMapTest.testCopy(): ['OpenShortByteHashMap.size()', 'OpenShortByteHashMap.put(short,byte)', 'OpenShortByteHashMap.clear()', 'OpenShortByteHashMap.rehash(int)', 'OpenShortByteHashMap.copy()', 'OpenShortByteHashMap.trimToSize()', 'OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'OpenShortByteHashMap.nextPrime(int)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testEquals(): ['OpenShortByteHashMap.put(short,byte)', 'OpenShortByteHashMap.indexOfKey(short)', 'OpenShortByteHashMap.rehash(int)', 'OpenShortByteHashMap.equals(java.lang.Object)', 'OpenShortByteHashMap.copy()', 'OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.removeKey(short)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testKeysSortedByValue(): ['ShortArrayList.size()', 'OpenShortByteHashMap.put(short,byte)', 'ShortArrayList.toArray(short[])', 'OpenShortByteHashMap.indexOfKey(short)', 'OpenShortByteHashMap.rehash(int)', 'OpenShortByteHashMap.keysSortedByValue(org.apache.mahout.math.list.ShortArrayList)', 'OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.removeKey(short)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.chooseShrinkCapacity(int,double,double)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenShortByteHashMapTest.testPairsSortedByKey(): ['OpenShortByteHashMap.pairsSortedByKey(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ByteArrayList)', 'ShortArrayList.size()', 'OpenShortByteHashMap.put(short,byte)', 'ByteArrayList.get(int)', 'ShortArrayList.clear()', 'ByteArrayList.size()', 'OpenShortByteHashMap.rehash(int)', 'ByteArrayList.clear()', 'OpenShortByteHashMap.chooseHighWaterMark(int,double)', 'OpenShortByteHashMap.indexOfInsertion(short)', 'OpenShortByteHashMap.chooseLowWaterMark(int,double)', 'OpenShortByteHashMap.pairsSortedByValue(org.apache.mahout.math.list.ShortArrayList,org.apache.mahout.math.list.ByteArrayList)', 'OpenShortByteHashMap.chooseGrowCapacity(int,double,double)', 'ShortArrayList.get(int)', 'HashFunctions.hash(short)']
OpenCharCharHashMapTest.testConstructors(): ['OpenCharCharHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenCharCharHashMapTest.testEnsureCapacity(): ['OpenCharCharHashMap.indexOfInsertion(char)', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenCharCharHashMap.getInternalFactors(int[],double[],double[])', 'OpenCharCharHashMap.ensureCapacity(int)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)', 'OpenCharCharHashMap.nextPrime(int)']
OpenCharCharHashMapTest.testClear(): ['OpenCharCharHashMap.indexOfInsertion(char)', 'OpenCharCharHashMap.size()', 'OpenCharCharHashMap.get(char)', 'OpenCharCharHashMap.trimToSize()', 'OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.clear()', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.indexOfKey(char)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)', 'OpenCharCharHashMap.nextPrime(int)']
OpenCharCharHashMapTest.testClone(): ['OpenCharCharHashMap.indexOfInsertion(char)', 'OpenCharCharHashMap.size()', 'OpenCharCharHashMap.trimToSize()', 'OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.clear()', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharCharHashMap.clone()', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)', 'AbstractCharCharMap.clone()', 'OpenCharCharHashMap.nextPrime(int)']
OpenCharCharHashMapTest.testContainsKey(): ['OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.indexOfInsertion(char)', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.indexOfKey(char)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharCharHashMap.containsKey(char)', 'OpenCharCharHashMap.rehash(int)', 'HashFunctions.hash(char)']
OpenCharCharHashMapTest.testContainValue(): ['OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.indexOfInsertion(char)', 'OpenCharCharHashMap.containsValue(char)', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharCharHashMap.indexOfValue(char)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)']
OpenCharCharHashMapTest.testForEachKey(): ['OpenCharCharHashMap.indexOfInsertion(char)', 'CharArrayList.toArray(char[])', 'OpenCharCharHashMap.removeKey(char)', 'CharProcedure.apply(char)', 'CharArrayList.size()', 'OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.indexOfKey(char)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharCharHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)', 'OpenCharCharHashMap.forEachKey(org.apache.mahout.math.function.CharProcedure)']
OpenCharCharHashMapTest.testForEachPair(): ['OpenCharCharHashMap.indexOfInsertion(char)', 'OpenCharCharHashMap.forEachPair(org.apache.mahout.math.function.CharCharProcedure)', 'OpenCharCharHashMap.removeKey(char)', 'OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.indexOfKey(char)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharCharHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)', 'CharCharProcedure.apply(char,char)']
OpenCharCharHashMapTest.testGet(): ['OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.indexOfInsertion(char)', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.indexOfKey(char)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)', 'OpenCharCharHashMap.get(char)']
OpenCharCharHashMapTest.testAdjustOrPutValue(): ['OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.indexOfInsertion(char)', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.adjustOrPutValue(char,char,char)', 'OpenCharCharHashMap.indexOfKey(char)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)', 'OpenCharCharHashMap.get(char)']
OpenCharCharHashMapTest.testKeys(): ['OpenCharCharHashMap.indexOfInsertion(char)', 'CharArrayList.elements()', 'OpenCharCharHashMap.keys()', 'OpenCharCharHashMap.put(char,char)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.get(int)', 'OpenCharCharHashMap.keys(org.apache.mahout.math.list.CharArrayList)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)']
OpenCharCharHashMapTest.testPairsMatching(): ['OpenCharCharHashMap.indexOfInsertion(char)', 'CharArrayList.ensureCapacity(int)', 'OpenCharCharHashMap.removeKey(char)', 'CharArrayList.size()', 'OpenCharCharHashMap.put(char,char)', 'CharArrayList.sort()', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.get(int)', 'OpenCharCharHashMap.indexOfKey(char)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.clear()', 'OpenCharCharHashMap.chooseShrinkCapacity(int,double,double)', 'Arrays.ensureCapacity(char[],int)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)', 'OpenCharCharHashMap.pairsMatching(org.apache.mahout.math.function.CharCharProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.CharArrayList)', 'CharCharProcedure.apply(char,char)', 'CharArrayList.add(char)']
OpenCharCharHashMapTest.testValues(): ['OpenCharCharHashMap.indexOfInsertion(char)', 'CharArrayList.elements()', 'OpenCharCharHashMap.removeKey(char)', 'CharArrayList.size()', 'OpenCharCharHashMap.put(char,char)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'CharArrayList.get(int)', 'OpenCharCharHashMap.indexOfKey(char)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharCharHashMap.values(org.apache.mahout.math.list.CharArrayList)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)']
OpenCharCharHashMapTest.testCopy(): ['OpenCharCharHashMap.indexOfInsertion(char)', 'OpenCharCharHashMap.size()', 'OpenCharCharHashMap.copy()', 'OpenCharCharHashMap.trimToSize()', 'OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.clear()', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)', 'OpenCharCharHashMap.nextPrime(int)']
OpenCharCharHashMapTest.testEquals(): ['OpenCharCharHashMap.indexOfInsertion(char)', 'OpenCharCharHashMap.removeKey(char)', 'OpenCharCharHashMap.equals(java.lang.Object)', 'OpenCharCharHashMap.copy()', 'OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.indexOfKey(char)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharCharHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)']
OpenCharCharHashMapTest.testKeysSortedByValue(): ['OpenCharCharHashMap.indexOfInsertion(char)', 'CharArrayList.toArray(char[])', 'OpenCharCharHashMap.removeKey(char)', 'CharArrayList.size()', 'OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.indexOfKey(char)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharCharHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharCharHashMap.keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)']
OpenCharCharHashMapTest.testPairsSortedByKey(): ['OpenCharCharHashMap.put(char,char)', 'OpenCharCharHashMap.pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.CharArrayList)', 'OpenCharCharHashMap.indexOfInsertion(char)', 'OpenCharCharHashMap.chooseLowWaterMark(int,double)', 'OpenCharCharHashMap.chooseHighWaterMark(int,double)', 'OpenCharCharHashMap.pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.CharArrayList)', 'CharArrayList.get(int)', 'OpenCharCharHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.clear()', 'HashFunctions.hash(char)', 'OpenCharCharHashMap.rehash(int)', 'CharArrayList.size()']
OpenDoubleIntHashMapTest.testConstructors(): ['OpenDoubleIntHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenDoubleIntHashMapTest.testEnsureCapacity(): ['OpenDoubleIntHashMap.nextPrime(int)', 'HashFunctions.hash(double)', 'OpenDoubleIntHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.ensureCapacity(int)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)']
OpenDoubleIntHashMapTest.testClear(): ['HashFunctions.hash(double)', 'OpenDoubleIntHashMap.indexOfKey(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.get(double)', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.size()', 'OpenDoubleIntHashMap.trimToSize()', 'OpenDoubleIntHashMap.nextPrime(int)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleIntHashMap.clear()']
OpenDoubleIntHashMapTest.testClone(): ['HashFunctions.hash(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'AbstractDoubleIntMap.clone()', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.size()', 'OpenDoubleIntHashMap.trimToSize()', 'OpenDoubleIntHashMap.nextPrime(int)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.clone()', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleIntHashMap.clear()']
OpenDoubleIntHashMapTest.testContainsKey(): ['OpenDoubleIntHashMap.containsKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleIntHashMap.indexOfKey(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)']
OpenDoubleIntHashMapTest.testContainValue(): ['HashFunctions.hash(double)', 'OpenDoubleIntHashMap.containsValue(int)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.indexOfValue(int)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)']
OpenDoubleIntHashMapTest.testForEachKey(): ['DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleIntHashMap.indexOfKey(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleIntHashMap.removeKey(double)', 'DoubleArrayList.size()', 'DoubleProcedure.apply(double)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)']
OpenDoubleIntHashMapTest.testForEachPair(): ['HashFunctions.hash(double)', 'OpenDoubleIntHashMap.indexOfKey(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'DoubleIntProcedure.apply(double,int)', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleIntHashMap.removeKey(double)', 'OpenDoubleIntHashMap.forEachPair(org.apache.mahout.math.function.DoubleIntProcedure)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)']
OpenDoubleIntHashMapTest.testGet(): ['HashFunctions.hash(double)', 'OpenDoubleIntHashMap.indexOfKey(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.get(double)']
OpenDoubleIntHashMapTest.testAdjustOrPutValue(): ['HashFunctions.hash(double)', 'OpenDoubleIntHashMap.adjustOrPutValue(double,int,int)', 'OpenDoubleIntHashMap.indexOfKey(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.get(double)']
OpenDoubleIntHashMapTest.testKeys(): ['OpenDoubleIntHashMap.keys()', 'HashFunctions.hash(double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'DoubleArrayList.sort()', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.put(double,int)', 'DoubleArrayList.setSize(int)', 'OpenDoubleIntHashMap.keys(org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)']
OpenDoubleIntHashMapTest.testPairsMatching(): ['OpenDoubleIntHashMap.indexOfKey(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'DoubleArrayList.sort()', 'IntArrayList.sort()', 'DoubleIntProcedure.apply(double,int)', 'DoubleArrayList.add(double)', 'IntArrayList.size()', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.removeKey(double)', 'IntArrayList.ensureCapacity(int)', 'DoubleArrayList.size()', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(int[],int)', 'IntArrayList.clear()', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(double)', 'DoubleArrayList.get(int)', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.chooseShrinkCapacity(int,double,double)', 'IntArrayList.add(int)', 'IntArrayList.get(int)', 'OpenDoubleIntHashMap.pairsMatching(org.apache.mahout.math.function.DoubleIntProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.IntArrayList)', 'DoubleArrayList.clear()']
OpenDoubleIntHashMapTest.testValues(): ['HashFunctions.hash(double)', 'OpenDoubleIntHashMap.indexOfKey(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.values(org.apache.mahout.math.list.IntArrayList)', 'IntArrayList.sort()', 'IntArrayList.elements()', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.setSize(int)', 'IntArrayList.size()', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.chooseShrinkCapacity(int,double,double)', 'IntArrayList.get(int)', 'OpenDoubleIntHashMap.removeKey(double)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)']
OpenDoubleIntHashMapTest.testCopy(): ['HashFunctions.hash(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.copy()', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.size()', 'OpenDoubleIntHashMap.trimToSize()', 'OpenDoubleIntHashMap.nextPrime(int)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleIntHashMap.clear()']
OpenDoubleIntHashMapTest.testEquals(): ['HashFunctions.hash(double)', 'OpenDoubleIntHashMap.indexOfKey(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.copy()', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleIntHashMap.equals(java.lang.Object)', 'OpenDoubleIntHashMap.removeKey(double)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)']
OpenDoubleIntHashMapTest.testKeysSortedByValue(): ['DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleIntHashMap.indexOfKey(double)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleIntHashMap.put(double,int)', 'OpenDoubleIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleIntHashMap.removeKey(double)', 'DoubleArrayList.size()', 'OpenDoubleIntHashMap.keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)']
OpenDoubleIntHashMapTest.testPairsSortedByKey(): ['HashFunctions.hash(double)', 'OpenDoubleIntHashMap.pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.IntArrayList)', 'DoubleArrayList.get(int)', 'OpenDoubleIntHashMap.indexOfInsertion(double)', 'OpenDoubleIntHashMap.chooseGrowCapacity(int,double,double)', 'IntArrayList.size()', 'OpenDoubleIntHashMap.put(double,int)', 'IntArrayList.get(int)', 'OpenDoubleIntHashMap.pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.IntArrayList)', 'DoubleArrayList.clear()', 'DoubleArrayList.size()', 'IntArrayList.clear()', 'OpenDoubleIntHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleIntHashMap.rehash(int)', 'OpenDoubleIntHashMap.chooseHighWaterMark(int,double)']
OpenIntDoubleHashMapTest.testConstructors(): ['OpenIntDoubleHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenIntDoubleHashMapTest.testEnsureCapacity(): ['OpenIntDoubleHashMap.ensureCapacity(int)', 'OpenIntDoubleHashMap.rehash(int)', 'PrimeFinder.nextPrime(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.getInternalFactors(int[],double[],double[])', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenIntDoubleHashMap.nextPrime(int)']
OpenIntDoubleHashMapTest.testClear(): ['OpenIntDoubleHashMap.size()', 'OpenIntDoubleHashMap.indexOfKey(int)', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.trimToSize()', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenIntDoubleHashMap.nextPrime(int)', 'OpenIntDoubleHashMap.clear()', 'OpenIntDoubleHashMap.get(int)']
OpenIntDoubleHashMapTest.testClone(): ['OpenIntDoubleHashMap.size()', 'OpenIntDoubleHashMap.clone()', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'AbstractIntDoubleMap.clone()', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.trimToSize()', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenIntDoubleHashMap.nextPrime(int)', 'OpenIntDoubleHashMap.clear()']
OpenIntDoubleHashMapTest.testContainsKey(): ['OpenIntDoubleHashMap.containsKey(int)', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.indexOfKey(int)', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)']
OpenIntDoubleHashMapTest.testContainValue(): ['OpenIntDoubleHashMap.containsValue(double)', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenIntDoubleHashMap.indexOfValue(double)']
OpenIntDoubleHashMapTest.testForEachKey(): ['OpenIntDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntDoubleHashMap.indexOfKey(int)', 'IntArrayList.toArray(int[])', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'IntArrayList.size()', 'IntProcedure.apply(int)', 'OpenIntDoubleHashMap.forEachKey(org.apache.mahout.math.function.IntProcedure)', 'OpenIntDoubleHashMap.removeKey(int)', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)']
OpenIntDoubleHashMapTest.testForEachPair(): ['OpenIntDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntDoubleHashMap.indexOfKey(int)', 'IntDoubleProcedure.apply(int,double)', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'OpenIntDoubleHashMap.forEachPair(org.apache.mahout.math.function.IntDoubleProcedure)', 'OpenIntDoubleHashMap.removeKey(int)', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)']
OpenIntDoubleHashMapTest.testGet(): ['OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.indexOfKey(int)', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenIntDoubleHashMap.get(int)']
OpenIntDoubleHashMapTest.testAdjustOrPutValue(): ['OpenIntDoubleHashMap.adjustOrPutValue(int,double,double)', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.indexOfKey(int)', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenIntDoubleHashMap.get(int)']
OpenIntDoubleHashMapTest.testKeys(): ['IntArrayList.sort()', 'IntArrayList.elements()', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'IntArrayList.setSize(int)', 'IntArrayList.get(int)', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.keys(org.apache.mahout.math.list.IntArrayList)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenIntDoubleHashMap.keys()']
OpenIntDoubleHashMapTest.testPairsMatching(): ['OpenIntDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleArrayList.sort()', 'IntArrayList.sort()', 'DoubleArrayList.add(double)', 'OpenIntDoubleHashMap.pairsMatching(org.apache.mahout.math.function.IntDoubleProcedure,org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'IntArrayList.size()', 'OpenIntDoubleHashMap.removeKey(int)', 'IntArrayList.ensureCapacity(int)', 'DoubleArrayList.size()', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(int[],int)', 'IntArrayList.clear()', 'DoubleArrayList.get(int)', 'OpenIntDoubleHashMap.indexOfKey(int)', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'IntDoubleProcedure.apply(int,double)', 'IntArrayList.add(int)', 'IntArrayList.get(int)', 'OpenIntDoubleHashMap.rehash(int)', 'DoubleArrayList.clear()', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)']
OpenIntDoubleHashMapTest.testValues(): ['OpenIntDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'OpenIntDoubleHashMap.indexOfKey(int)', 'DoubleArrayList.sort()', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'DoubleArrayList.setSize(int)', 'OpenIntDoubleHashMap.removeKey(int)', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'DoubleArrayList.size()', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.values(org.apache.mahout.math.list.DoubleArrayList)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)']
OpenIntDoubleHashMapTest.testCopy(): ['OpenIntDoubleHashMap.size()', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.trimToSize()', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenIntDoubleHashMap.nextPrime(int)', 'OpenIntDoubleHashMap.clear()', 'OpenIntDoubleHashMap.copy()']
OpenIntDoubleHashMapTest.testEquals(): ['OpenIntDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntDoubleHashMap.indexOfKey(int)', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'OpenIntDoubleHashMap.equals(java.lang.Object)', 'OpenIntDoubleHashMap.removeKey(int)', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenIntDoubleHashMap.copy()']
OpenIntDoubleHashMapTest.testKeysSortedByValue(): ['OpenIntDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenIntDoubleHashMap.indexOfKey(int)', 'IntArrayList.toArray(int[])', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'IntArrayList.size()', 'OpenIntDoubleHashMap.keysSortedByValue(org.apache.mahout.math.list.IntArrayList)', 'OpenIntDoubleHashMap.removeKey(int)', 'OpenIntDoubleHashMap.rehash(int)', 'HashFunctions.hash(int)', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)']
OpenIntDoubleHashMapTest.testPairsSortedByKey(): ['DoubleArrayList.get(int)', 'OpenIntDoubleHashMap.indexOfInsertion(int)', 'OpenIntDoubleHashMap.pairsSortedByValue(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'IntArrayList.size()', 'OpenIntDoubleHashMap.pairsSortedByKey(org.apache.mahout.math.list.IntArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'IntArrayList.get(int)', 'OpenIntDoubleHashMap.rehash(int)', 'DoubleArrayList.clear()', 'HashFunctions.hash(int)', 'DoubleArrayList.size()', 'OpenIntDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenIntDoubleHashMap.put(int,double)', 'OpenIntDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenIntDoubleHashMap.chooseLowWaterMark(int,double)', 'IntArrayList.clear()']
OpenDoubleFloatHashMapTest.testConstructors(): ['OpenDoubleFloatHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenDoubleFloatHashMapTest.testEnsureCapacity(): ['OpenDoubleFloatHashMap.nextPrime(int)', 'HashFunctions.hash(double)', 'PrimeFinder.nextPrime(int)', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.getInternalFactors(int[],double[],double[])', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.ensureCapacity(int)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)']
OpenDoubleFloatHashMapTest.testClear(): ['HashFunctions.hash(double)', 'OpenDoubleFloatHashMap.trimToSize()', 'OpenDoubleFloatHashMap.size()', 'OpenDoubleFloatHashMap.nextPrime(int)', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.get(double)', 'OpenDoubleFloatHashMap.clear()', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleFloatHashMap.indexOfKey(double)']
OpenDoubleFloatHashMapTest.testClone(): ['OpenDoubleFloatHashMap.clone()', 'HashFunctions.hash(double)', 'OpenDoubleFloatHashMap.trimToSize()', 'OpenDoubleFloatHashMap.size()', 'OpenDoubleFloatHashMap.nextPrime(int)', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.clear()', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)', 'AbstractDoubleFloatMap.clone()']
OpenDoubleFloatHashMapTest.testContainsKey(): ['OpenDoubleFloatHashMap.containsKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleFloatHashMap.indexOfKey(double)']
OpenDoubleFloatHashMapTest.testContainValue(): ['OpenDoubleFloatHashMap.indexOfValue(float)', 'HashFunctions.hash(double)', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.containsValue(float)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleFloatHashMapTest.testForEachKey(): ['DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleFloatHashMap.forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'OpenDoubleFloatHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleArrayList.size()', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.removeKey(double)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'DoubleProcedure.apply(double)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleFloatHashMap.indexOfKey(double)']
OpenDoubleFloatHashMapTest.testForEachPair(): ['HashFunctions.hash(double)', 'OpenDoubleFloatHashMap.forEachPair(org.apache.mahout.math.function.DoubleFloatProcedure)', 'OpenDoubleFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.removeKey(double)', 'DoubleFloatProcedure.apply(double,float)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleFloatHashMap.indexOfKey(double)']
OpenDoubleFloatHashMapTest.testGet(): ['HashFunctions.hash(double)', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.get(double)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleFloatHashMap.indexOfKey(double)']
OpenDoubleFloatHashMapTest.testAdjustOrPutValue(): ['HashFunctions.hash(double)', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.get(double)', 'OpenDoubleFloatHashMap.adjustOrPutValue(double,float,float)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleFloatHashMap.indexOfKey(double)']
OpenDoubleFloatHashMapTest.testKeys(): ['HashFunctions.hash(double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'DoubleArrayList.setSize(int)', 'OpenDoubleFloatHashMap.keys(org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleFloatHashMap.keys()', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleFloatHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'FloatArrayList.ensureCapacity(int)', 'DoubleArrayList.sort()', 'DoubleArrayList.add(double)', 'FloatArrayList.size()', 'DoubleArrayList.size()', 'OpenDoubleFloatHashMap.pairsMatching(org.apache.mahout.math.function.DoubleFloatProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.sort()', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(double)', 'FloatArrayList.clear()', 'DoubleArrayList.get(int)', 'FloatArrayList.add(float)', 'OpenDoubleFloatHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleArrayList.clear()', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.removeKey(double)', 'FloatArrayList.get(int)', 'DoubleFloatProcedure.apply(double,float)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.indexOfKey(double)']
OpenDoubleFloatHashMapTest.testValues(): ['HashFunctions.hash(double)', 'FloatArrayList.setSize(int)', 'FloatArrayList.size()', 'FloatArrayList.elements()', 'OpenDoubleFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.removeKey(double)', 'FloatArrayList.sort()', 'OpenDoubleFloatHashMap.values(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.get(int)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleFloatHashMap.indexOfKey(double)']
OpenDoubleFloatHashMapTest.testCopy(): ['HashFunctions.hash(double)', 'OpenDoubleFloatHashMap.trimToSize()', 'OpenDoubleFloatHashMap.size()', 'OpenDoubleFloatHashMap.nextPrime(int)', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.copy()', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.clear()', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleFloatHashMapTest.testEquals(): ['HashFunctions.hash(double)', 'OpenDoubleFloatHashMap.equals(java.lang.Object)', 'OpenDoubleFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.removeKey(double)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.copy()', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleFloatHashMap.indexOfKey(double)']
OpenDoubleFloatHashMapTest.testKeysSortedByValue(): ['DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleFloatHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleFloatHashMap.keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList.size()', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleFloatHashMap.removeKey(double)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleFloatHashMap.indexOfKey(double)']
OpenDoubleFloatHashMapTest.testPairsSortedByKey(): ['HashFunctions.hash(double)', 'FloatArrayList.clear()', 'DoubleArrayList.get(int)', 'OpenDoubleFloatHashMap.pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.FloatArrayList)', 'OpenDoubleFloatHashMap.pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.size()', 'DoubleArrayList.clear()', 'DoubleArrayList.size()', 'OpenDoubleFloatHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.get(int)', 'OpenDoubleFloatHashMap.indexOfInsertion(double)', 'OpenDoubleFloatHashMap.put(double,float)', 'OpenDoubleFloatHashMap.rehash(int)', 'OpenDoubleFloatHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleFloatHashMap.chooseGrowCapacity(int,double,double)']
OpenByteIntHashMapTest.testConstructors(): ['OpenByteIntHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenByteIntHashMapTest.testEnsureCapacity(): ['OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.getInternalFactors(int[],double[],double[])', 'OpenByteIntHashMap.rehash(int)', 'PrimeFinder.nextPrime(int)', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.ensureCapacity(int)', 'OpenByteIntHashMap.nextPrime(int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testClear(): ['OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.indexOfKey(byte)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.size()', 'OpenByteIntHashMap.get(byte)', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'OpenByteIntHashMap.clear()', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.trimToSize()', 'OpenByteIntHashMap.put(byte,int)', 'OpenByteIntHashMap.nextPrime(int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testClone(): ['OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.size()', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'AbstractByteIntMap.clone()', 'OpenByteIntHashMap.clone()', 'OpenByteIntHashMap.clear()', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.trimToSize()', 'OpenByteIntHashMap.put(byte,int)', 'OpenByteIntHashMap.nextPrime(int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testContainsKey(): ['OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'OpenByteIntHashMap.containsKey(byte)', 'OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.indexOfKey(byte)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.put(byte,int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testContainValue(): ['OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'OpenByteIntHashMap.containsValue(int)', 'OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.put(byte,int)', 'OpenByteIntHashMap.indexOfValue(int)']
OpenByteIntHashMapTest.testForEachKey(): ['OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.indexOfKey(byte)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteIntHashMap.removeKey(byte)', 'ByteArrayList.size()', 'OpenByteIntHashMap.forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.toArray(byte[])', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.put(byte,int)', 'ByteProcedure.apply(byte)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testForEachPair(): ['ByteIntProcedure.apply(byte,int)', 'OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.forEachPair(org.apache.mahout.math.function.ByteIntProcedure)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.indexOfKey(byte)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteIntHashMap.removeKey(byte)', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.put(byte,int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testGet(): ['OpenByteIntHashMap.get(byte)', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.indexOfKey(byte)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.put(byte,int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testAdjustOrPutValue(): ['OpenByteIntHashMap.get(byte)', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'OpenByteIntHashMap.adjustOrPutValue(byte,int,int)', 'OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.indexOfKey(byte)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.put(byte,int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testKeys(): ['OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'ByteArrayList.get(int)', 'ByteArrayList.elements()', 'ByteArrayList.setSize(int)', 'OpenByteIntHashMap.keys()', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.sort()', 'OpenByteIntHashMap.keys(org.apache.mahout.math.list.ByteArrayList)', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.put(byte,int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testPairsMatching(): ['ByteIntProcedure.apply(byte,int)', 'OpenByteIntHashMap.pairsMatching(org.apache.mahout.math.function.ByteIntProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.IntArrayList)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.indexOfKey(byte)', 'ByteArrayList.get(int)', 'OpenByteIntHashMap.chooseShrinkCapacity(int,double,double)', 'IntArrayList.sort()', 'IntArrayList.size()', 'ByteArrayList.clear()', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.add(byte)', 'IntArrayList.ensureCapacity(int)', 'ByteArrayList.sort()', 'Arrays.ensureCapacity(int[],int)', 'OpenByteIntHashMap.put(byte,int)', 'IntArrayList.clear()', 'OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.removeKey(byte)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'IntArrayList.add(int)', 'IntArrayList.get(int)', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testValues(): ['OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.indexOfKey(byte)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.chooseShrinkCapacity(int,double,double)', 'IntArrayList.sort()', 'OpenByteIntHashMap.removeKey(byte)', 'IntArrayList.elements()', 'IntArrayList.setSize(int)', 'IntArrayList.size()', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenByteIntHashMap.values(org.apache.mahout.math.list.IntArrayList)', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.put(byte,int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testCopy(): ['OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.size()', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'OpenByteIntHashMap.copy()', 'OpenByteIntHashMap.clear()', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.trimToSize()', 'OpenByteIntHashMap.put(byte,int)', 'OpenByteIntHashMap.nextPrime(int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testEquals(): ['OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.indexOfKey(byte)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteIntHashMap.removeKey(byte)', 'OpenByteIntHashMap.equals(java.lang.Object)', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'OpenByteIntHashMap.copy()', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.put(byte,int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testKeysSortedByValue(): ['OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.indexOfKey(byte)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteIntHashMap.removeKey(byte)', 'ByteArrayList.size()', 'OpenByteIntHashMap.keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'ByteArrayList.toArray(byte[])', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.put(byte,int)', 'HashFunctions.hash(short)']
OpenByteIntHashMapTest.testPairsSortedByKey(): ['OpenByteIntHashMap.indexOfInsertion(byte)', 'OpenByteIntHashMap.rehash(int)', 'OpenByteIntHashMap.chooseGrowCapacity(int,double,double)', 'ByteArrayList.get(int)', 'OpenByteIntHashMap.pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.IntArrayList)', 'ByteArrayList.size()', 'IntArrayList.size()', 'ByteArrayList.clear()', 'OpenByteIntHashMap.chooseHighWaterMark(int,double)', 'IntArrayList.get(int)', 'OpenByteIntHashMap.chooseLowWaterMark(int,double)', 'OpenByteIntHashMap.pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.IntArrayList)', 'OpenByteIntHashMap.put(byte,int)', 'IntArrayList.clear()', 'HashFunctions.hash(short)']
OpenByteObjectHashMapTest.testConstructors(): ['OpenByteObjectHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenByteObjectHashMapTest.testEnsureCapacity(): ['OpenByteObjectHashMap.getInternalFactors(int[],double[],double[])', 'OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.nextPrime(int)', 'OpenByteObjectHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)']
OpenByteObjectHashMapTest.testClear(): ['OpenByteObjectHashMap.clear()', 'OpenByteObjectHashMap.trimToSize()', 'OpenByteObjectHashMap.get(byte)', 'OpenByteObjectHashMap.indexOfKey(byte)', 'OpenByteObjectHashMap.nextPrime(int)', 'OpenByteObjectHashMap.rehash(int)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)', 'OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.containsKey(byte)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteObjectHashMap.size()', 'HashFunctions.hash(short)']
OpenByteObjectHashMapTest.testClone(): ['OpenByteObjectHashMap.clone()', 'OpenByteObjectHashMap.clear()', 'OpenByteObjectHashMap.trimToSize()', 'OpenByteObjectHashMap.nextPrime(int)', 'OpenByteObjectHashMap.rehash(int)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)', 'OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'AbstractByteObjectMap.clone()', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteObjectHashMap.size()', 'HashFunctions.hash(short)']
OpenByteObjectHashMapTest.testContainsKey(): ['OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.containsKey(byte)', 'OpenByteObjectHashMap.indexOfKey(byte)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteObjectHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)']
OpenByteObjectHashMapTest.testContainValue(): ['OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'OpenByteObjectHashMap.containsValue(java.lang.Object)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.indexOfValue(java.lang.Object)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteObjectHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)']
OpenByteObjectHashMapTest.testForEachKey(): ['OpenByteObjectHashMap.removeKey(byte)', 'HashFunctions.hash(short)', 'OpenByteObjectHashMap.indexOfKey(byte)', 'ByteArrayList.size()', 'OpenByteObjectHashMap.rehash(int)', 'OpenByteObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)', 'OpenByteObjectHashMap.indexOfInsertion(byte)', 'ByteArrayList.toArray(byte[])', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'ByteProcedure.apply(byte)', 'OpenByteObjectHashMap.forEachKey(org.apache.mahout.math.function.ByteProcedure)']
OpenByteObjectHashMapTest.testForEachPair(): ['OpenByteObjectHashMap.removeKey(byte)', 'OpenByteObjectHashMap.indexOfKey(byte)', 'OpenByteObjectHashMap.rehash(int)', 'OpenByteObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)', 'OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.forEachPair(org.apache.mahout.math.function.ByteObjectProcedure)', 'ByteObjectProcedure.apply(byte,java.lang.Object)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteObjectHashMapTest.testGet(): ['OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.get(byte)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteObjectHashMap.indexOfKey(byte)', 'OpenByteObjectHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)']
OpenByteObjectHashMapTest.testKeys(): ['ByteArrayList.get(int)', 'OpenByteObjectHashMap.keys(org.apache.mahout.math.list.ByteArrayList)', 'OpenByteObjectHashMap.rehash(int)', 'ByteArrayList.elements()', 'ByteArrayList.setSize(int)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)', 'OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.keys()', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'ByteArrayList.sort()', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteObjectHashMapTest.testPairsMatching(): ['OpenByteObjectHashMap.removeKey(byte)', 'ByteArrayList.get(int)', 'OpenByteObjectHashMap.indexOfKey(byte)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'OpenByteObjectHashMap.rehash(int)', 'OpenByteObjectHashMap.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.clear()', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)', 'OpenByteObjectHashMap.pairsMatching(org.apache.mahout.math.function.ByteObjectProcedure,org.apache.mahout.math.list.ByteArrayList,java.util.List)', 'ByteArrayList.add(byte)', 'ByteObjectProcedure.apply(byte,java.lang.Object)', 'OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'ByteArrayList.sort()', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteObjectHashMapTest.testValues(): ['OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.removeKey(byte)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.values(java.util.List)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteObjectHashMap.indexOfKey(byte)', 'OpenByteObjectHashMap.rehash(int)', 'OpenByteObjectHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(short)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)']
OpenByteObjectHashMapTest.testCopy(): ['OpenByteObjectHashMap.clear()', 'OpenByteObjectHashMap.trimToSize()', 'OpenByteObjectHashMap.copy()', 'OpenByteObjectHashMap.nextPrime(int)', 'OpenByteObjectHashMap.rehash(int)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)', 'OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteObjectHashMap.size()', 'HashFunctions.hash(short)']
OpenByteObjectHashMapTest.testEquals(): ['OpenByteObjectHashMap.removeKey(byte)', 'OpenByteObjectHashMap.copy()', 'OpenByteObjectHashMap.indexOfKey(byte)', 'OpenByteObjectHashMap.rehash(int)', 'OpenByteObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)', 'OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.equals(java.lang.Object)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteObjectHashMapTest.testKeysSortedByValue(): ['OpenByteObjectHashMap.removeKey(byte)', 'OpenByteObjectHashMap.indexOfKey(byte)', 'OpenByteObjectHashMap.keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.size()', 'OpenByteObjectHashMap.rehash(int)', 'OpenByteObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)', 'OpenByteObjectHashMap.indexOfInsertion(byte)', 'ByteArrayList.toArray(byte[])', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(short)']
OpenByteObjectHashMapTest.testPairsSortedByKey(): ['OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,java.util.List)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'ByteArrayList.get(int)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'ByteArrayList.size()', 'OpenByteObjectHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)']
OpenByteObjectHashMapTest.testPairsSortedByValue(): ['OpenByteObjectHashMap.indexOfInsertion(byte)', 'OpenByteObjectHashMap.pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,java.util.List)', 'OpenByteObjectHashMap.put(byte,java.lang.Object)', 'ByteArrayList.get(int)', 'OpenByteObjectHashMap.chooseLowWaterMark(int,double)', 'OpenByteObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteObjectHashMap.rehash(int)', 'HashFunctions.hash(short)', 'OpenByteObjectHashMap.chooseHighWaterMark(int,double)']
OpenByteDoubleHashMapTest.testConstructors(): ['OpenByteDoubleHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenByteDoubleHashMapTest.testEnsureCapacity(): ['OpenByteDoubleHashMap.rehash(int)', 'PrimeFinder.nextPrime(int)', 'OpenByteDoubleHashMap.ensureCapacity(int)', 'OpenByteDoubleHashMap.getInternalFactors(int[],double[],double[])', 'OpenByteDoubleHashMap.nextPrime(int)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testClear(): ['OpenByteDoubleHashMap.clear()', 'OpenByteDoubleHashMap.put(byte,double)', 'OpenByteDoubleHashMap.get(byte)', 'OpenByteDoubleHashMap.nextPrime(int)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.indexOfKey(byte)', 'OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.size()', 'OpenByteDoubleHashMap.trimToSize()', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testClone(): ['OpenByteDoubleHashMap.clone()', 'OpenByteDoubleHashMap.clear()', 'OpenByteDoubleHashMap.put(byte,double)', 'OpenByteDoubleHashMap.nextPrime(int)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'AbstractByteDoubleMap.clone()', 'OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.size()', 'OpenByteDoubleHashMap.trimToSize()', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testContainsKey(): ['OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.containsKey(byte)', 'OpenByteDoubleHashMap.put(byte,double)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.indexOfKey(byte)', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testContainValue(): ['OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.containsValue(double)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.put(byte,double)', 'OpenByteDoubleHashMap.indexOfValue(double)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testForEachKey(): ['OpenByteDoubleHashMap.put(byte,double)', 'OpenByteDoubleHashMap.forEachKey(org.apache.mahout.math.function.ByteProcedure)', 'ByteArrayList.size()', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.indexOfKey(byte)', 'OpenByteDoubleHashMap.removeKey(byte)', 'OpenByteDoubleHashMap.rehash(int)', 'ByteArrayList.toArray(byte[])', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'ByteProcedure.apply(byte)', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testForEachPair(): ['OpenByteDoubleHashMap.forEachPair(org.apache.mahout.math.function.ByteDoubleProcedure)', 'ByteDoubleProcedure.apply(byte,double)', 'OpenByteDoubleHashMap.put(byte,double)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.indexOfKey(byte)', 'OpenByteDoubleHashMap.removeKey(byte)', 'OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testGet(): ['OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.put(byte,double)', 'OpenByteDoubleHashMap.get(byte)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.indexOfKey(byte)', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testAdjustOrPutValue(): ['OpenByteDoubleHashMap.adjustOrPutValue(byte,double,double)', 'OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.put(byte,double)', 'OpenByteDoubleHashMap.get(byte)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.indexOfKey(byte)', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testKeys(): ['OpenByteDoubleHashMap.keys(org.apache.mahout.math.list.ByteArrayList)', 'ByteArrayList.get(int)', 'OpenByteDoubleHashMap.put(byte,double)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'ByteArrayList.elements()', 'ByteArrayList.setSize(int)', 'OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'ByteArrayList.sort()', 'OpenByteDoubleHashMap.keys()', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testPairsMatching(): ['ByteArrayList.get(int)', 'ByteDoubleProcedure.apply(byte,double)', 'OpenByteDoubleHashMap.put(byte,double)', 'DoubleArrayList.sort()', 'DoubleArrayList.add(double)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'ByteArrayList.clear()', 'OpenByteDoubleHashMap.rehash(int)', 'ByteArrayList.add(byte)', 'OpenByteDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'ByteArrayList.sort()', 'DoubleArrayList.size()', 'Arrays.ensureCapacity(double[],int)', 'DoubleArrayList.ensureCapacity(int)', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'DoubleArrayList.get(int)', 'ByteArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(byte[],int)', 'ByteArrayList.size()', 'OpenByteDoubleHashMap.indexOfKey(byte)', 'OpenByteDoubleHashMap.removeKey(byte)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.clear()', 'OpenByteDoubleHashMap.pairsMatching(org.apache.mahout.math.function.ByteDoubleProcedure,org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testValues(): ['DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'OpenByteDoubleHashMap.put(byte,double)', 'DoubleArrayList.sort()', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.indexOfKey(byte)', 'OpenByteDoubleHashMap.removeKey(byte)', 'DoubleArrayList.setSize(int)', 'OpenByteDoubleHashMap.values(org.apache.mahout.math.list.DoubleArrayList)', 'OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleArrayList.size()', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testCopy(): ['OpenByteDoubleHashMap.copy()', 'OpenByteDoubleHashMap.clear()', 'OpenByteDoubleHashMap.put(byte,double)', 'OpenByteDoubleHashMap.nextPrime(int)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.size()', 'OpenByteDoubleHashMap.trimToSize()', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testEquals(): ['OpenByteDoubleHashMap.copy()', 'OpenByteDoubleHashMap.put(byte,double)', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.equals(java.lang.Object)', 'OpenByteDoubleHashMap.indexOfKey(byte)', 'OpenByteDoubleHashMap.removeKey(byte)', 'OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testKeysSortedByValue(): ['OpenByteDoubleHashMap.put(byte,double)', 'ByteArrayList.size()', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'OpenByteDoubleHashMap.indexOfKey(byte)', 'OpenByteDoubleHashMap.removeKey(byte)', 'OpenByteDoubleHashMap.rehash(int)', 'ByteArrayList.toArray(byte[])', 'OpenByteDoubleHashMap.keysSortedByValue(org.apache.mahout.math.list.ByteArrayList)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenByteDoubleHashMapTest.testPairsSortedByKey(): ['OpenByteDoubleHashMap.pairsSortedByValue(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'ByteArrayList.get(int)', 'DoubleArrayList.get(int)', 'OpenByteDoubleHashMap.put(byte,double)', 'ByteArrayList.size()', 'OpenByteDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenByteDoubleHashMap.indexOfInsertion(byte)', 'ByteArrayList.clear()', 'OpenByteDoubleHashMap.rehash(int)', 'OpenByteDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenByteDoubleHashMap.pairsSortedByKey(org.apache.mahout.math.list.ByteArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList.clear()', 'DoubleArrayList.size()', 'OpenByteDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(short)']
OpenFloatDoubleHashMapTest.testConstructors(): ['OpenFloatDoubleHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenFloatDoubleHashMapTest.testEnsureCapacity(): ['OpenFloatDoubleHashMap.getInternalFactors(int[],double[],double[])', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'PrimeFinder.nextPrime(int)', 'OpenFloatDoubleHashMap.nextPrime(int)', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.ensureCapacity(int)', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)']
OpenFloatDoubleHashMapTest.testClear(): ['OpenFloatDoubleHashMap.clear()', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.get(float)', 'OpenFloatDoubleHashMap.indexOfKey(float)', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.trimToSize()', 'OpenFloatDoubleHashMap.size()', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatDoubleHashMap.nextPrime(int)', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)']
OpenFloatDoubleHashMapTest.testClone(): ['OpenFloatDoubleHashMap.clear()', 'OpenFloatDoubleHashMap.clone()', 'AbstractFloatDoubleMap.clone()', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.trimToSize()', 'OpenFloatDoubleHashMap.size()', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatDoubleHashMap.nextPrime(int)', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)']
OpenFloatDoubleHashMapTest.testContainsKey(): ['OpenFloatDoubleHashMap.containsKey(float)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)', 'OpenFloatDoubleHashMap.indexOfKey(float)']
OpenFloatDoubleHashMapTest.testContainValue(): ['OpenFloatDoubleHashMap.containsValue(double)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatDoubleHashMap.indexOfValue(double)', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)', 'OpenFloatDoubleHashMap.put(float,double)']
OpenFloatDoubleHashMapTest.testForEachKey(): ['OpenFloatDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'OpenFloatDoubleHashMap.removeKey(float)', 'FloatArrayList.size()', 'OpenFloatDoubleHashMap.indexOfKey(float)', 'OpenFloatDoubleHashMap.put(float,double)', 'FloatProcedure.apply(float)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.toArray(float[])', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)']
OpenFloatDoubleHashMapTest.testForEachPair(): ['OpenFloatDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.removeKey(float)', 'OpenFloatDoubleHashMap.indexOfKey(float)', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.forEachPair(org.apache.mahout.math.function.FloatDoubleProcedure)', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'FloatDoubleProcedure.apply(float,double)', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)']
OpenFloatDoubleHashMapTest.testGet(): ['OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.get(float)', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)', 'OpenFloatDoubleHashMap.indexOfKey(float)']
OpenFloatDoubleHashMapTest.testAdjustOrPutValue(): ['OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.adjustOrPutValue(float,double,double)', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.indexOfKey(float)', 'OpenFloatDoubleHashMap.get(float)', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)', 'OpenFloatDoubleHashMap.put(float,double)']
OpenFloatDoubleHashMapTest.testKeys(): ['OpenFloatDoubleHashMap.keys()', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'FloatArrayList.setSize(int)', 'OpenFloatDoubleHashMap.keys(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.elements()', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.get(int)', 'FloatArrayList.sort()', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)']
OpenFloatDoubleHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'OpenFloatDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'FloatArrayList.ensureCapacity(int)', 'DoubleArrayList.sort()', 'DoubleArrayList.add(double)', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.removeKey(float)', 'FloatArrayList.size()', 'OpenFloatDoubleHashMap.indexOfKey(float)', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'DoubleArrayList.size()', 'FloatArrayList.sort()', 'FloatDoubleProcedure.apply(float,double)', 'DoubleArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(double[],int)', 'OpenFloatDoubleHashMap.rehash(int)', 'FloatArrayList.clear()', 'DoubleArrayList.get(int)', 'FloatArrayList.add(float)', 'OpenFloatDoubleHashMap.pairsMatching(org.apache.mahout.math.function.FloatDoubleProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList.clear()', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.get(int)', 'HashFunctions.hash(float)']
OpenFloatDoubleHashMapTest.testValues(): ['OpenFloatDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.removeKey(float)', 'DoubleArrayList.setSize(int)', 'OpenFloatDoubleHashMap.indexOfKey(float)', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.values(org.apache.mahout.math.list.DoubleArrayList)', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.size()', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)']
OpenFloatDoubleHashMapTest.testCopy(): ['OpenFloatDoubleHashMap.clear()', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.copy()', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.trimToSize()', 'OpenFloatDoubleHashMap.size()', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatDoubleHashMap.nextPrime(int)', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)']
OpenFloatDoubleHashMapTest.testEquals(): ['OpenFloatDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.removeKey(float)', 'OpenFloatDoubleHashMap.copy()', 'OpenFloatDoubleHashMap.equals(java.lang.Object)', 'OpenFloatDoubleHashMap.indexOfKey(float)', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)']
OpenFloatDoubleHashMapTest.testKeysSortedByValue(): ['OpenFloatDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatDoubleHashMap.keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'OpenFloatDoubleHashMap.removeKey(float)', 'FloatArrayList.size()', 'OpenFloatDoubleHashMap.indexOfKey(float)', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.toArray(float[])', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)']
OpenFloatDoubleHashMapTest.testPairsSortedByKey(): ['OpenFloatDoubleHashMap.pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'FloatArrayList.clear()', 'DoubleArrayList.get(int)', 'OpenFloatDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenFloatDoubleHashMap.indexOfInsertion(float)', 'FloatArrayList.size()', 'OpenFloatDoubleHashMap.put(float,double)', 'OpenFloatDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenFloatDoubleHashMap.pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList.clear()', 'OpenFloatDoubleHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.size()', 'FloatArrayList.get(int)', 'HashFunctions.hash(float)', 'OpenFloatDoubleHashMap.rehash(int)']
OpenCharIntHashMapTest.testConstructors(): ['OpenCharIntHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenCharIntHashMapTest.testEnsureCapacity(): ['OpenCharIntHashMap.indexOfInsertion(char)', 'PrimeFinder.nextPrime(int)', 'OpenCharIntHashMap.rehash(int)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.ensureCapacity(int)', 'OpenCharIntHashMap.nextPrime(int)', 'OpenCharIntHashMap.getInternalFactors(int[],double[],double[])', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testClear(): ['OpenCharIntHashMap.trimToSize()', 'OpenCharIntHashMap.rehash(int)', 'OpenCharIntHashMap.nextPrime(int)', 'OpenCharIntHashMap.get(char)', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.clear()', 'OpenCharIntHashMap.size()', 'OpenCharIntHashMap.indexOfKey(char)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testClone(): ['OpenCharIntHashMap.trimToSize()', 'OpenCharIntHashMap.clone()', 'OpenCharIntHashMap.rehash(int)', 'OpenCharIntHashMap.nextPrime(int)', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'AbstractCharIntMap.clone()', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.clear()', 'OpenCharIntHashMap.size()', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testContainsKey(): ['OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'OpenCharIntHashMap.containsKey(char)', 'OpenCharIntHashMap.rehash(int)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.indexOfKey(char)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testContainValue(): ['OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'OpenCharIntHashMap.containsValue(int)', 'OpenCharIntHashMap.indexOfValue(int)', 'OpenCharIntHashMap.rehash(int)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testForEachKey(): ['CharArrayList.toArray(char[])', 'OpenCharIntHashMap.rehash(int)', 'CharProcedure.apply(char)', 'OpenCharIntHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.size()', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'OpenCharIntHashMap.removeKey(char)', 'OpenCharIntHashMap.forEachKey(org.apache.mahout.math.function.CharProcedure)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.indexOfKey(char)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testForEachPair(): ['OpenCharIntHashMap.rehash(int)', 'CharIntProcedure.apply(char,int)', 'OpenCharIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'OpenCharIntHashMap.forEachPair(org.apache.mahout.math.function.CharIntProcedure)', 'OpenCharIntHashMap.removeKey(char)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.indexOfKey(char)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testGet(): ['OpenCharIntHashMap.get(char)', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'OpenCharIntHashMap.rehash(int)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.indexOfKey(char)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testAdjustOrPutValue(): ['OpenCharIntHashMap.get(char)', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'OpenCharIntHashMap.rehash(int)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.indexOfKey(char)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.adjustOrPutValue(char,int,int)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testKeys(): ['OpenCharIntHashMap.keys(org.apache.mahout.math.list.CharArrayList)', 'CharArrayList.elements()', 'OpenCharIntHashMap.rehash(int)', 'CharArrayList.setSize(int)', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.sort()', 'OpenCharIntHashMap.put(char,int)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'CharArrayList.get(int)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.keys()', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testPairsMatching(): ['IntArrayList.sort()', 'CharIntProcedure.apply(char,int)', 'IntArrayList.size()', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'CharArrayList.sort()', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.removeKey(char)', 'CharArrayList.get(int)', 'IntArrayList.ensureCapacity(int)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.indexOfKey(char)', 'Arrays.ensureCapacity(int[],int)', 'IntArrayList.clear()', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)', 'CharArrayList.ensureCapacity(int)', 'OpenCharIntHashMap.rehash(int)', 'OpenCharIntHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.size()', 'IntArrayList.add(int)', 'OpenCharIntHashMap.put(char,int)', 'IntArrayList.get(int)', 'OpenCharIntHashMap.pairsMatching(org.apache.mahout.math.function.CharIntProcedure,org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.IntArrayList)', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.clear()', 'HashFunctions.hash(char)', 'CharArrayList.add(char)']
OpenCharIntHashMapTest.testValues(): ['OpenCharIntHashMap.rehash(int)', 'IntArrayList.sort()', 'IntArrayList.elements()', 'OpenCharIntHashMap.chooseShrinkCapacity(int,double,double)', 'IntArrayList.setSize(int)', 'IntArrayList.size()', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'IntArrayList.get(int)', 'OpenCharIntHashMap.removeKey(char)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.indexOfKey(char)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.values(org.apache.mahout.math.list.IntArrayList)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testCopy(): ['OpenCharIntHashMap.trimToSize()', 'OpenCharIntHashMap.rehash(int)', 'OpenCharIntHashMap.copy()', 'OpenCharIntHashMap.nextPrime(int)', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.clear()', 'OpenCharIntHashMap.size()', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testEquals(): ['OpenCharIntHashMap.equals(java.lang.Object)', 'OpenCharIntHashMap.rehash(int)', 'OpenCharIntHashMap.copy()', 'OpenCharIntHashMap.chooseShrinkCapacity(int,double,double)', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'OpenCharIntHashMap.removeKey(char)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.indexOfKey(char)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testKeysSortedByValue(): ['CharArrayList.toArray(char[])', 'OpenCharIntHashMap.rehash(int)', 'OpenCharIntHashMap.chooseShrinkCapacity(int,double,double)', 'CharArrayList.size()', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'OpenCharIntHashMap.removeKey(char)', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'OpenCharIntHashMap.indexOfKey(char)', 'HashFunctions.hash(char)', 'OpenCharIntHashMap.keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenCharIntHashMapTest.testPairsSortedByKey(): ['OpenCharIntHashMap.pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.IntArrayList)', 'OpenCharIntHashMap.rehash(int)', 'CharArrayList.size()', 'IntArrayList.size()', 'OpenCharIntHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharIntHashMap.indexOfInsertion(char)', 'OpenCharIntHashMap.put(char,int)', 'IntArrayList.get(int)', 'CharArrayList.get(int)', 'CharArrayList.clear()', 'OpenCharIntHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(char)', 'IntArrayList.clear()', 'OpenCharIntHashMap.pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,org.apache.mahout.math.list.IntArrayList)', 'OpenCharIntHashMap.chooseLowWaterMark(int,double)']
OpenLongShortHashMapTest.testConstructors(): ['OpenLongShortHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenLongShortHashMapTest.testEnsureCapacity(): ['OpenLongShortHashMap.getInternalFactors(int[],double[],double[])', 'OpenLongShortHashMap.nextPrime(int)', 'PrimeFinder.nextPrime(int)', 'OpenLongShortHashMap.ensureCapacity(int)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.rehash(int)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)']
OpenLongShortHashMapTest.testClear(): ['OpenLongShortHashMap.nextPrime(int)', 'OpenLongShortHashMap.size()', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.rehash(int)', 'OpenLongShortHashMap.trimToSize()', 'OpenLongShortHashMap.indexOfKey(long)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.clear()', 'OpenLongShortHashMap.get(long)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)']
OpenLongShortHashMapTest.testClone(): ['OpenLongShortHashMap.nextPrime(int)', 'OpenLongShortHashMap.size()', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.rehash(int)', 'OpenLongShortHashMap.trimToSize()', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.clear()', 'OpenLongShortHashMap.clone()', 'AbstractLongShortMap.clone()', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)']
OpenLongShortHashMapTest.testContainsKey(): ['OpenLongShortHashMap.containsKey(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)', 'OpenLongShortHashMap.indexOfKey(long)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.rehash(int)']
OpenLongShortHashMapTest.testContainValue(): ['OpenLongShortHashMap.chooseLowWaterMark(int,double)', 'OpenLongShortHashMap.indexOfValue(short)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.containsValue(short)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.rehash(int)']
OpenLongShortHashMapTest.testForEachKey(): ['LongArrayList.toArray(long[])', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.rehash(int)', 'OpenLongShortHashMap.forEachKey(org.apache.mahout.math.function.LongProcedure)', 'OpenLongShortHashMap.removeKey(long)', 'LongProcedure.apply(long)', 'LongArrayList.size()', 'OpenLongShortHashMap.indexOfKey(long)', 'OpenLongShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)']
OpenLongShortHashMapTest.testForEachPair(): ['LongShortProcedure.apply(long,short)', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.rehash(int)', 'OpenLongShortHashMap.removeKey(long)', 'OpenLongShortHashMap.indexOfKey(long)', 'OpenLongShortHashMap.forEachPair(org.apache.mahout.math.function.LongShortProcedure)', 'OpenLongShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)']
OpenLongShortHashMapTest.testGet(): ['OpenLongShortHashMap.chooseLowWaterMark(int,double)', 'OpenLongShortHashMap.indexOfKey(long)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.get(long)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.rehash(int)']
OpenLongShortHashMapTest.testAdjustOrPutValue(): ['OpenLongShortHashMap.rehash(int)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)', 'OpenLongShortHashMap.indexOfKey(long)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.get(long)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.adjustOrPutValue(long,short,short)']
OpenLongShortHashMapTest.testKeys(): ['LongArrayList.elements()', 'OpenLongShortHashMap.keys()', 'LongArrayList.get(int)', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.rehash(int)', 'LongArrayList.setSize(int)', 'OpenLongShortHashMap.keys(org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.sort()', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)']
OpenLongShortHashMapTest.testPairsMatching(): ['LongShortProcedure.apply(long,short)', 'LongArrayList.get(int)', 'ShortArrayList.clear()', 'OpenLongShortHashMap.removeKey(long)', 'LongArrayList.clear()', 'OpenLongShortHashMap.pairsMatching(org.apache.mahout.math.function.LongShortProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ShortArrayList)', 'LongArrayList.size()', 'OpenLongShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.size()', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.rehash(int)', 'LongArrayList.sort()', 'ShortArrayList.sort()', 'OpenLongShortHashMap.indexOfKey(long)', 'LongArrayList.ensureCapacity(int)', 'ShortArrayList.get(int)', 'ShortArrayList.add(short)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.indexOfInsertion(long)']
OpenLongShortHashMapTest.testValues(): ['ShortArrayList.size()', 'ShortArrayList.elements()', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.rehash(int)', 'OpenLongShortHashMap.values(org.apache.mahout.math.list.ShortArrayList)', 'OpenLongShortHashMap.removeKey(long)', 'ShortArrayList.sort()', 'OpenLongShortHashMap.indexOfKey(long)', 'ShortArrayList.setSize(int)', 'OpenLongShortHashMap.chooseShrinkCapacity(int,double,double)', 'ShortArrayList.get(int)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)']
OpenLongShortHashMapTest.testCopy(): ['OpenLongShortHashMap.nextPrime(int)', 'OpenLongShortHashMap.size()', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.rehash(int)', 'OpenLongShortHashMap.trimToSize()', 'OpenLongShortHashMap.copy()', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.clear()', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)']
OpenLongShortHashMapTest.testEquals(): ['OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.equals(java.lang.Object)', 'OpenLongShortHashMap.rehash(int)', 'OpenLongShortHashMap.removeKey(long)', 'OpenLongShortHashMap.copy()', 'OpenLongShortHashMap.indexOfKey(long)', 'OpenLongShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)']
OpenLongShortHashMapTest.testKeysSortedByValue(): ['LongArrayList.toArray(long[])', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.rehash(int)', 'OpenLongShortHashMap.keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'OpenLongShortHashMap.removeKey(long)', 'LongArrayList.size()', 'OpenLongShortHashMap.indexOfKey(long)', 'OpenLongShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)']
OpenLongShortHashMapTest.testPairsSortedByKey(): ['ShortArrayList.size()', 'OpenLongShortHashMap.pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ShortArrayList)', 'OpenLongShortHashMap.pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.ShortArrayList)', 'LongArrayList.get(int)', 'ShortArrayList.clear()', 'OpenLongShortHashMap.chooseHighWaterMark(int,double)', 'OpenLongShortHashMap.rehash(int)', 'LongArrayList.clear()', 'LongArrayList.size()', 'ShortArrayList.get(int)', 'OpenLongShortHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(long)', 'OpenLongShortHashMap.put(long,short)', 'OpenLongShortHashMap.indexOfInsertion(long)', 'OpenLongShortHashMap.chooseLowWaterMark(int,double)']
OpenDoubleLongHashMapTest.testConstructors(): ['OpenDoubleLongHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenDoubleLongHashMapTest.testEnsureCapacity(): ['HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.nextPrime(int)', 'PrimeFinder.nextPrime(int)', 'OpenDoubleLongHashMap.getInternalFactors(int[],double[],double[])', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleLongHashMap.ensureCapacity(int)']
OpenDoubleLongHashMapTest.testClear(): ['OpenDoubleLongHashMap.get(double)', 'HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.nextPrime(int)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.trimToSize()', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.clear()', 'OpenDoubleLongHashMap.indexOfKey(double)', 'OpenDoubleLongHashMap.size()']
OpenDoubleLongHashMapTest.testClone(): ['HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.nextPrime(int)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.trimToSize()', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'AbstractDoubleLongMap.clone()', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.clear()', 'OpenDoubleLongHashMap.size()', 'OpenDoubleLongHashMap.clone()']
OpenDoubleLongHashMapTest.testContainsKey(): ['HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleLongHashMap.indexOfKey(double)', 'OpenDoubleLongHashMap.containsKey(double)']
OpenDoubleLongHashMapTest.testContainValue(): ['HashFunctions.hash(double)', 'OpenDoubleLongHashMap.indexOfValue(long)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleLongHashMap.containsValue(long)']
OpenDoubleLongHashMapTest.testForEachKey(): ['DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.removeKey(double)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleLongHashMap.forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'DoubleArrayList.size()', 'OpenDoubleLongHashMap.put(double,long)', 'DoubleProcedure.apply(double)', 'OpenDoubleLongHashMap.indexOfKey(double)', 'OpenDoubleLongHashMap.chooseShrinkCapacity(int,double,double)']
OpenDoubleLongHashMapTest.testForEachPair(): ['HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.forEachPair(org.apache.mahout.math.function.DoubleLongProcedure)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.removeKey(double)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'DoubleLongProcedure.apply(double,long)', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.indexOfKey(double)', 'OpenDoubleLongHashMap.chooseShrinkCapacity(int,double,double)']
OpenDoubleLongHashMapTest.testGet(): ['OpenDoubleLongHashMap.get(double)', 'HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleLongHashMap.indexOfKey(double)']
OpenDoubleLongHashMapTest.testAdjustOrPutValue(): ['OpenDoubleLongHashMap.get(double)', 'HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.adjustOrPutValue(double,long,long)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleLongHashMap.indexOfKey(double)']
OpenDoubleLongHashMapTest.testKeys(): ['HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'DoubleArrayList.setSize(int)', 'OpenDoubleLongHashMap.keys(org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.keys()']
OpenDoubleLongHashMapTest.testPairsMatching(): ['OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.sort()', 'OpenDoubleLongHashMap.removeKey(double)', 'LongArrayList.get(int)', 'DoubleArrayList.add(double)', 'LongArrayList.clear()', 'LongArrayList.size()', 'DoubleArrayList.size()', 'DoubleLongProcedure.apply(double,long)', 'Arrays.ensureCapacity(double[],int)', 'OpenDoubleLongHashMap.put(double,long)', 'DoubleArrayList.ensureCapacity(int)', 'OpenDoubleLongHashMap.chooseShrinkCapacity(int,double,double)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'OpenDoubleLongHashMap.pairsMatching(org.apache.mahout.math.function.DoubleLongProcedure,org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.LongArrayList)', 'HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'DoubleArrayList.get(int)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.sort()', 'DoubleArrayList.clear()', 'LongArrayList.ensureCapacity(int)', 'OpenDoubleLongHashMap.indexOfKey(double)']
OpenDoubleLongHashMapTest.testValues(): ['LongArrayList.elements()', 'HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.removeKey(double)', 'LongArrayList.get(int)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'LongArrayList.sort()', 'LongArrayList.size()', 'OpenDoubleLongHashMap.values(org.apache.mahout.math.list.LongArrayList)', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.indexOfKey(double)', 'LongArrayList.setSize(int)', 'OpenDoubleLongHashMap.chooseShrinkCapacity(int,double,double)']
OpenDoubleLongHashMapTest.testCopy(): ['HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.nextPrime(int)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.trimToSize()', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.clear()', 'OpenDoubleLongHashMap.size()', 'OpenDoubleLongHashMap.copy()']
OpenDoubleLongHashMapTest.testEquals(): ['HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.removeKey(double)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleLongHashMap.equals(java.lang.Object)', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.indexOfKey(double)', 'OpenDoubleLongHashMap.copy()', 'OpenDoubleLongHashMap.chooseShrinkCapacity(int,double,double)']
OpenDoubleLongHashMapTest.testKeysSortedByValue(): ['DoubleArrayList.toArray(double[])', 'HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleLongHashMap.removeKey(double)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleLongHashMap.keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'DoubleArrayList.size()', 'OpenDoubleLongHashMap.put(double,long)', 'OpenDoubleLongHashMap.indexOfKey(double)', 'OpenDoubleLongHashMap.chooseShrinkCapacity(int,double,double)']
OpenDoubleLongHashMapTest.testPairsSortedByKey(): ['HashFunctions.hash(double)', 'OpenDoubleLongHashMap.rehash(int)', 'OpenDoubleLongHashMap.pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.LongArrayList)', 'OpenDoubleLongHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleLongHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.get(int)', 'LongArrayList.get(int)', 'OpenDoubleLongHashMap.indexOfInsertion(double)', 'OpenDoubleLongHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleLongHashMap.pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.clear()', 'DoubleArrayList.clear()', 'LongArrayList.size()', 'DoubleArrayList.size()', 'OpenDoubleLongHashMap.put(double,long)']
OpenCharObjectHashMapTest.testConstructors(): ['PrimeFinder.nextPrime(int)', 'OpenCharObjectHashMap.getInternalFactors(int[],double[],double[])']
OpenCharObjectHashMapTest.testEnsureCapacity(): ['PrimeFinder.nextPrime(int)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.nextPrime(int)', 'OpenCharObjectHashMap.ensureCapacity(int)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.getInternalFactors(int[],double[],double[])', 'OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.indexOfInsertion(char)']
OpenCharObjectHashMapTest.testClear(): ['OpenCharObjectHashMap.containsKey(char)', 'OpenCharObjectHashMap.trimToSize()', 'OpenCharObjectHashMap.size()', 'OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.nextPrime(int)', 'OpenCharObjectHashMap.clear()', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'OpenCharObjectHashMap.indexOfInsertion(char)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.indexOfKey(char)', 'OpenCharObjectHashMap.get(char)']
OpenCharObjectHashMapTest.testClone(): ['OpenCharObjectHashMap.trimToSize()', 'OpenCharObjectHashMap.size()', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.nextPrime(int)', 'AbstractCharObjectMap.clone()', 'OpenCharObjectHashMap.clear()', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'OpenCharObjectHashMap.indexOfInsertion(char)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.clone()', 'OpenCharObjectHashMap.rehash(int)']
OpenCharObjectHashMapTest.testContainsKey(): ['OpenCharObjectHashMap.containsKey(char)', 'OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'OpenCharObjectHashMap.indexOfKey(char)', 'OpenCharObjectHashMap.indexOfInsertion(char)']
OpenCharObjectHashMapTest.testContainValue(): ['OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.indexOfValue(java.lang.Object)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.containsValue(java.lang.Object)', 'OpenCharObjectHashMap.indexOfInsertion(char)']
OpenCharObjectHashMapTest.testForEachKey(): ['CharArrayList.toArray(char[])', 'OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.forEachKey(org.apache.mahout.math.function.CharProcedure)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'CharProcedure.apply(char)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'CharArrayList.size()', 'OpenCharObjectHashMap.indexOfInsertion(char)', 'OpenCharObjectHashMap.removeKey(char)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharObjectHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.indexOfKey(char)']
OpenCharObjectHashMapTest.testForEachPair(): ['CharObjectProcedure.apply(char,java.lang.Object)', 'OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.forEachPair(org.apache.mahout.math.function.CharObjectProcedure)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'OpenCharObjectHashMap.indexOfInsertion(char)', 'OpenCharObjectHashMap.removeKey(char)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharObjectHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.indexOfKey(char)']
OpenCharObjectHashMapTest.testGet(): ['OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'OpenCharObjectHashMap.indexOfKey(char)', 'OpenCharObjectHashMap.get(char)', 'OpenCharObjectHashMap.indexOfInsertion(char)']
OpenCharObjectHashMapTest.testKeys(): ['CharArrayList.elements()', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'OpenCharObjectHashMap.indexOfInsertion(char)', 'CharArrayList.setSize(int)', 'CharArrayList.sort()', 'OpenCharObjectHashMap.keys(org.apache.mahout.math.list.CharArrayList)', 'OpenCharObjectHashMap.keys()', 'CharArrayList.get(int)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.rehash(int)']
OpenCharObjectHashMapTest.testPairsMatching(): ['CharObjectProcedure.apply(char,java.lang.Object)', 'OpenCharObjectHashMap.pairsMatching(org.apache.mahout.math.function.CharObjectProcedure,org.apache.mahout.math.list.CharArrayList,java.util.List)', 'CharArrayList.ensureCapacity(int)', 'OpenCharObjectHashMap.indexOfKey(char)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'CharArrayList.size()', 'OpenCharObjectHashMap.indexOfInsertion(char)', 'CharArrayList.sort()', 'CharArrayList.get(int)', 'Arrays.ensureCapacity(char[],int)', 'CharArrayList.clear()', 'OpenCharObjectHashMap.removeKey(char)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharObjectHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.rehash(int)', 'CharArrayList.add(char)']
OpenCharObjectHashMapTest.testValues(): ['OpenCharObjectHashMap.indexOfKey(char)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.removeKey(char)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharObjectHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.values(java.util.List)', 'OpenCharObjectHashMap.indexOfInsertion(char)']
OpenCharObjectHashMapTest.testCopy(): ['OpenCharObjectHashMap.trimToSize()', 'OpenCharObjectHashMap.size()', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.nextPrime(int)', 'OpenCharObjectHashMap.clear()', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'OpenCharObjectHashMap.indexOfInsertion(char)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.copy()']
OpenCharObjectHashMapTest.testEquals(): ['OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'OpenCharObjectHashMap.equals(java.lang.Object)', 'OpenCharObjectHashMap.indexOfInsertion(char)', 'OpenCharObjectHashMap.removeKey(char)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharObjectHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.indexOfKey(char)', 'OpenCharObjectHashMap.copy()']
OpenCharObjectHashMapTest.testKeysSortedByValue(): ['CharArrayList.toArray(char[])', 'OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.keysSortedByValue(org.apache.mahout.math.list.CharArrayList)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'CharArrayList.size()', 'OpenCharObjectHashMap.indexOfInsertion(char)', 'OpenCharObjectHashMap.removeKey(char)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharObjectHashMap.chooseShrinkCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.indexOfKey(char)']
OpenCharObjectHashMapTest.testPairsSortedByKey(): ['CharArrayList.get(int)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenCharObjectHashMap.pairsSortedByKey(org.apache.mahout.math.list.CharArrayList,java.util.List)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'CharArrayList.size()', 'OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.indexOfInsertion(char)']
OpenCharObjectHashMapTest.testPairsSortedByValue(): ['OpenCharObjectHashMap.pairsSortedByValue(org.apache.mahout.math.list.CharArrayList,java.util.List)', 'CharArrayList.get(int)', 'OpenCharObjectHashMap.chooseLowWaterMark(int,double)', 'OpenCharObjectHashMap.chooseHighWaterMark(int,double)', 'OpenCharObjectHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(char)', 'OpenCharObjectHashMap.put(char,java.lang.Object)', 'OpenCharObjectHashMap.rehash(int)', 'OpenCharObjectHashMap.indexOfInsertion(char)']
OpenLongDoubleHashMapTest.testConstructors(): ['OpenLongDoubleHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenLongDoubleHashMapTest.testEnsureCapacity(): ['OpenLongDoubleHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)', 'OpenLongDoubleHashMap.rehash(int)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.ensureCapacity(int)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'OpenLongDoubleHashMap.nextPrime(int)']
OpenLongDoubleHashMapTest.testClear(): ['OpenLongDoubleHashMap.put(long,double)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenLongDoubleHashMap.size()', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'OpenLongDoubleHashMap.clear()', 'OpenLongDoubleHashMap.get(long)', 'OpenLongDoubleHashMap.trimToSize()', 'OpenLongDoubleHashMap.indexOfKey(long)', 'OpenLongDoubleHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenLongDoubleHashMap.nextPrime(int)']
OpenLongDoubleHashMapTest.testClone(): ['OpenLongDoubleHashMap.put(long,double)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenLongDoubleHashMap.size()', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'OpenLongDoubleHashMap.clear()', 'OpenLongDoubleHashMap.trimToSize()', 'AbstractLongDoubleMap.clone()', 'OpenLongDoubleHashMap.rehash(int)', 'OpenLongDoubleHashMap.clone()', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenLongDoubleHashMap.nextPrime(int)']
OpenLongDoubleHashMapTest.testContainsKey(): ['OpenLongDoubleHashMap.put(long,double)', 'OpenLongDoubleHashMap.indexOfKey(long)', 'OpenLongDoubleHashMap.rehash(int)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenLongDoubleHashMap.containsKey(long)', 'OpenLongDoubleHashMap.indexOfInsertion(long)']
OpenLongDoubleHashMapTest.testContainValue(): ['OpenLongDoubleHashMap.put(long,double)', 'OpenLongDoubleHashMap.rehash(int)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.containsValue(double)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'OpenLongDoubleHashMap.indexOfValue(double)']
OpenLongDoubleHashMapTest.testForEachKey(): ['OpenLongDoubleHashMap.put(long,double)', 'LongArrayList.toArray(long[])', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.removeKey(long)', 'OpenLongDoubleHashMap.forEachKey(org.apache.mahout.math.function.LongProcedure)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenLongDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'LongProcedure.apply(long)', 'OpenLongDoubleHashMap.indexOfKey(long)', 'LongArrayList.size()', 'OpenLongDoubleHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)']
OpenLongDoubleHashMapTest.testForEachPair(): ['OpenLongDoubleHashMap.put(long,double)', 'OpenLongDoubleHashMap.forEachPair(org.apache.mahout.math.function.LongDoubleProcedure)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.removeKey(long)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenLongDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'LongDoubleProcedure.apply(long,double)', 'OpenLongDoubleHashMap.indexOfKey(long)', 'OpenLongDoubleHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)']
OpenLongDoubleHashMapTest.testGet(): ['OpenLongDoubleHashMap.put(long,double)', 'OpenLongDoubleHashMap.get(long)', 'OpenLongDoubleHashMap.indexOfKey(long)', 'OpenLongDoubleHashMap.rehash(int)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)']
OpenLongDoubleHashMapTest.testAdjustOrPutValue(): ['OpenLongDoubleHashMap.put(long,double)', 'OpenLongDoubleHashMap.get(long)', 'OpenLongDoubleHashMap.indexOfKey(long)', 'OpenLongDoubleHashMap.adjustOrPutValue(long,double,double)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.rehash(int)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)']
OpenLongDoubleHashMapTest.testKeys(): ['OpenLongDoubleHashMap.put(long,double)', 'LongArrayList.elements()', 'LongArrayList.get(int)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'LongArrayList.sort()', 'OpenLongDoubleHashMap.keys(org.apache.mahout.math.list.LongArrayList)', 'OpenLongDoubleHashMap.rehash(int)', 'OpenLongDoubleHashMap.keys()', 'HashFunctions.hash(long)', 'LongArrayList.setSize(int)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)']
OpenLongDoubleHashMapTest.testPairsMatching(): ['DoubleArrayList.sort()', 'LongArrayList.get(int)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.add(double)', 'OpenLongDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'LongDoubleProcedure.apply(long,double)', 'LongArrayList.clear()', 'OpenLongDoubleHashMap.indexOfKey(long)', 'LongArrayList.size()', 'DoubleArrayList.size()', 'OpenLongDoubleHashMap.pairsMatching(org.apache.mahout.math.function.LongDoubleProcedure,org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'Arrays.ensureCapacity(double[],int)', 'OpenLongDoubleHashMap.rehash(int)', 'DoubleArrayList.ensureCapacity(int)', 'HashFunctions.hash(long)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'OpenLongDoubleHashMap.put(long,double)', 'DoubleArrayList.get(int)', 'OpenLongDoubleHashMap.removeKey(long)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.sort()', 'DoubleArrayList.clear()', 'LongArrayList.ensureCapacity(int)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)']
OpenLongDoubleHashMapTest.testValues(): ['OpenLongDoubleHashMap.put(long,double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.removeKey(long)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenLongDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'DoubleArrayList.setSize(int)', 'OpenLongDoubleHashMap.values(org.apache.mahout.math.list.DoubleArrayList)', 'OpenLongDoubleHashMap.indexOfKey(long)', 'DoubleArrayList.size()', 'OpenLongDoubleHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)']
OpenLongDoubleHashMapTest.testCopy(): ['OpenLongDoubleHashMap.put(long,double)', 'OpenLongDoubleHashMap.copy()', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenLongDoubleHashMap.size()', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'OpenLongDoubleHashMap.clear()', 'OpenLongDoubleHashMap.trimToSize()', 'OpenLongDoubleHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)', 'OpenLongDoubleHashMap.nextPrime(int)']
OpenLongDoubleHashMapTest.testEquals(): ['OpenLongDoubleHashMap.put(long,double)', 'OpenLongDoubleHashMap.copy()', 'OpenLongDoubleHashMap.removeKey(long)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenLongDoubleHashMap.equals(java.lang.Object)', 'OpenLongDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'OpenLongDoubleHashMap.indexOfKey(long)', 'OpenLongDoubleHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)']
OpenLongDoubleHashMapTest.testKeysSortedByValue(): ['OpenLongDoubleHashMap.put(long,double)', 'LongArrayList.toArray(long[])', 'OpenLongDoubleHashMap.keysSortedByValue(org.apache.mahout.math.list.LongArrayList)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.removeKey(long)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenLongDoubleHashMap.chooseShrinkCapacity(int,double,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'OpenLongDoubleHashMap.indexOfKey(long)', 'LongArrayList.size()', 'OpenLongDoubleHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)']
OpenLongDoubleHashMapTest.testPairsSortedByKey(): ['OpenLongDoubleHashMap.put(long,double)', 'DoubleArrayList.get(int)', 'LongArrayList.get(int)', 'OpenLongDoubleHashMap.chooseGrowCapacity(int,double,double)', 'OpenLongDoubleHashMap.chooseLowWaterMark(int,double)', 'OpenLongDoubleHashMap.indexOfInsertion(long)', 'OpenLongDoubleHashMap.pairsSortedByValue(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'LongArrayList.clear()', 'DoubleArrayList.clear()', 'LongArrayList.size()', 'DoubleArrayList.size()', 'OpenLongDoubleHashMap.rehash(int)', 'HashFunctions.hash(long)', 'OpenLongDoubleHashMap.pairsSortedByKey(org.apache.mahout.math.list.LongArrayList,org.apache.mahout.math.list.DoubleArrayList)', 'OpenLongDoubleHashMap.chooseHighWaterMark(int,double)']
OpenFloatShortHashMapTest.testConstructors(): ['OpenFloatShortHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenFloatShortHashMapTest.testEnsureCapacity(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.ensureCapacity(int)', 'PrimeFinder.nextPrime(int)', 'OpenFloatShortHashMap.nextPrime(int)', 'OpenFloatShortHashMap.rehash(int)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.getInternalFactors(int[],double[],double[])', 'HashFunctions.hash(float)', 'OpenFloatShortHashMap.indexOfInsertion(float)']
OpenFloatShortHashMapTest.testClear(): ['OpenFloatShortHashMap.clear()', 'OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.size()', 'OpenFloatShortHashMap.rehash(int)', 'OpenFloatShortHashMap.get(float)', 'OpenFloatShortHashMap.trimToSize()', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'OpenFloatShortHashMap.indexOfKey(float)', 'OpenFloatShortHashMap.nextPrime(int)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.put(float,short)', 'HashFunctions.hash(float)']
OpenFloatShortHashMapTest.testClone(): ['OpenFloatShortHashMap.clear()', 'OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.size()', 'OpenFloatShortHashMap.rehash(int)', 'OpenFloatShortHashMap.clone()', 'OpenFloatShortHashMap.trimToSize()', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'AbstractFloatShortMap.clone()', 'OpenFloatShortHashMap.nextPrime(int)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.put(float,short)', 'HashFunctions.hash(float)']
OpenFloatShortHashMapTest.testContainsKey(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.indexOfKey(float)', 'OpenFloatShortHashMap.rehash(int)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.put(float,short)', 'OpenFloatShortHashMap.containsKey(float)', 'HashFunctions.hash(float)', 'OpenFloatShortHashMap.indexOfInsertion(float)']
OpenFloatShortHashMapTest.testContainValue(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.rehash(int)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.put(float,short)', 'OpenFloatShortHashMap.containsValue(short)', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'HashFunctions.hash(float)', 'OpenFloatShortHashMap.indexOfValue(short)']
OpenFloatShortHashMapTest.testForEachKey(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.rehash(int)', 'OpenFloatShortHashMap.forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'FloatArrayList.size()', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'FloatProcedure.apply(float)', 'OpenFloatShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatShortHashMap.indexOfKey(float)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.toArray(float[])', 'OpenFloatShortHashMap.put(float,short)', 'HashFunctions.hash(float)', 'OpenFloatShortHashMap.removeKey(float)']
OpenFloatShortHashMapTest.testForEachPair(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.rehash(int)', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'OpenFloatShortHashMap.forEachPair(org.apache.mahout.math.function.FloatShortProcedure)', 'OpenFloatShortHashMap.chooseShrinkCapacity(int,double,double)', 'FloatShortProcedure.apply(float,short)', 'OpenFloatShortHashMap.indexOfKey(float)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.put(float,short)', 'HashFunctions.hash(float)', 'OpenFloatShortHashMap.removeKey(float)']
OpenFloatShortHashMapTest.testGet(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.indexOfKey(float)', 'OpenFloatShortHashMap.rehash(int)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.put(float,short)', 'OpenFloatShortHashMap.get(float)', 'HashFunctions.hash(float)', 'OpenFloatShortHashMap.indexOfInsertion(float)']
OpenFloatShortHashMapTest.testAdjustOrPutValue(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.adjustOrPutValue(float,short,short)', 'OpenFloatShortHashMap.indexOfKey(float)', 'OpenFloatShortHashMap.rehash(int)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.put(float,short)', 'OpenFloatShortHashMap.get(float)', 'HashFunctions.hash(float)', 'OpenFloatShortHashMap.indexOfInsertion(float)']
OpenFloatShortHashMapTest.testKeys(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.keys()', 'OpenFloatShortHashMap.rehash(int)', 'FloatArrayList.setSize(int)', 'FloatArrayList.elements()', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'FloatArrayList.get(int)', 'FloatArrayList.sort()', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.keys(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatShortHashMap.put(float,short)', 'HashFunctions.hash(float)']
OpenFloatShortHashMapTest.testPairsMatching(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'Arrays.ensureCapacity(float[],int)', 'FloatArrayList.ensureCapacity(int)', 'OpenFloatShortHashMap.rehash(int)', 'ShortArrayList.clear()', 'FloatArrayList.size()', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'OpenFloatShortHashMap.chooseShrinkCapacity(int,double,double)', 'FloatArrayList.sort()', 'OpenFloatShortHashMap.put(float,short)', 'OpenFloatShortHashMap.pairsMatching(org.apache.mahout.math.function.FloatShortProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.size()', 'FloatArrayList.clear()', 'ShortArrayList.ensureCapacity(int)', 'Arrays.ensureCapacity(short[],int)', 'FloatArrayList.add(float)', 'ShortArrayList.sort()', 'FloatShortProcedure.apply(float,short)', 'OpenFloatShortHashMap.indexOfKey(float)', 'FloatArrayList.get(int)', 'ShortArrayList.get(int)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'ShortArrayList.add(short)', 'HashFunctions.hash(float)', 'OpenFloatShortHashMap.removeKey(float)']
OpenFloatShortHashMapTest.testValues(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'ShortArrayList.size()', 'OpenFloatShortHashMap.values(org.apache.mahout.math.list.ShortArrayList)', 'OpenFloatShortHashMap.rehash(int)', 'ShortArrayList.elements()', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'OpenFloatShortHashMap.chooseShrinkCapacity(int,double,double)', 'ShortArrayList.sort()', 'OpenFloatShortHashMap.indexOfKey(float)', 'ShortArrayList.setSize(int)', 'ShortArrayList.get(int)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.put(float,short)', 'HashFunctions.hash(float)', 'OpenFloatShortHashMap.removeKey(float)']
OpenFloatShortHashMapTest.testCopy(): ['OpenFloatShortHashMap.clear()', 'OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.size()', 'OpenFloatShortHashMap.copy()', 'OpenFloatShortHashMap.rehash(int)', 'OpenFloatShortHashMap.trimToSize()', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'OpenFloatShortHashMap.nextPrime(int)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.put(float,short)', 'HashFunctions.hash(float)']
OpenFloatShortHashMapTest.testEquals(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.copy()', 'OpenFloatShortHashMap.rehash(int)', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'OpenFloatShortHashMap.equals(java.lang.Object)', 'OpenFloatShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatShortHashMap.indexOfKey(float)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.put(float,short)', 'HashFunctions.hash(float)', 'OpenFloatShortHashMap.removeKey(float)']
OpenFloatShortHashMapTest.testKeysSortedByValue(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.rehash(int)', 'FloatArrayList.size()', 'OpenFloatShortHashMap.keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'OpenFloatShortHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatShortHashMap.indexOfKey(float)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'FloatArrayList.toArray(float[])', 'OpenFloatShortHashMap.put(float,short)', 'HashFunctions.hash(float)', 'OpenFloatShortHashMap.removeKey(float)']
OpenFloatShortHashMapTest.testPairsSortedByKey(): ['OpenFloatShortHashMap.chooseLowWaterMark(int,double)', 'OpenFloatShortHashMap.pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ShortArrayList)', 'ShortArrayList.size()', 'FloatArrayList.clear()', 'OpenFloatShortHashMap.rehash(int)', 'ShortArrayList.clear()', 'FloatArrayList.size()', 'OpenFloatShortHashMap.indexOfInsertion(float)', 'OpenFloatShortHashMap.pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.ShortArrayList)', 'FloatArrayList.get(int)', 'ShortArrayList.get(int)', 'OpenFloatShortHashMap.chooseHighWaterMark(int,double)', 'OpenFloatShortHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatShortHashMap.put(float,short)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testConstructors(): ['OpenFloatLongHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenFloatLongHashMapTest.testEnsureCapacity(): ['OpenFloatLongHashMap.ensureCapacity(int)', 'OpenFloatLongHashMap.rehash(int)', 'PrimeFinder.nextPrime(int)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.getInternalFactors(int[],double[],double[])', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)', 'OpenFloatLongHashMap.nextPrime(int)']
OpenFloatLongHashMapTest.testClear(): ['OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.clear()', 'OpenFloatLongHashMap.nextPrime(int)', 'OpenFloatLongHashMap.trimToSize()', 'OpenFloatLongHashMap.put(float,long)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.get(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.size()', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatLongHashMap.indexOfKey(float)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testClone(): ['OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.clear()', 'OpenFloatLongHashMap.nextPrime(int)', 'OpenFloatLongHashMap.trimToSize()', 'OpenFloatLongHashMap.put(float,long)', 'AbstractFloatLongMap.clone()', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.size()', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.clone()', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testContainsKey(): ['OpenFloatLongHashMap.put(float,long)', 'OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatLongHashMap.containsKey(float)', 'OpenFloatLongHashMap.indexOfKey(float)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testContainValue(): ['OpenFloatLongHashMap.put(float,long)', 'OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.containsValue(long)', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.indexOfValue(long)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testForEachKey(): ['OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.chooseShrinkCapacity(int,double,double)', 'FloatArrayList.size()', 'OpenFloatLongHashMap.put(float,long)', 'FloatProcedure.apply(float)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.removeKey(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.toArray(float[])', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.forEachKey(org.apache.mahout.math.function.FloatProcedure)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatLongHashMap.indexOfKey(float)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testForEachPair(): ['OpenFloatLongHashMap.forEachPair(org.apache.mahout.math.function.FloatLongProcedure)', 'OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatLongHashMap.put(float,long)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.removeKey(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'FloatLongProcedure.apply(float,long)', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatLongHashMap.indexOfKey(float)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testGet(): ['OpenFloatLongHashMap.put(float,long)', 'OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.get(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatLongHashMap.indexOfKey(float)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testAdjustOrPutValue(): ['OpenFloatLongHashMap.put(float,long)', 'OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.get(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.adjustOrPutValue(float,long,long)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatLongHashMap.indexOfKey(float)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testKeys(): ['OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.keys(org.apache.mahout.math.list.FloatArrayList)', 'FloatArrayList.setSize(int)', 'FloatArrayList.elements()', 'OpenFloatLongHashMap.put(float,long)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'FloatArrayList.get(int)', 'FloatArrayList.sort()', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatLongHashMap.keys()', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testPairsMatching(): ['Arrays.ensureCapacity(float[],int)', 'FloatArrayList.ensureCapacity(int)', 'OpenFloatLongHashMap.chooseShrinkCapacity(int,double,double)', 'LongArrayList.get(int)', 'FloatArrayList.size()', 'LongArrayList.clear()', 'LongArrayList.size()', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'FloatArrayList.sort()', 'OpenFloatLongHashMap.pairsMatching(org.apache.mahout.math.function.FloatLongProcedure,org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.LongArrayList)', 'OpenFloatLongHashMap.removeKey(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'FloatLongProcedure.apply(float,long)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'LongArrayList.add(long)', 'Arrays.ensureCapacity(long[],int)', 'OpenFloatLongHashMap.indexOfKey(float)', 'OpenFloatLongHashMap.rehash(int)', 'FloatArrayList.clear()', 'FloatArrayList.add(float)', 'OpenFloatLongHashMap.put(float,long)', 'LongArrayList.sort()', 'LongArrayList.ensureCapacity(int)', 'FloatArrayList.get(int)', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testValues(): ['LongArrayList.elements()', 'OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.chooseShrinkCapacity(int,double,double)', 'LongArrayList.get(int)', 'OpenFloatLongHashMap.values(org.apache.mahout.math.list.LongArrayList)', 'OpenFloatLongHashMap.put(float,long)', 'LongArrayList.sort()', 'LongArrayList.size()', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.removeKey(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'LongArrayList.setSize(int)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatLongHashMap.indexOfKey(float)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testCopy(): ['OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.clear()', 'OpenFloatLongHashMap.nextPrime(int)', 'OpenFloatLongHashMap.trimToSize()', 'OpenFloatLongHashMap.put(float,long)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.copy()', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.size()', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testEquals(): ['OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.chooseShrinkCapacity(int,double,double)', 'OpenFloatLongHashMap.equals(java.lang.Object)', 'OpenFloatLongHashMap.put(float,long)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.copy()', 'OpenFloatLongHashMap.removeKey(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatLongHashMap.indexOfKey(float)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testKeysSortedByValue(): ['OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.chooseShrinkCapacity(int,double,double)', 'FloatArrayList.size()', 'OpenFloatLongHashMap.keysSortedByValue(org.apache.mahout.math.list.FloatArrayList)', 'OpenFloatLongHashMap.put(float,long)', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'OpenFloatLongHashMap.removeKey(float)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'FloatArrayList.toArray(float[])', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'OpenFloatLongHashMap.indexOfKey(float)', 'HashFunctions.hash(float)']
OpenFloatLongHashMapTest.testPairsSortedByKey(): ['OpenFloatLongHashMap.rehash(int)', 'OpenFloatLongHashMap.pairsSortedByValue(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.LongArrayList)', 'FloatArrayList.clear()', 'OpenFloatLongHashMap.pairsSortedByKey(org.apache.mahout.math.list.FloatArrayList,org.apache.mahout.math.list.LongArrayList)', 'LongArrayList.get(int)', 'FloatArrayList.size()', 'OpenFloatLongHashMap.put(float,long)', 'LongArrayList.clear()', 'LongArrayList.size()', 'OpenFloatLongHashMap.indexOfInsertion(float)', 'FloatArrayList.get(int)', 'OpenFloatLongHashMap.chooseHighWaterMark(int,double)', 'OpenFloatLongHashMap.chooseLowWaterMark(int,double)', 'OpenFloatLongHashMap.chooseGrowCapacity(int,double,double)', 'HashFunctions.hash(float)']
OpenDoubleObjectHashMapTest.testConstructors(): ['OpenDoubleObjectHashMap.getInternalFactors(int[],double[],double[])', 'PrimeFinder.nextPrime(int)']
OpenDoubleObjectHashMapTest.testEnsureCapacity(): ['OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(double)', 'PrimeFinder.nextPrime(int)', 'OpenDoubleObjectHashMap.getInternalFactors(int[],double[],double[])', 'OpenDoubleObjectHashMap.ensureCapacity(int)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.nextPrime(int)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)']
OpenDoubleObjectHashMapTest.testClear(): ['OpenDoubleObjectHashMap.get(double)', 'OpenDoubleObjectHashMap.indexOfKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.containsKey(double)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.trimToSize()', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleObjectHashMap.size()', 'OpenDoubleObjectHashMap.clear()', 'OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.nextPrime(int)']
OpenDoubleObjectHashMapTest.testClone(): ['HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.trimToSize()', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleObjectHashMap.size()', 'OpenDoubleObjectHashMap.clear()', 'AbstractDoubleObjectMap.clone()', 'OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.nextPrime(int)', 'OpenDoubleObjectHashMap.clone()']
OpenDoubleObjectHashMapTest.testContainsKey(): ['OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.indexOfKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.containsKey(double)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleObjectHashMapTest.testContainValue(): ['OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.containsValue(java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleObjectHashMap.indexOfValue(java.lang.Object)']
OpenDoubleObjectHashMapTest.testForEachKey(): ['DoubleArrayList.toArray(double[])', 'OpenDoubleObjectHashMap.indexOfKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.removeKey(double)', 'DoubleArrayList.size()', 'OpenDoubleObjectHashMap.forEachKey(org.apache.mahout.math.function.DoubleProcedure)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'DoubleProcedure.apply(double)', 'OpenDoubleObjectHashMap.chooseShrinkCapacity(int,double,double)']
OpenDoubleObjectHashMapTest.testForEachPair(): ['OpenDoubleObjectHashMap.indexOfKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)', 'DoubleObjectProcedure.apply(double,java.lang.Object)', 'OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.removeKey(double)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleObjectHashMap.forEachPair(org.apache.mahout.math.function.DoubleObjectProcedure)']
OpenDoubleObjectHashMapTest.testGet(): ['OpenDoubleObjectHashMap.get(double)', 'OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.indexOfKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleObjectHashMapTest.testKeys(): ['OpenDoubleObjectHashMap.keys(org.apache.mahout.math.list.DoubleArrayList)', 'HashFunctions.hash(double)', 'DoubleArrayList.get(int)', 'DoubleArrayList.elements()', 'DoubleArrayList.sort()', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)', 'DoubleArrayList.setSize(int)', 'OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.keys()']
OpenDoubleObjectHashMapTest.testPairsMatching(): ['OpenDoubleObjectHashMap.indexOfKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.pairsMatching(org.apache.mahout.math.function.DoubleObjectProcedure,org.apache.mahout.math.list.DoubleArrayList,java.util.List)', 'DoubleArrayList.get(int)', 'DoubleArrayList.sort()', 'DoubleArrayList.add(double)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)', 'DoubleObjectProcedure.apply(double,java.lang.Object)', 'OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.removeKey(double)', 'DoubleArrayList.clear()', 'DoubleArrayList.size()', 'Arrays.ensureCapacity(double[],int)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'DoubleArrayList.ensureCapacity(int)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.chooseShrinkCapacity(int,double,double)']
OpenDoubleObjectHashMapTest.testValues(): ['OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.indexOfKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.removeKey(double)', 'OpenDoubleObjectHashMap.values(java.util.List)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.chooseShrinkCapacity(int,double,double)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleObjectHashMapTest.testCopy(): ['HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.trimToSize()', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleObjectHashMap.size()', 'OpenDoubleObjectHashMap.clear()', 'OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.copy()', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.nextPrime(int)']
OpenDoubleObjectHashMapTest.testEquals(): ['OpenDoubleObjectHashMap.equals(java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.removeKey(double)', 'OpenDoubleObjectHashMap.copy()', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.chooseShrinkCapacity(int,double,double)']
OpenDoubleObjectHashMapTest.testKeysSortedByValue(): ['DoubleArrayList.toArray(double[])', 'OpenDoubleObjectHashMap.indexOfKey(double)', 'HashFunctions.hash(double)', 'OpenDoubleObjectHashMap.keysSortedByValue(org.apache.mahout.math.list.DoubleArrayList)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)', 'OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'OpenDoubleObjectHashMap.removeKey(double)', 'DoubleArrayList.size()', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.chooseShrinkCapacity(int,double,double)']
OpenDoubleObjectHashMapTest.testPairsSortedByKey(): ['OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(double)', 'DoubleArrayList.size()', 'DoubleArrayList.get(int)', 'OpenDoubleObjectHashMap.pairsSortedByKey(org.apache.mahout.math.list.DoubleArrayList,java.util.List)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)']
OpenDoubleObjectHashMapTest.testPairsSortedByValue(): ['OpenDoubleObjectHashMap.chooseHighWaterMark(int,double)', 'HashFunctions.hash(double)', 'DoubleArrayList.get(int)', 'OpenDoubleObjectHashMap.chooseLowWaterMark(int,double)', 'OpenDoubleObjectHashMap.rehash(int)', 'OpenDoubleObjectHashMap.put(double,java.lang.Object)', 'OpenDoubleObjectHashMap.pairsSortedByValue(org.apache.mahout.math.list.DoubleArrayList,java.util.List)', 'OpenDoubleObjectHashMap.indexOfInsertion(double)', 'OpenDoubleObjectHashMap.chooseGrowCapacity(int,double,double)']
MurmurHash3Test.testCorrectValues(): ['MurmurHash3.murmurhash3x8632(byte[],int,int,int)']
TestSparseMatrix.testSparseCopy(): ['SparseMatrix.iterator()', 'SparseMatrix.numRows()', 'SparseMatrix.numCols()', 'MatrixSlice.index()', 'SparseMatrix.clone()', 'MatrixSlice.clone()']
WeightedVectorTest.testLength(): ['Centroid.set(int,double)', 'Centroid.getVector()', 'Centroid.getLengthSquared()', 'Vector.getLengthSquared()']
WeightedVectorTest.testOrdering(): ['WeightedVector.all()', 'WeightedVector.getWeight()', 'DelegatingVector.clone()', 'WeightedVector.clone()', 'WeightedVector.get(int)', 'Vector$Element.index()', 'Vector.clone()', 'Vector.norm(double)', 'Vector$Element.get()', 'WeightedVectorComparator.compare(org.apache.mahout.math.WeightedVector,org.apache.mahout.math.WeightedVector)', 'WeightedVector.minus(org.apache.mahout.math.Vector)']
WeightedVectorTest.testProjection(): ['Vector.plus(org.apache.mahout.math.Vector)', 'Matrix.viewColumn(int)', 'QRDecomposition.getQ()', 'WeightedVector.getWeight()', 'Vector.minus(org.apache.mahout.math.Vector)', 'DenseVector.assign(org.apache.mahout.math.function.DoubleFunction)', 'WeightedVector.project(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector,int)', 'DenseMatrix.assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix.viewPart(int,int,int,int)', 'WeightedVector.project(org.apache.mahout.math.Vector,org.apache.mahout.math.Vector)', 'Matrix.transpose()', 'Functions.random()', 'Vector.dot(org.apache.mahout.math.Vector)', 'WeightedVector.getIndex()', 'Matrix.times(org.apache.mahout.math.Vector)', 'Vector.normalize()']
WeightedVectorTest.testSize(): ['Vector.getNumNonZeroElements()']
TestConjugateGradientSolver.testConjugateGradientSolver(): ['VectorIterable.numCols()', 'VectorIterable.times(org.apache.mahout.math.Vector)', 'ConjugateGradientSolver.getResidualNorm()', 'PlusMult.setMultiplicator(double)', 'Preconditioner.precondition(org.apache.mahout.math.Vector)', 'Vector.assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', 'Vector.size()', 'ConjugateGradientSolver.getIterations()', 'Vector.getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector.minus(org.apache.mahout.math.Vector)', 'Vector.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'ConjugateGradientSolver.solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector)', 'Matrix.times(org.apache.mahout.math.Vector)', 'VectorIterable.numRows()', 'Vector.dot(org.apache.mahout.math.Vector)', 'ConjugateGradientSolver.solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector,org.apache.mahout.math.solver.Preconditioner,int,double)']
TestConjugateGradientSolver.testConditionedConjugateGradientSolver(): ['VectorIterable.numCols()', 'VectorIterable.times(org.apache.mahout.math.Vector)', 'ConjugateGradientSolver.getResidualNorm()', 'PlusMult.setMultiplicator(double)', 'Preconditioner.precondition(org.apache.mahout.math.Vector)', 'Vector.assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', 'Vector.size()', 'ConjugateGradientSolver.getIterations()', 'Vector.getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector.minus(org.apache.mahout.math.Vector)', 'Vector.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Matrix.times(org.apache.mahout.math.Vector)', 'VectorIterable.numRows()', 'Vector.dot(org.apache.mahout.math.Vector)', 'ConjugateGradientSolver.solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector,org.apache.mahout.math.solver.Preconditioner,int,double)']
TestConjugateGradientSolver.testEarlyStop(): ['VectorIterable.numCols()', 'VectorIterable.times(org.apache.mahout.math.Vector)', 'PlusMult.setMultiplicator(double)', 'Preconditioner.precondition(org.apache.mahout.math.Vector)', 'Vector.assign(org.apache.mahout.math.function.DoubleDoubleFunction,double)', 'Vector.size()', 'ConjugateGradientSolver.getIterations()', 'Vector.getDistanceSquared(org.apache.mahout.math.Vector)', 'Vector.minus(org.apache.mahout.math.Vector)', 'Vector.assign(org.apache.mahout.math.Vector,org.apache.mahout.math.function.DoubleDoubleFunction)', 'Matrix.times(org.apache.mahout.math.Vector)', 'VectorIterable.numRows()', 'Vector.dot(org.apache.mahout.math.Vector)', 'ConjugateGradientSolver.solve(org.apache.mahout.math.VectorIterable,org.apache.mahout.math.Vector,org.apache.mahout.math.solver.Preconditioner,int,double)']
EigenDecompositionTest.testDegenerateMatrix(): ['Matrix.assign(org.apache.mahout.math.Matrix)', 'EigenDecomposition.getV()', 'Matrix.times(org.apache.mahout.math.Matrix)', 'Matrix.like()', 'Vector.getQuick(int)', 'Matrix.setQuick(int,int,double)', 'Vector.assign(org.apache.mahout.math.Vector)', 'EigenDecomposition.getD()', 'Matrix.viewDiagonal()', 'Matrix.assign(double)']
EigenDecompositionTest.testDeficientRank(): ['EigenDecomposition.getImagEigenvalues()', 'EigenDecomposition.getV()', 'Matrix.like()', 'EigenDecomposition.getRealEigenvalues()', 'DenseMatrix.assign(org.apache.mahout.math.function.DoubleFunction)', 'Matrix.setQuick(int,int,double)', 'Vector.assign(org.apache.mahout.math.Vector)', 'Matrix.assign(double)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'Vector.getQuick(int)', 'Vector.norm(double)', 'Matrix.transpose()', 'EigenDecomposition.getD()', 'Matrix.viewDiagonal()']
EigenDecompositionTest.testEigen(): ['MatrixSlice.vector()', 'EigenDecomposition.getV()', 'Matrix.like()', 'Matrix.setQuick(int,int,double)', 'Vector.assign(org.apache.mahout.math.Vector)', 'Vector$Element.set(double)', 'Matrix.iterator()', 'Matrix.assign(double)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'MatrixSlice.getVector()', 'Vector.all()', 'Vector.getQuick(int)', 'EigenDecomposition.getD()', 'Matrix.viewDiagonal()']
EigenDecompositionTest.testSequential(): ['MatrixSlice.vector()', 'EigenDecomposition.getV()', 'Matrix.like()', 'Matrix.setQuick(int,int,double)', 'Vector.assign(org.apache.mahout.math.Vector)', 'Vector$Element.set(double)', 'Matrix.iterator()', 'Matrix.assign(double)', 'Matrix.assign(org.apache.mahout.math.Matrix)', 'Matrix.times(org.apache.mahout.math.Matrix)', 'MatrixSlice.getVector()', 'Vector.all()', 'Vector.getQuick(int)', 'Matrix.transpose()', 'EigenDecomposition.getD()', 'Matrix.viewDiagonal()']
TestDenseMatrix.testGetValues(): ['DenseMatrix.set(int,int,double)', 'DenseMatrix.getBackingStructure()']
FunctionTest.testIsLikeRightPlus(): ['DoubleDoubleFunction.isLikeRightPlus()', 'DoubleDoubleFunction.apply(double,double)']
FunctionTest.testIsLikeLeftMult(): ['DoubleDoubleFunction.isLikeLeftMult()', 'DoubleDoubleFunction.apply(double,double)']
FunctionTest.testIsLikeRightMult(): ['DoubleDoubleFunction.apply(double,double)', 'DoubleDoubleFunction.isLikeRightMult()']
FunctionTest.testIsCommutative(): ['DoubleDoubleFunction.isCommutative()', 'DoubleDoubleFunction.apply(double,double)']
FunctionTest.testIsAssociative(): ['DoubleDoubleFunction.isAssociative()', 'DoubleDoubleFunction.apply(double,double)']
FunctionTest.testIsDensifying(): ['DoubleDoubleFunction.isDensifying()', 'DoubleDoubleFunction.apply(double,double)']
